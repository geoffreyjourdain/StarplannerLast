/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.bwapi.bridge.swig;
import org.bwapi.bridge.model.BwapiPointable;
public class SWIG_Game implements BwapiPointable {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public SWIG_Game(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(SWIG_Game obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public long getCPtr() {
    return swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bridgeJNI.delete_SWIG_Game(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_std__setT_BWAPI__Force_p_t getForces() {
    return new SWIGTYPE_p_std__setT_BWAPI__Force_p_t(bridgeJNI.SWIG_Game_getForces(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Player_p_t getPlayers() {
    return new SWIGTYPE_p_std__setT_BWAPI__Player_p_t(bridgeJNI.SWIG_Game_getPlayers(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getAllUnits() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getAllUnits(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getMinerals() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getMinerals(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getGeysers() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getGeysers(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getNeutralUnits() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getNeutralUnits(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getStaticMinerals() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getStaticMinerals(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getStaticGeysers() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getStaticGeysers(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getStaticNeutralUnits() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getStaticNeutralUnits(swigCPtr, this), false);
  }

  public int getLatency() {
    return bridgeJNI.SWIG_Game_getLatency(swigCPtr, this);
  }

  public int getFrameCount() {
    return bridgeJNI.SWIG_Game_getFrameCount(swigCPtr, this);
  }

  public int getMouseX() {
    return bridgeJNI.SWIG_Game_getMouseX(swigCPtr, this);
  }

  public int getMouseY() {
    return bridgeJNI.SWIG_Game_getMouseY(swigCPtr, this);
  }

  public int getScreenX() {
    return bridgeJNI.SWIG_Game_getScreenX(swigCPtr, this);
  }

  public int getScreenY() {
    return bridgeJNI.SWIG_Game_getScreenY(swigCPtr, this);
  }

  public boolean isFlagEnabled(int flag) {
    return bridgeJNI.SWIG_Game_isFlagEnabled(swigCPtr, this, flag);
  }

  public void enableFlag(int flag) {
    bridgeJNI.SWIG_Game_enableFlag(swigCPtr, this, flag);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t unitsOnTile(int x, int y) {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_unitsOnTile(swigCPtr, this, x, y), false);
  }

  public SWIG_Error getLastError() {
    return new SWIG_Error(bridgeJNI.SWIG_Game_getLastError(swigCPtr, this), true);
  }

  public int mapWidth() {
    return bridgeJNI.SWIG_Game_mapWidth(swigCPtr, this);
  }

  public int mapHeight() {
    return bridgeJNI.SWIG_Game_mapHeight(swigCPtr, this);
  }

  public String mapFilename() {
    return bridgeJNI.SWIG_Game_mapFilename(swigCPtr, this);
  }

  public String mapName() {
    return bridgeJNI.SWIG_Game_mapName(swigCPtr, this);
  }

  public int getMapHash() {
    return bridgeJNI.SWIG_Game_getMapHash(swigCPtr, this);
  }

  public int getGroundHeight(int x, int y) {
    return bridgeJNI.SWIG_Game_getGroundHeight(swigCPtr, this, x, y);
  }

  public boolean isWalkable(int x, int y) {
    return bridgeJNI.SWIG_Game_isWalkable(swigCPtr, this, x, y);
  }

  public boolean isBuildable(int x, int y) {
    return bridgeJNI.SWIG_Game_isBuildable__SWIG_0(swigCPtr, this, x, y);
  }

  public boolean isVisible(int x, int y) {
    return bridgeJNI.SWIG_Game_isVisible__SWIG_0(swigCPtr, this, x, y);
  }

  public boolean isExplored(int x, int y) {
    return bridgeJNI.SWIG_Game_isExplored__SWIG_0(swigCPtr, this, x, y);
  }

  public boolean hasCreep(int x, int y) {
    return bridgeJNI.SWIG_Game_hasCreep__SWIG_0(swigCPtr, this, x, y);
  }

  public boolean hasPower(int x, int y, int tileWidth, int tileHeight) {
    return bridgeJNI.SWIG_Game_hasPower__SWIG_0(swigCPtr, this, x, y, tileWidth, tileHeight);
  }

  public boolean isBuildable(SWIGTYPE_p_TilePosition position) {
    return bridgeJNI.SWIG_Game_isBuildable__SWIG_1(swigCPtr, this, SWIGTYPE_p_TilePosition.getCPtr(position));
  }

  public boolean isVisible(SWIGTYPE_p_TilePosition position) {
    return bridgeJNI.SWIG_Game_isVisible__SWIG_1(swigCPtr, this, SWIGTYPE_p_TilePosition.getCPtr(position));
  }

  public boolean isExplored(SWIGTYPE_p_TilePosition position) {
    return bridgeJNI.SWIG_Game_isExplored__SWIG_1(swigCPtr, this, SWIGTYPE_p_TilePosition.getCPtr(position));
  }

  public boolean hasCreep(SWIGTYPE_p_TilePosition position) {
    return bridgeJNI.SWIG_Game_hasCreep__SWIG_1(swigCPtr, this, SWIGTYPE_p_TilePosition.getCPtr(position));
  }

  public boolean hasPower(SWIGTYPE_p_TilePosition position, int tileWidth, int tileHeight) {
    return bridgeJNI.SWIG_Game_hasPower__SWIG_1(swigCPtr, this, SWIGTYPE_p_TilePosition.getCPtr(position), tileWidth, tileHeight);
  }

  public boolean canBuildHere(SWIG_Unit builder, SWIGTYPE_p_TilePosition position, SWIG_UnitType type) {
    return bridgeJNI.SWIG_Game_canBuildHere(swigCPtr, this, SWIG_Unit.getCPtr(builder), builder, SWIGTYPE_p_TilePosition.getCPtr(position), SWIG_UnitType.getCPtr(type), type);
  }

  public boolean canMake(SWIG_Unit builder, SWIG_UnitType type) {
    return bridgeJNI.SWIG_Game_canMake(swigCPtr, this, SWIG_Unit.getCPtr(builder), builder, SWIG_UnitType.getCPtr(type), type);
  }

  public boolean canResearch(SWIG_Unit unit, SWIGTYPE_p_TechType type) {
    return bridgeJNI.SWIG_Game_canResearch(swigCPtr, this, SWIG_Unit.getCPtr(unit), unit, SWIGTYPE_p_TechType.getCPtr(type));
  }

  public boolean canUpgrade(SWIG_Unit unit, SWIGTYPE_p_UpgradeType type) {
    return bridgeJNI.SWIG_Game_canUpgrade(swigCPtr, this, SWIG_Unit.getCPtr(unit), unit, SWIGTYPE_p_UpgradeType.getCPtr(type));
  }

  public SWIGTYPE_p_std__setT_TilePosition_t getStartLocations() {
    return new SWIGTYPE_p_std__setT_TilePosition_t(bridgeJNI.SWIG_Game_getStartLocations(swigCPtr, this), false);
  }

  public void printf(String text) {
    bridgeJNI.SWIG_Game_printf(swigCPtr, this, text);
  }

  public void sendText(String text) {
    bridgeJNI.SWIG_Game_sendText(swigCPtr, this, text);
  }

  public void changeRace(SWIGTYPE_p_Race race) {
    bridgeJNI.SWIG_Game_changeRace(swigCPtr, this, SWIGTYPE_p_Race.getCPtr(race));
  }

  public boolean isMultiplayer() {
    return bridgeJNI.SWIG_Game_isMultiplayer(swigCPtr, this);
  }

  public boolean isPaused() {
    return bridgeJNI.SWIG_Game_isPaused(swigCPtr, this);
  }

  public boolean isReplay() {
    return bridgeJNI.SWIG_Game_isReplay(swigCPtr, this);
  }

  public void startGame() {
    bridgeJNI.SWIG_Game_startGame(swigCPtr, this);
  }

  public void pauseGame() {
    bridgeJNI.SWIG_Game_pauseGame(swigCPtr, this);
  }

  public void resumeGame() {
    bridgeJNI.SWIG_Game_resumeGame(swigCPtr, this);
  }

  public void leaveGame() {
    bridgeJNI.SWIG_Game_leaveGame(swigCPtr, this);
  }

  public void restartGame() {
    bridgeJNI.SWIG_Game_restartGame(swigCPtr, this);
  }

  public void setLocalSpeed(int speed) {
    bridgeJNI.SWIG_Game_setLocalSpeed__SWIG_0(swigCPtr, this, speed);
  }

  public void setLocalSpeed() {
    bridgeJNI.SWIG_Game_setLocalSpeed__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__setT_BWAPI__Unit_p_t getSelectedUnits() {
    return new SWIGTYPE_p_std__setT_BWAPI__Unit_p_t(bridgeJNI.SWIG_Game_getSelectedUnits(swigCPtr, this), false);
  }

  public SWIG_Player self() {
    long cPtr = bridgeJNI.SWIG_Game_self(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_Player(cPtr, false);
  }

  public SWIG_Player enemy() {
    long cPtr = bridgeJNI.SWIG_Game_enemy(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_Player(cPtr, false);
  }

  public void drawText(int ctype, int x, int y, String text) {
    bridgeJNI.SWIG_Game_drawText(swigCPtr, this, ctype, x, y, text);
  }

  public void drawTextMap(int x, int y, String text) {
    bridgeJNI.SWIG_Game_drawTextMap(swigCPtr, this, x, y, text);
  }

  public void drawTextMouse(int x, int y, String text) {
    bridgeJNI.SWIG_Game_drawTextMouse(swigCPtr, this, x, y, text);
  }

  public void drawTextScreen(int x, int y, String text) {
    bridgeJNI.SWIG_Game_drawTextScreen(swigCPtr, this, x, y, text);
  }

  public void drawBox(int ctype, int left, int top, int right, int bottom, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawBox__SWIG_0(swigCPtr, this, ctype, left, top, right, bottom, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawBox(int ctype, int left, int top, int right, int bottom, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawBox__SWIG_1(swigCPtr, this, ctype, left, top, right, bottom, SWIG_Color.getCPtr(color), color);
  }

  public void drawBoxMap(int left, int top, int right, int bottom, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawBoxMap__SWIG_0(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawBoxMap(int left, int top, int right, int bottom, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawBoxMap__SWIG_1(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color);
  }

  public void drawBoxMouse(int left, int top, int right, int bottom, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawBoxMouse__SWIG_0(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawBoxMouse(int left, int top, int right, int bottom, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawBoxMouse__SWIG_1(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color);
  }

  public void drawBoxScreen(int left, int top, int right, int bottom, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawBoxScreen__SWIG_0(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawBoxScreen(int left, int top, int right, int bottom, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawBoxScreen__SWIG_1(swigCPtr, this, left, top, right, bottom, SWIG_Color.getCPtr(color), color);
  }

  public void drawTriangle(int ctype, int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawTriangle__SWIG_0(swigCPtr, this, ctype, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawTriangle(int ctype, int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawTriangle__SWIG_1(swigCPtr, this, ctype, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color);
  }

  public void drawTriangleMap(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawTriangleMap__SWIG_0(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawTriangleMap(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawTriangleMap__SWIG_1(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color);
  }

  public void drawTriangleMouse(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawTriangleMouse__SWIG_0(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawTriangleMouse(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawTriangleMouse__SWIG_1(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color);
  }

  public void drawTriangleScreen(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawTriangleScreen__SWIG_0(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawTriangleScreen(int ax, int ay, int bx, int by, int cx, int cy, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawTriangleScreen__SWIG_1(swigCPtr, this, ax, ay, bx, by, cx, cy, SWIG_Color.getCPtr(color), color);
  }

  public void drawCircle(int ctype, int x, int y, int radius, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawCircle__SWIG_0(swigCPtr, this, ctype, x, y, radius, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawCircle(int ctype, int x, int y, int radius, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawCircle__SWIG_1(swigCPtr, this, ctype, x, y, radius, SWIG_Color.getCPtr(color), color);
  }

  public void drawCircleMap(int x, int y, int radius, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawCircleMap__SWIG_0(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawCircleMap(int x, int y, int radius, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawCircleMap__SWIG_1(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color);
  }

  public void drawCircleMouse(int x, int y, int radius, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawCircleMouse__SWIG_0(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawCircleMouse(int x, int y, int radius, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawCircleMouse__SWIG_1(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color);
  }

  public void drawCircleScreen(int x, int y, int radius, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawCircleScreen__SWIG_0(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawCircleScreen(int x, int y, int radius, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawCircleScreen__SWIG_1(swigCPtr, this, x, y, radius, SWIG_Color.getCPtr(color), color);
  }

  public void drawEllipse(int ctype, int x, int y, int xrad, int yrad, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawEllipse__SWIG_0(swigCPtr, this, ctype, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawEllipse(int ctype, int x, int y, int xrad, int yrad, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawEllipse__SWIG_1(swigCPtr, this, ctype, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color);
  }

  public void drawEllipseMap(int x, int y, int xrad, int yrad, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawEllipseMap__SWIG_0(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawEllipseMap(int x, int y, int xrad, int yrad, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawEllipseMap__SWIG_1(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color);
  }

  public void drawEllipseMouse(int x, int y, int xrad, int yrad, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawEllipseMouse__SWIG_0(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawEllipseMouse(int x, int y, int xrad, int yrad, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawEllipseMouse__SWIG_1(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color);
  }

  public void drawEllipseScreen(int x, int y, int xrad, int yrad, SWIG_Color color, boolean isSolid) {
    bridgeJNI.SWIG_Game_drawEllipseScreen__SWIG_0(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color, isSolid);
  }

  public void drawEllipseScreen(int x, int y, int xrad, int yrad, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawEllipseScreen__SWIG_1(swigCPtr, this, x, y, xrad, yrad, SWIG_Color.getCPtr(color), color);
  }

  public void drawDot(int ctype, int x, int y, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawDot(swigCPtr, this, ctype, x, y, SWIG_Color.getCPtr(color), color);
  }

  public void drawDotMap(int x, int y, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawDotMap(swigCPtr, this, x, y, SWIG_Color.getCPtr(color), color);
  }

  public void drawDotMouse(int x, int y, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawDotMouse(swigCPtr, this, x, y, SWIG_Color.getCPtr(color), color);
  }

  public void drawDotScreen(int x, int y, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawDotScreen(swigCPtr, this, x, y, SWIG_Color.getCPtr(color), color);
  }

  public void drawLine(int ctype, int x1, int y1, int x2, int y2, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawLine(swigCPtr, this, ctype, x1, y1, x2, y2, SWIG_Color.getCPtr(color), color);
  }

  public void drawLineMap(int x1, int y1, int x2, int y2, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawLineMap(swigCPtr, this, x1, y1, x2, y2, SWIG_Color.getCPtr(color), color);
  }

  public void drawLineMouse(int x1, int y1, int x2, int y2, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawLineMouse(swigCPtr, this, x1, y1, x2, y2, SWIG_Color.getCPtr(color), color);
  }

  public void drawLineScreen(int x1, int y1, int x2, int y2, SWIG_Color color) {
    bridgeJNI.SWIG_Game_drawLineScreen(swigCPtr, this, x1, y1, x2, y2, SWIG_Color.getCPtr(color), color);
  }

}
