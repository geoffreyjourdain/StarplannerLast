/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.bwapi.bridge.swig;
import org.bwapi.bridge.model.BwapiPointable;
public class SWIG_WeaponType implements BwapiPointable {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public SWIG_WeaponType(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(SWIG_WeaponType obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public long getCPtr() {
    return swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bridgeJNI.delete_SWIG_WeaponType(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIG_WeaponType() {
    this(bridgeJNI.new_SWIG_WeaponType__SWIG_0(), true);
  }

  public SWIG_WeaponType(int id) {
    this(bridgeJNI.new_SWIG_WeaponType__SWIG_1(id), true);
  }

  public SWIG_WeaponType(SWIG_WeaponType other) {
    this(bridgeJNI.new_SWIG_WeaponType__SWIG_2(SWIG_WeaponType.getCPtr(other), other), true);
  }

  public SWIG_WeaponType opAssign(SWIG_WeaponType other) {
    return new SWIG_WeaponType(bridgeJNI.SWIG_WeaponType_opAssign(swigCPtr, this, SWIG_WeaponType.getCPtr(other), other), false);
  }

  public boolean opEquals(SWIG_WeaponType other) {
    return bridgeJNI.SWIG_WeaponType_opEquals(swigCPtr, this, SWIG_WeaponType.getCPtr(other), other);
  }

  public boolean opNotEquals(SWIG_WeaponType other) {
    return bridgeJNI.SWIG_WeaponType_opNotEquals(swigCPtr, this, SWIG_WeaponType.getCPtr(other), other);
  }

  public boolean opLessThan(SWIG_WeaponType other) {
    return bridgeJNI.SWIG_WeaponType_opLessThan(swigCPtr, this, SWIG_WeaponType.getCPtr(other), other);
  }

  public int getID() {
    return bridgeJNI.SWIG_WeaponType_getID(swigCPtr, this);
  }

  public String getName() {
    return bridgeJNI.SWIG_WeaponType_getName(swigCPtr, this);
  }

  public SWIG_TechType getTech() {
    long cPtr = bridgeJNI.SWIG_WeaponType_getTech(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_TechType(cPtr, false);
  }

  public SWIG_UnitType whatUses() {
    long cPtr = bridgeJNI.SWIG_WeaponType_whatUses(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_UnitType(cPtr, false);
  }

  public int damageAmount() {
    return bridgeJNI.SWIG_WeaponType_damageAmount(swigCPtr, this);
  }

  public int damageBonus() {
    return bridgeJNI.SWIG_WeaponType_damageBonus(swigCPtr, this);
  }

  public int damageCooldown() {
    return bridgeJNI.SWIG_WeaponType_damageCooldown(swigCPtr, this);
  }

  public int damageFactor() {
    return bridgeJNI.SWIG_WeaponType_damageFactor(swigCPtr, this);
  }

  public SWIG_UpgradeType upgradeType() {
    long cPtr = bridgeJNI.SWIG_WeaponType_upgradeType(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_UpgradeType(cPtr, false);
  }

  public SWIG_DamageType damageType() {
    long cPtr = bridgeJNI.SWIG_WeaponType_damageType(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_DamageType(cPtr, false);
  }

  public SWIG_ExplosionType explosionType() {
    long cPtr = bridgeJNI.SWIG_WeaponType_explosionType(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIG_ExplosionType(cPtr, false);
  }

  public int minRange() {
    return bridgeJNI.SWIG_WeaponType_minRange(swigCPtr, this);
  }

  public int maxRange() {
    return bridgeJNI.SWIG_WeaponType_maxRange(swigCPtr, this);
  }

  public int innerSplashRadius() {
    return bridgeJNI.SWIG_WeaponType_innerSplashRadius(swigCPtr, this);
  }

  public int medianSplashRadius() {
    return bridgeJNI.SWIG_WeaponType_medianSplashRadius(swigCPtr, this);
  }

  public int outerSplashRadius() {
    return bridgeJNI.SWIG_WeaponType_outerSplashRadius(swigCPtr, this);
  }

  public boolean targetsAir() {
    return bridgeJNI.SWIG_WeaponType_targetsAir(swigCPtr, this);
  }

  public boolean targetsGround() {
    return bridgeJNI.SWIG_WeaponType_targetsGround(swigCPtr, this);
  }

  public boolean targetsMechanical() {
    return bridgeJNI.SWIG_WeaponType_targetsMechanical(swigCPtr, this);
  }

  public boolean targetsOrganic() {
    return bridgeJNI.SWIG_WeaponType_targetsOrganic(swigCPtr, this);
  }

  public boolean targetsNonBuilding() {
    return bridgeJNI.SWIG_WeaponType_targetsNonBuilding(swigCPtr, this);
  }

  public boolean targetsNonRobotic() {
    return bridgeJNI.SWIG_WeaponType_targetsNonRobotic(swigCPtr, this);
  }

  public boolean targetsTerrain() {
    return bridgeJNI.SWIG_WeaponType_targetsTerrain(swigCPtr, this);
  }

  public boolean targetsOrgOrMech() {
    return bridgeJNI.SWIG_WeaponType_targetsOrgOrMech(swigCPtr, this);
  }

  public boolean targetsOwn() {
    return bridgeJNI.SWIG_WeaponType_targetsOwn(swigCPtr, this);
  }

}
