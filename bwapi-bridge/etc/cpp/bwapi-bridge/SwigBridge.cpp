/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */



#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include "ListWrapper.h"
#include "MapWrapper.h"
#include "SetWrapper.h"
#include "VectorWrapper.h"
#include "BWAPI.h"
#include "BWTA.h"
using namespace BWAPI;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "SwigBridge.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BWAPI_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::BWAPI_init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1AIModule(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AIModule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AIModule *)new BWAPI::AIModule();
  *(BWAPI::AIModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1AIModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  (arg1)->onStart();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->onEnd(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  (arg1)->onFrame();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onSendText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->onSendText(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onPlayerLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  (arg1)->onPlayerLeft(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onNukeDetect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  Position arg2 ;
  Position *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  argp2 = *(Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Position");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->onNukeDetect(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitCreate(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitDestroy(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitMorph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitMorph(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitShow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitShow(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitHide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitHide(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitRenegade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AIModule **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  (arg1)->onUnitRenegade(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)new BWAPI::AttackType();
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::AttackType *)new BWAPI::AttackType(arg1);
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::AttackType *arg1 = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AttackType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::AttackType const & reference is null");
    return 0;
  } 
  result = (BWAPI::AttackType *)new BWAPI::AttackType((BWAPI::AttackType const &)*arg1);
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  arg2 = *(BWAPI::AttackType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::AttackType const & reference is null");
    return 0;
  } 
  result = (BWAPI::AttackType *) &(arg1)->operator =((BWAPI::AttackType const &)*arg2);
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  arg2 = *(BWAPI::AttackType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::AttackType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator ==((BWAPI::AttackType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  arg2 = *(BWAPI::AttackType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::AttackType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator !=((BWAPI::AttackType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  arg2 = *(BWAPI::AttackType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::AttackType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator <((BWAPI::AttackType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  result = (int)((BWAPI::AttackType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  result = ((BWAPI::AttackType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1AttackType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::AttackType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getAttackType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::AttackType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::AttackTypes::getAttackType(*arg1);
  *(BWAPI::AttackType **)&jresult = new BWAPI::AttackType((const BWAPI::AttackType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allAttackTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::AttackType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::AttackType > *) &BWAPI::AttackTypes::allAttackTypes();
  *(std::set< BWAPI::AttackType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initAttackTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::AttackTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Melee_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Melee;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Fusion_1Cutter_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Fusion_Cutter_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gauss_1Rifle_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Gauss_Rifle_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_C_110_1Canister_1Rifle_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::C_10_Canister_Rifle_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeGemeni_1Missiles_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Gemini_Missiles;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeFragmentation_1Grenade_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Fragmentation_Grenade;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeLongbolt_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Longbolt_Missile;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ATS_1ATA_1Laser_1Battery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::ATS_ATA_Laser_Battery;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeBurst_1Lasers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Burst_Lasers;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Shock_1Cannon_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Arclite_Shock_Cannon_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_EMP_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::EMP_Missile;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Dual_1Photon_1Blasters_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Dual_Photon_Blasters_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Particle_1Beam_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Particle_Beam_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Anti_1Matter_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Anti_Matter_Missile;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypePulse_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Pulse_Cannon;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Shockwave_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Psionic_Shockwave_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Storm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Psionic_Storm;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeYamato_1Gun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Yamato_Gun;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypePhase_1Disruptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Phase_Disruptor;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_STA_1STS_1Cannon_1Overlay_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::STA_STS_Cannon_Overlay;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Sunken_1Colony_1Tentacle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Sunken_Colony_Tentacle;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeAcid_1Spore_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Acid_Spore;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeGlave_1Wurm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Glave_Wurm;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeSeeker_1Spores_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Seeker_Spores;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Queen_1Spell_1Carrier_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Queen_Spell_Carrier;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Plague_1Cloud_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Plague_Cloud;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Consume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Consume;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Needle_1Spine_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Needle_Spine_Hit;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Invisible_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Invisible;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Optical_1Flare_1Grenade_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Optical_Flare_Grenade;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeHalo_1Rockets_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Halo_Rockets;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeSubterranean_1Spines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Subterranean_Spines;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Corrosive_1Acid_1Shot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Corrosive_Acid_Shot;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Neutron_1Flare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Neutron_Flare;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::None;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Unknown;
  *(BWAPI::AttackType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)new BWAPI::Color();
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1);
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Color *arg1 = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Color **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Color const & reference is null");
    return 0;
  } 
  result = (BWAPI::Color *)new BWAPI::Color((BWAPI::Color const &)*arg1);
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1,arg2,arg3);
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  arg2 = *(BWAPI::Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Color const & reference is null");
    return 0;
  } 
  result = (BWAPI::Color *) &(arg1)->operator =((BWAPI::Color const &)*arg2);
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  arg2 = *(BWAPI::Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Color const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator ==((BWAPI::Color const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  arg2 = *(BWAPI::Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Color const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator !=((BWAPI::Color const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  arg2 = *(BWAPI::Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Color const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator <((BWAPI::Color const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1red(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->red();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1green(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->green();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1blue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Color **)&jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->blue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initColors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::Colors::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Red_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Red;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Green_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Green;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Blue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Blue;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Yellow_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Yellow;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Cyan_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Cyan;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Purple_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Purple;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Orange_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Orange;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Black_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Black;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_White_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::White;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Grey_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Color *)&BWAPI::Colors::Grey;
  *(BWAPI::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TILE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BWAPI::TILE_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PYLON_1X_1RADIUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BWAPI::PYLON_X_RADIUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PYLON_1Y_1RADIUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BWAPI::PYLON_Y_RADIUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)new BWAPI::DamageType();
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::DamageType *)new BWAPI::DamageType(arg1);
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::DamageType *arg1 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::DamageType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::DamageType const & reference is null");
    return 0;
  } 
  result = (BWAPI::DamageType *)new BWAPI::DamageType((BWAPI::DamageType const &)*arg1);
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  arg2 = *(BWAPI::DamageType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::DamageType const & reference is null");
    return 0;
  } 
  result = (BWAPI::DamageType *) &(arg1)->operator =((BWAPI::DamageType const &)*arg2);
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  arg2 = *(BWAPI::DamageType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::DamageType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator ==((BWAPI::DamageType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  arg2 = *(BWAPI::DamageType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::DamageType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator !=((BWAPI::DamageType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  arg2 = *(BWAPI::DamageType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::DamageType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator <((BWAPI::DamageType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  result = (int)((BWAPI::DamageType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  result = ((BWAPI::DamageType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1DamageType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::DamageType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getDamageType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::DamageType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::DamageTypes::getDamageType(*arg1);
  *(BWAPI::DamageType **)&jresult = new BWAPI::DamageType((const BWAPI::DamageType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allDamageTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::DamageType > *) &BWAPI::DamageTypes::allDamageTypes();
  *(std::set< BWAPI::DamageType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initDamageTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::DamageTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeIndependent_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Independent;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Explosive_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Explosive;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Concussive_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Concussive;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeNormal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Normal;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Ignore_1Armor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Ignore_Armor;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::None;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Unknown;
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)new BWAPI::Error();
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::Error *)new BWAPI::Error(arg1);
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Error *arg1 = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Error **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Error const & reference is null");
    return 0;
  } 
  result = (BWAPI::Error *)new BWAPI::Error((BWAPI::Error const &)*arg1);
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  arg2 = *(BWAPI::Error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Error const & reference is null");
    return 0;
  } 
  result = (BWAPI::Error *) &(arg1)->operator =((BWAPI::Error const &)*arg2);
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  arg2 = *(BWAPI::Error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Error const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator ==((BWAPI::Error const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  arg2 = *(BWAPI::Error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Error const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator !=((BWAPI::Error const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  arg2 = *(BWAPI::Error **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Error const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator <((BWAPI::Error const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  result = (int)((BWAPI::Error const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1toErrorString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Error **)&jarg1; 
  result = ((BWAPI::Error const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::Error result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::Errors::getError(*arg1);
  *(BWAPI::Error **)&jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allErrors(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::Error > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::Error > *) &BWAPI::Errors::allErrors();
  *(std::set< BWAPI::Error > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initErrors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::Errors::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Does_1Not_1Exist_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Does_Not_Exist;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Not_1Visible_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Visible;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Not_1Owned_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Owned;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Busy_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Busy;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Incompatible_1UnitType_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_UnitType;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Incompatible_1TechType_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_TechType;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Already_1Researched_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Already_Researched;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Fully_1Upgraded_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Fully_Upgraded;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Minerals_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Minerals;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Gas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Gas;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Supply_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Supply;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Energy_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Energy;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Tech_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Tech;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Ammo_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Ammo;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Space_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Space;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unbuildable_1Location_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unbuildable_Location;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Out_1Of_1Range_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Out_Of_Range;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unable_1To_1Hit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unable_To_Hit;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Access_1Denied_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Access_Denied;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::None;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Error *)&BWAPI::Errors::Unknown;
  *(BWAPI::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType();
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType(arg1);
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *arg1 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::ExplosionType const & reference is null");
    return 0;
  } 
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType((BWAPI::ExplosionType const &)*arg1);
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  arg2 = *(BWAPI::ExplosionType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::ExplosionType const & reference is null");
    return 0;
  } 
  result = (BWAPI::ExplosionType *) &(arg1)->operator =((BWAPI::ExplosionType const &)*arg2);
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  arg2 = *(BWAPI::ExplosionType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::ExplosionType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator ==((BWAPI::ExplosionType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  arg2 = *(BWAPI::ExplosionType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::ExplosionType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator !=((BWAPI::ExplosionType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  arg2 = *(BWAPI::ExplosionType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::ExplosionType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator <((BWAPI::ExplosionType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  result = (int)((BWAPI::ExplosionType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  result = ((BWAPI::ExplosionType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1ExplosionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::ExplosionType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getExplosionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::ExplosionType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::ExplosionTypes::getExplosionType(*arg1);
  *(BWAPI::ExplosionType **)&jresult = new BWAPI::ExplosionType((const BWAPI::ExplosionType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allExplosionTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::ExplosionType > *) &BWAPI::ExplosionTypes::allExplosionTypes();
  *(std::set< BWAPI::ExplosionType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initExplosionTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::ExplosionTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::None;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeNormal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Normal;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Radial_1Splash_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Radial_Splash;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Enemy_1Splash_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Enemy_Splash;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeLockdown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Lockdown;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Nuclear_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Nuclear_Missile;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeParasite_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Parasite;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Broodlings_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Broodlings;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeEMP_1Shockwave_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::EMP_Shockwave;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeIrradiate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Irradiate;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeEnsnare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Ensnare;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypePlague_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Plague;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeStasis_1Field_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Stasis_Field;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeDark_1Swarm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Dark_Swarm;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeConsume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Consume;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeYamato_1Gun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Yamato_Gun;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeRestoration_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Restoration;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeDisruption_1Web_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Disruption_Web;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeCorrosive_1Acid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Corrosive_Acid;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeMind_1Control_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Mind_Control;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeFeedback_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Feedback;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeOptical_1Flare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Optical_Flare;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeMaelstrom_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Maelstrom;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Air_1Splash_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Air_Splash;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Unknown;
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_FLAG_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)BWAPI::FLAG_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Force_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Force **)&jarg1; 
  result = ((BWAPI::Force const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Force_1getPlayers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  SwigValueWrapper< std::set< BWAPI::Player * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Force **)&jarg1; 
  result = ((BWAPI::Force const *)arg1)->getPlayers();
  *(std::set< BWAPI::Player * > **)&jresult = new std::set< BWAPI::Player * >((const std::set< BWAPI::Player * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Force(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Force **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Force * > *) &(arg1)->getForces();
  *(std::set< BWAPI::Force * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getPlayers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->getPlayers();
  *(std::set< BWAPI::Player * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getAllUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getAllUnits();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getGeysers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getGeysers();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getNeutralUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getNeutralUnits();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticMinerals();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticGeysers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticGeysers();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticNeutralUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticNeutralUnits();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getLatency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getLatency();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getFrameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getFrameCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMouseX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getMouseX();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMouseY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getMouseY();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getScreenX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getScreenX();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getScreenY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getScreenY();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isFlagEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isFlagEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1enableFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableFlag(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1unitsOnTile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->unitsOnTile(arg2,arg3);
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getLastError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = ((BWAPI::Game const *)arg1)->getLastError();
  *(BWAPI::Error **)&jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->mapWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->mapHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (arg1)->mapFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (arg1)->mapName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMapHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (int)(arg1)->getMapHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getGroundHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getGroundHeight(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isWalkable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isWalkable(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isBuildable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isVisible_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isVisible(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isExplored_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isExplored(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasCreep_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->hasCreep(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasPower_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isBuildable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isBuildable(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isVisible_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isVisible(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isExplored_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isExplored(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasCreep_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->hasCreep(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasPower_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canBuildHere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  argp3 = *(TilePosition **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TilePosition");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(BWAPI::UnitType **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->canBuildHere(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canMake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg3 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  argp3 = *(BWAPI::UnitType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canMake(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canResearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  TechType arg3 ;
  TechType *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  argp3 = *(TechType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TechType");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canResearch(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canUpgrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  UpgradeType arg3 ;
  UpgradeType *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  argp3 = *(UpgradeType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UpgradeType");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canUpgrade(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStartLocations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< TilePosition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< TilePosition > *) &(arg1)->getStartLocations();
  *(std::set< TilePosition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1printf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printf((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1sendText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->sendText((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1changeRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  Race arg2 ;
  Race *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  argp2 = *(Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Race");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->changeRace(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isMultiplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (bool)(arg1)->isMultiplayer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isReplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (bool)(arg1)->isReplay();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1startGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->startGame();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1pauseGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->pauseGame();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1resumeGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->resumeGame();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1leaveGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->leaveGame();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1restartGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->restartGame();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1setLocalSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLocalSpeed(arg2);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1setLocalSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  (arg1)->setLocalSpeed();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getSelectedUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getSelectedUnits();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1self(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (BWAPI::Player *)(arg1)->self();
  *(BWAPI::Player **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1enemy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  result = (BWAPI::Player *)(arg1)->enemy();
  *(BWAPI::Player **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->drawText(arg2,arg3,arg4,(char const *)arg5,arg6);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->drawTextMap(arg2,arg3,(char const *)arg4,arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextMouse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->drawTextMouse(arg2,arg3,(char const *)arg4,arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->drawTextScreen(arg2,arg3,(char const *)arg4,arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = *(BWAPI::Color **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = *(BWAPI::Color **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMouse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMouse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxScreen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxScreen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jlong jarg9, jobject jarg9_, jboolean jarg10) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  bool arg10 ;
  BWAPI::Color *argp9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = *(BWAPI::Color **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg9 = *argp9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jlong jarg9, jobject jarg9_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  BWAPI::Color *argp9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = *(BWAPI::Color **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg9 = *argp9; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMouse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMouse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleScreen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleScreen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(BWAPI::Color **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMouse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMouse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleScreen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleScreen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = *(BWAPI::Color **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = *(BWAPI::Color **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMouse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMouse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseScreen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseScreen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(BWAPI::Color **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawDot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(BWAPI::Color **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMap(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotMouse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(BWAPI::Color **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMouse(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(BWAPI::Color **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotScreen(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = *(BWAPI::Color **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineMouse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(BWAPI::Color **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Color");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Game(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Game **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Broodwar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Game **)&jarg1; 
  BWAPI::Broodwar = arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Broodwar_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Game *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Game *)BWAPI::Broodwar;
  *(BWAPI::Game **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)new BWAPI::Order();
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::Order *)new BWAPI::Order(arg1);
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Order *arg1 = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Order **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Order const & reference is null");
    return 0;
  } 
  result = (BWAPI::Order *)new BWAPI::Order((BWAPI::Order const &)*arg1);
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  arg2 = *(BWAPI::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Order const & reference is null");
    return 0;
  } 
  result = (BWAPI::Order *) &(arg1)->operator =((BWAPI::Order const &)*arg2);
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  arg2 = *(BWAPI::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Order const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator ==((BWAPI::Order const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  arg2 = *(BWAPI::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Order const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator !=((BWAPI::Order const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  arg2 = *(BWAPI::Order **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Order const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator <((BWAPI::Order const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  result = (int)((BWAPI::Order const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Order **)&jarg1; 
  result = ((BWAPI::Order const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Order(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Order **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getOrder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::Order result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::Orders::getOrder(*arg1);
  *(BWAPI::Order **)&jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allOrders(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::Order > *) &BWAPI::Orders::allOrders();
  *(std::set< BWAPI::Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initOrders(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::Orders::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Die_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Die;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Stop_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Stop;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Guard_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Guard;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerGuard_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::PlayerGuard;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TurretGuard_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TurretGuard;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BunkerGuard_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BunkerGuard;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Move_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Move;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReaverStop_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverStop;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Attack1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Attack1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Attack2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Attack2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackUnit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AttackUnit;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackFixedRange_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AttackFixedRange;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackTile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AttackTile;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Hover_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Hover;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AttackMove_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AttackMove;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Nothing1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Powerup1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Powerup1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TowerGuard_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TowerGuard;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TowerAttack_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TowerAttack;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_VultureMine_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::VultureMine;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_StayinRange_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::StayinRange;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TurretAttack_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TurretAttack;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Nothing2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Nothing3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing3;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DroneStartBuild_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DroneStartBuild;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DroneBuild_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DroneBuild;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine3;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine4;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildTerran_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildTerran;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildProtoss1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildProtoss1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildProtoss2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildProtoss2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ConstructingBuilding_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ConstructingBuilding;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Repair1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Repair1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Repair2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Repair2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlaceAddon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceAddon;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildAddon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildAddon;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Train_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Train;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RallyPoint1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPoint1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RallyPoint2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPoint2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ZergBirth_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBirth;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Morph1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Morph1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Morph2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Morph2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildSelf1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildSelf1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ZergBuildSelf_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBuildSelf;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Build5_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Build5;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Enternyduscanal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Enternyduscanal;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildSelf2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildSelf2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Follow_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Follow;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Carrier_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Carrier;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierIgnore1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierIgnore1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierStop_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierStop;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierAttack1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierAttack1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierAttack2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierAttack2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierIgnore2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierIgnore2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CarrierFight_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierFight;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Reaver_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Reaver;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReaverAttack1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverAttack1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReaverAttack2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverAttack2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReaverFight_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverFight;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReaverHold_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverHold;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TrainFighter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TrainFighter;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_StrafeUnit1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::StrafeUnit1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_StrafeUnit2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::StrafeUnit2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RechargeShields1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::RechargeShields1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Rechargeshields2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Rechargeshields2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ShieldBattery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ShieldBattery;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Return_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Return;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DroneLand_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DroneLand;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildingLand_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLand;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BuildingLiftoff_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLiftoff;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DroneLiftoff_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DroneLiftoff;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Liftoff_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Liftoff;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ResearchTech_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ResearchTech;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Upgrade_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Upgrade;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Larva_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Larva;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SpawningLarva_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SpawningLarva;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Harvest1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Harvest2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MoveToGas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToGas;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WaitForGas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForGas;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HarvestGas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HarvestGas;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReturnGas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnGas;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MoveToMinerals_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToMinerals;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WaitForMinerals_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForMinerals;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MiningMinerals_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MiningMinerals;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Harvest3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest3;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Harvest4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest4;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ReturnMinerals_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnMinerals;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Harvest5_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest5;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_EnterTransport_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::EnterTransport;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Pickup1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Pickup2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Pickup3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup3;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Pickup4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup4;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Powerup2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Powerup2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SiegeMode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SiegeMode;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TankMode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TankMode;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WatchTarget_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::WatchTarget;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InitCreepGrowth_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InitCreepGrowth;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SpreadCreep_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SpreadCreep;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_StoppingCreepGrowth_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::StoppingCreepGrowth;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_GuardianAspect_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::GuardianAspect;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WarpingArchon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::WarpingArchon;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CompletingArchonsummon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CompletingArchonsummon;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition3;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Cloak_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Cloak;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Decloak_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Decloak;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unload_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Unload;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MoveUnload_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MoveUnload;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_FireYamatoGun1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::FireYamatoGun1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_FireYamatoGun2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::FireYamatoGun2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MagnaPulse_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MagnaPulse;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Burrow_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Burrow;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Burrowed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Burrowed;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Unburrow_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Unburrow;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DarkSwarm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DarkSwarm;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastParasite_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastParasite;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SummonBroodlings_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SummonBroodlings;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_EmpShockwave_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::EmpShockwave;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeWait_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeWait;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeTrain_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrain;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeLaunch_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeLaunch;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukePaint_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukePaint;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeUnit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeUnit;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeGround_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeGround;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NukeTrack_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrack;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InitArbiter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InitArbiter;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CloakNearbyUnits_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CloakNearbyUnits;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlaceMine_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceMine;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Rightclickaction_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Rightclickaction;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SapUnit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SapUnit;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SapLocation_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SapLocation;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition4;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Teleport_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Teleport;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TeleporttoLocation_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::TeleporttoLocation;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlaceScanner_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceScanner;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Scanner_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Scanner;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DefensiveMatrix_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::DefensiveMatrix;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PsiStorm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::PsiStorm;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderIrradiate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Irradiate;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderPlague_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Plague;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderConsume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Consume;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderEnsnare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Ensnare;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_StasisField_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::StasisField;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Hallucination1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Hallucination2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ResetCollision1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ResetCollision1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ResetCollision2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ResetCollision2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Patrol_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Patrol;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOPInit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOPInit;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOP1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOP1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOP2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOP2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ComputerAI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerAI;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AtkMoveEP_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AtkMoveEP;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HarassMove_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HarassMove;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_AIPatrol_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::AIPatrol;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_GuardPost_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::GuardPost;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RescuePassive_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::RescuePassive;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderNeutral_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Neutral;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ComputerReturn_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerReturn;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_InitPsiProvider_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::InitPsiProvider;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SelfDestrucing_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::SelfDestrucing;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Critter;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HiddenGun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HiddenGun;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OpenDoor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::OpenDoor;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CloseDoor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CloseDoor;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HideTrap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HideTrap;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RevealTrap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::RevealTrap;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Enabledoodad_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Enabledoodad;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Disabledoodad_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Disabledoodad;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Warpin_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Warpin;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Medic_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Medic;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MedicHeal1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal1;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HealMove_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::HealMove;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MedicHoldPosition_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHoldPosition;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_MedicHeal2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal2;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderRestoration_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Restoration;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastDisruptionWeb_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastDisruptionWeb;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastMindControl_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastMindControl;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WarpingDarkArchon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::WarpingDarkArchon;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastFeedback_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastFeedback;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastOpticalFlare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastOpticalFlare;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_CastMaelstrom_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::CastMaelstrom;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_JunkYardDog_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::JunkYardDog;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Fatal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Fatal;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::None;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Order *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Order *)&BWAPI::Orders::Unknown;
  *(BWAPI::Order **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = ((BWAPI::Player const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Player const *)arg1)->getUnits();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  Race result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = ((BWAPI::Player const *)arg1)->getRace();
  *(Race **)&jresult = new Race((const Race &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1playerType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  PlayerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = ((BWAPI::Player const *)arg1)->playerType();
  *(PlayerType **)&jresult = new PlayerType((const PlayerType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (BWAPI::Force *)((BWAPI::Player const *)arg1)->getForce();
  *(BWAPI::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isAlly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isAlly(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isEnemy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isEnemy(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isNeutral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isNeutral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getStartLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = ((BWAPI::Player const *)arg1)->getStartLocation();
  *(TilePosition **)&jresult = new TilePosition((const TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1leftGame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->leftGame();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1minerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->minerals();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1gas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->gas();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1cumulativeMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->cumulativeMinerals();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1cumulativeGas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->cumulativeGas();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyTotal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyUsed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyTotal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  Race arg2 ;
  Race *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Race");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyUsed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  Race arg2 ;
  Race *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Race");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1allUnitCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->allUnitCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1completedUnitCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->completedUnitCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1incompleteUnitCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->incompleteUnitCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1deadUnitCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->deadUnitCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1killedUnitCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->killedUnitCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getUpgradeLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  UpgradeType arg2 ;
  UpgradeType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->getUpgradeLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1hasResearched(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  TechType arg2 ;
  TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->hasResearched(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isResearching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  TechType arg2 ;
  TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isResearching(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isUpgrading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  UpgradeType arg2 ;
  UpgradeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  argp2 = *(UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isUpgrading(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Player(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Player **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType();
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType(arg1);
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *arg1 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::PlayerType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::PlayerType const & reference is null");
    return 0;
  } 
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType((BWAPI::PlayerType const &)*arg1);
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  arg2 = *(BWAPI::PlayerType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::PlayerType const & reference is null");
    return 0;
  } 
  result = (BWAPI::PlayerType *) &(arg1)->operator =((BWAPI::PlayerType const &)*arg2);
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  arg2 = *(BWAPI::PlayerType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::PlayerType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator ==((BWAPI::PlayerType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  arg2 = *(BWAPI::PlayerType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::PlayerType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator !=((BWAPI::PlayerType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  arg2 = *(BWAPI::PlayerType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::PlayerType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator <((BWAPI::PlayerType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  result = (int)((BWAPI::PlayerType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  result = ((BWAPI::PlayerType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1PlayerType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::PlayerType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getPlayerType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::PlayerType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::PlayerTypes::getPlayerType(*arg1);
  *(BWAPI::PlayerType **)&jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allPlayerTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::PlayerType > *) &BWAPI::PlayerTypes::allPlayerTypes();
  *(std::set< BWAPI::PlayerType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initPlayerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::PlayerTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_NotUsed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::NotUsed;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Computer_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Computer;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Human_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Human;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Rescuable_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Rescuable;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ComputerSlot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ComputerSlot;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OpenSlot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::OpenSlot;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeNeutral_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Neutral;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ClosedSlot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ClosedSlot;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_HumanDefeated_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::HumanDefeated;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ComputerDefeated_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ComputerDefeated;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::None;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Unknown;
  *(BWAPI::PlayerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Position *)new BWAPI::Position();
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (BWAPI::Position *)new BWAPI::Position((BWAPI::TilePosition const &)*arg1);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Position *)new BWAPI::Position(arg1,arg2);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator ==((BWAPI::Position const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator !=((BWAPI::Position const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator <((BWAPI::Position const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator +((BWAPI::Position const &)*arg2);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator -((BWAPI::Position const &)*arg2);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator +=((BWAPI::Position const &)*arg2);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator -=((BWAPI::Position const &)*arg2);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1getDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (double)((BWAPI::Position const *)arg1)->getDistance((BWAPI::Position const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  result = (double)((BWAPI::Position const *)arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  result = (int *) &(arg1)->x();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  result = (int *) &(arg1)->y();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1xConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->x();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1yConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->y();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Position(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Position **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Position *)&BWAPI::Positions::Invalid;
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Position *)&BWAPI::Positions::None;
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Position *)&BWAPI::Positions::Unknown;
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)new BWAPI::Race();
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::Race *)new BWAPI::Race(arg1);
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Race const & reference is null");
    return 0;
  } 
  result = (BWAPI::Race *)new BWAPI::Race((BWAPI::Race const &)*arg1);
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  arg2 = *(BWAPI::Race **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Race const & reference is null");
    return 0;
  } 
  result = (BWAPI::Race *) &(arg1)->operator =((BWAPI::Race const &)*arg2);
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  arg2 = *(BWAPI::Race **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Race const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator ==((BWAPI::Race const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  arg2 = *(BWAPI::Race **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Race const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator !=((BWAPI::Race const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  arg2 = *(BWAPI::Race **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Race const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator <((BWAPI::Race const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (int)((BWAPI::Race const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = ((BWAPI::Race const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getWorker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getWorker();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getCenter();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getRefinery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getRefinery();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getTransport();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getSupplyProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Race **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getSupplyProvider();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Race(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Race **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getRace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::Race result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::Races::getRace(*arg1);
  *(BWAPI::Race **)&jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allRaces(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::Race > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::Race > *) &BWAPI::Races::allRaces();
  *(std::set< BWAPI::Race > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initRaces(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::Races::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Zerg;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Terran;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Protoss;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Random_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Random;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Other_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Other;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::None;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::Race *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::Race *)&BWAPI::Races::Unknown;
  *(BWAPI::Race **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)new BWAPI::TechType();
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::TechType *)new BWAPI::TechType(arg1);
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TechType *arg1 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TechType const & reference is null");
    return 0;
  } 
  result = (BWAPI::TechType *)new BWAPI::TechType((BWAPI::TechType const &)*arg1);
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TechType const & reference is null");
    return 0;
  } 
  result = (BWAPI::TechType *) &(arg1)->operator =((BWAPI::TechType const &)*arg2);
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TechType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator ==((BWAPI::TechType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TechType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator !=((BWAPI::TechType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TechType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator <((BWAPI::TechType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = ((BWAPI::TechType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1mineralPrice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->mineralPrice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1gasPrice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->gasPrice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1energyUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->energyUsed();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1whatResearches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::TechType const *)arg1)->whatResearches();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getWeapon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::TechType const *)arg1)->getWeapon();
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1whatUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  result = (std::set< BWAPI::UnitType const * > *) &((BWAPI::TechType const *)arg1)->whatUses();
  *(std::set< BWAPI::UnitType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1TechType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::TechType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getTechType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::TechType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::TechTypes::getTechType(*arg1);
  *(BWAPI::TechType **)&jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allTechTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::TechType > *) &BWAPI::TechTypes::allTechTypes();
  *(std::set< BWAPI::TechType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initTechTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::TechTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Stim_1Packs_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stim_Packs;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeLockdown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lockdown;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeEMP_1Shockwave_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::EMP_Shockwave;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spider_1Mines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spider_Mines;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Scanner_1Sweep_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Scanner_Sweep;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Tank_1Siege_1Mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Tank_Siege_Mode;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Defensive_1Matrix_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Defensive_Matrix;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeIrradiate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Irradiate;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeYamato_1Gun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Yamato_Gun;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Cloaking_1Field_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Cloaking_Field;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Personnel_1Cloaking_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Personnel_Cloaking;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Burrowing_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Burrowing;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Infestation_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Infestation;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSpawn_1Broodlings_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spawn_Broodlings;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeDark_1Swarm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Swarm;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypePlague_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Plague;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConsume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Consume;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeEnsnare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Ensnare;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeParasite_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Parasite;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypePsionic_1Storm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Psionic_Storm;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Hallucination;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Recall_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Recall;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeStasis_1Field_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stasis_Field;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Archon_1Warp_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Archon_Warp;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeRestoration_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Restoration;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeDisruption_1Web_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Disruption_Web;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeMind_1Control_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Mind_Control;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Dark_1Archon_1Meld_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Archon_Meld;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeFeedback_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Feedback;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeOptical_1Flare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Optical_Flare;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeMaelstrom_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Maelstrom;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Lurker_1Aspect_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lurker_Aspect;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Healing_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Healing;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::None;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Unknown;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeNuclear_1Strike_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Nuclear_Strike;
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition();
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Position *arg1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Position **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::Position const & reference is null");
    return 0;
  } 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition((BWAPI::Position const &)*arg1);
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition(arg1,arg2);
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator ==((BWAPI::TilePosition const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator !=((BWAPI::TilePosition const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator <((BWAPI::TilePosition const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator +((BWAPI::TilePosition const &)*arg2);
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator -((BWAPI::TilePosition const &)*arg2);
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator +=((BWAPI::TilePosition const &)*arg2);
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator -=((BWAPI::TilePosition const &)*arg2);
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1getDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  arg2 = *(BWAPI::TilePosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::TilePosition const & reference is null");
    return 0;
  } 
  result = (double)((BWAPI::TilePosition const *)arg1)->getDistance((BWAPI::TilePosition const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (double)((BWAPI::TilePosition const *)arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (bool)((BWAPI::TilePosition const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (int *) &(arg1)->x();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (int *) &(arg1)->y();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1xConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->x();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1yConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->y();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1TilePosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::TilePosition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Invalid;
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::None;
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Unknown;
  *(BWAPI::TilePosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPlayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Player *)((BWAPI::Unit const *)arg1)->getPlayer();
  *(BWAPI::Player **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getType();
  *(BWAPI::UnitType **)&jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialType();
  *(BWAPI::UnitType **)&jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getHitPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialHitPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getShields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getShields();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnergy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getResources();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialResources();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getKillCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getKillCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getGroundWeaponCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getGroundWeaponCooldown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAirWeaponCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getAirWeaponCooldown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSpellCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpellCooldown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDefenseMatrixPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDefenseMatrixTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getEnsnareTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnsnareTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getIrradiateTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getIrradiateTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getLockdownTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getLockdownTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getMaelstromTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getMaelstromTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPlagueTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getPlagueTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemoveTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemoveTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getStasisTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStasisTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getStimTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStimTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getPosition();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialPosition();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTilePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTilePosition();
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialTilePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialTilePosition();
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getVelocityX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getVelocityY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTarget();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTargetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTargetPosition();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getOrder();
  *(BWAPI::Order **)&jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrderTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getOrderTarget();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrderTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getOrderTimer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSecondaryOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getSecondaryOrder();
  *(BWAPI::Order **)&jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getBuildUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getBuildUnit();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingBuildTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingBuildTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingTrainTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingTrainTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getChild();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTrainingQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  SwigValueWrapper< std::list< BWAPI::UnitType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTrainingQueue();
  *(std::list< BWAPI::UnitType > **)&jresult = new std::list< BWAPI::UnitType >((const std::list< BWAPI::UnitType > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTransport();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getLoadedUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  SwigValueWrapper< std::list< BWAPI::Unit * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getLoadedUnits();
  *(std::list< BWAPI::Unit * > **)&jresult = new std::list< BWAPI::Unit * >((const std::list< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInterceptorCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInterceptorCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getScarabCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getScarabCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSpiderMineCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpiderMineCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTech(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTech();
  *(BWAPI::TechType **)&jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getUpgrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getUpgrade();
  *(UpgradeType **)&jresult = new UpgradeType((const UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingResearchTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingResearchTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingUpgradeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingUpgradeTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRallyPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getRallyPosition();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRallyUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getRallyUnit();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAddon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getAddon();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getUpgradeLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType arg2 ;
  UpgradeType *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Unit const *)arg1)->getUpgradeLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isAccelerating(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isAccelerating();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingConstructed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingConstructed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingHealed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingHealed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBlind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBlind();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBraking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBraking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBurrowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBurrowed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCarryingGas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingGas();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCarryingMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingMinerals();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCloaked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCloaked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCompleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCompleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isConstructing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isConstructing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isDefenseMatrixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isDefenseMatrixed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isEnsnared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isEnsnared();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isFollowing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isFollowing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isGatheringGas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringGas();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isGatheringMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringMinerals();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isHallucination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isHallucination();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIdle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isIrradiated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIrradiated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLifted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLifted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLoaded();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLockedDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLockedDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMaelstrommed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMaelstrommed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMorphing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMorphing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMoving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMoving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isParasited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isParasited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isPatrolling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPatrolling();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isPlagued(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPlagued();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isRepairing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isRepairing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isResearching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isResearching();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSelected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isSieged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSieged();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStartingAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStartingAttack();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStasised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStasised();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStimmed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStimmed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isTraining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isTraining();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUnderStorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderStorm();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUnpowered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnpowered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUpgrading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUpgrading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingGathered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingGathered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1attackMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->attackMove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1attackUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->attackUnit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1rightClick_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1rightClick_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->train(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(BWAPI::UnitType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->build(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1buildAddon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->buildAddon(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1research(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->research(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1upgrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  UpgradeType arg2 ;
  UpgradeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->upgrade(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->stop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1holdPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->holdPosition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1patrol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->patrol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1follow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->follow(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1setRallyPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setRallyPosition(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1setRallyUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->setRallyUnit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1repair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->repair(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1morph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->morph(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1burrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->burrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unburrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->unburrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1siege(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->siege();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unsiege(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->unsiege();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cloak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cloak();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1decloak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->decloak();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1lift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->lift();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1land(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->land(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->unload(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unloadAll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->unloadAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unloadAll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelConstruction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelConstruction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1haltConstruction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->haltConstruction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelMorph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelMorph();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelTrain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelTrain();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelTrain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->cancelTrain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelAddon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelAddon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelResearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelResearch();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelUpgrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  result = (bool)(arg1)->cancelUpgrade();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->useTech(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::TechType *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(BWAPI::Position **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(BWAPI::Unit **)&jarg3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Unit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::Unit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType();
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType(arg1);
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitSizeType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType((BWAPI::UnitSizeType const &)*arg1);
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  arg2 = *(BWAPI::UnitSizeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitSizeType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UnitSizeType *) &(arg1)->operator =((BWAPI::UnitSizeType const &)*arg2);
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  arg2 = *(BWAPI::UnitSizeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitSizeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator ==((BWAPI::UnitSizeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  arg2 = *(BWAPI::UnitSizeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitSizeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator !=((BWAPI::UnitSizeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  arg2 = *(BWAPI::UnitSizeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitSizeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator <((BWAPI::UnitSizeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  result = (int)((BWAPI::UnitSizeType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  result = ((BWAPI::UnitSizeType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UnitSizeType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::UnitSizeType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getUnitSizeType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::UnitSizeType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::UnitSizeTypes::getUnitSizeType(*arg1);
  *(BWAPI::UnitSizeType **)&jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allUnitSizeTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::UnitSizeType > *) &BWAPI::UnitSizeTypes::allUnitSizeTypes();
  *(std::set< BWAPI::UnitSizeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initUnitSizeTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::UnitSizeTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeIndependent_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Independent;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Small_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Small;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Medium_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Medium;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Large_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Large;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::None;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Unknown;
  *(BWAPI::UnitSizeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)new BWAPI::UnitType();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitType *)new BWAPI::UnitType(arg1);
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UnitType *)new BWAPI::UnitType((BWAPI::UnitType const &)*arg1);
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UnitType *) &(arg1)->operator =((BWAPI::UnitType const &)*arg2);
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator ==((BWAPI::UnitType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator !=((BWAPI::UnitType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UnitType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator <((BWAPI::UnitType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getSubLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getSubLabel();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::Race result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getRace();
  *(BWAPI::Race **)&jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1whatBuilds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::pair< BWAPI::UnitType const *,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->whatBuilds();
  *(std::pair< BWAPI::UnitType const *,int > **)&jresult = new std::pair< BWAPI::UnitType const *,int >((const std::pair< BWAPI::UnitType const *,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiredUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::map< BWAPI::UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (std::map< BWAPI::UnitType const *,int > *) &((BWAPI::UnitType const *)arg1)->requiredUnits();
  *(std::map< BWAPI::UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiredTech(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (BWAPI::TechType *)((BWAPI::UnitType const *)arg1)->requiredTech();
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1abilities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::TechType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (std::set< BWAPI::TechType const * > *) &((BWAPI::UnitType const *)arg1)->abilities();
  *(std::set< BWAPI::TechType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1upgrades(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::UpgradeType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (std::set< BWAPI::UpgradeType const * > *) &((BWAPI::UnitType const *)arg1)->upgrades();
  *(std::set< BWAPI::UpgradeType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1armorUpgrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (BWAPI::UpgradeType *)((BWAPI::UnitType const *)arg1)->armorUpgrade();
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxHitPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxShields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxShields();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxEnergy();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1armor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->armor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1mineralPrice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->mineralPrice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1gasPrice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->gasPrice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1buildTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1supplyRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyRequired();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1supplyProvided(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyProvided();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1spaceRequired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceRequired();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1spaceProvided(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceProvided();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1buildScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildScore();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1destroyScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->destroyScore();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitSizeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->size();
  *(BWAPI::UnitSizeType **)&jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1tileWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1tileHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionLeft();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionUp();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionRight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionDown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1seekRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->seekRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1sightRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->sightRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1groundWeapon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::UnitType const *)arg1)->groundWeapon();
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxGroundHits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxGroundHits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1airWeapon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::UnitType const *)arg1)->airWeapon();
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxAirHits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxAirHits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1topSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (double)((BWAPI::UnitType const *)arg1)->topSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1acceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->acceleration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1haltDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->haltDistance();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1turnRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->turnRadius();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canProduce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canProduce();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canAttack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canAttack();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canMove();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isFlyer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1regeneratesHP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->regeneratesHP();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isSpellcaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpellcaster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1hasPermanentCloak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->hasPermanentCloak();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isInvincible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isInvincible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isOrganic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isOrganic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isMechanical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isMechanical();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isRobotic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRobotic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isDetector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isDetector();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isResourceContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceContainer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isResourceDepot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceDepot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isRefinery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRefinery();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isWorker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isWorker();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiresPsi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresPsi();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiresCreep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresCreep();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isTwoUnitsInOneEgg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isTwoUnitsInOneEgg();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isBurrowable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBurrowable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isCloakable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isCloakable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isBuilding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBuilding();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isAddon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isAddon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isFlyingBuilding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyingBuilding();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isNeutral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isNeutral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UnitType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getUnitType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::UnitType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::UnitTypes::getUnitType(*arg1);
  *(BWAPI::UnitType **)&jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allUnitTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::UnitType > *) &BWAPI::UnitTypes::allUnitTypes();
  *(std::set< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initUnitTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::UnitTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Marine_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Marine;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ghost_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Ghost;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vulture_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Goliath_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Goliath;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Siege_1Tank_1Tank_1Mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Tank_Mode;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1SCV_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_SCV;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Wraith_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Wraith;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Science_1Vessel_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Vessel;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Dropship_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Dropship;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Battlecruiser_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Battlecruiser;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vulture_1Spider_1Mine_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture_Spider_Mine;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Nuclear_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Missile;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Siege_1Tank_1Siege_1Mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Siege_Mode;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Firebat_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Firebat;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Scanner_1Sweep_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Scanner_Sweep;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Medic_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Medic;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Larva_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Larva;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Egg_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Egg;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Zergling_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Zergling;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hydralisk_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Ultralisk_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Broodling_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Broodling;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Drone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Drone;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Overlord_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Overlord;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Mutalisk_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Mutalisk;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Guardian_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Guardian;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Queen_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queen;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Defiler_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Scourge_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Scourge;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Infested_1Terran_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Terran;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Valkyrie_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Valkyrie;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Cocoon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Cocoon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Corsair_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Corsair;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dark_1Templar_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Templar;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Devourer_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Devourer;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dark_1Archon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Archon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Probe_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Probe;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Zealot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Zealot;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dragoon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dragoon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1High_1Templar_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_High_Templar;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Archon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Archon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Shuttle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shuttle;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Scout_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scout;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Arbiter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Carrier_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Carrier;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Interceptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Interceptor;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Reaver_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Reaver;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Observer_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observer;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Scarab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scarab;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Rhynadon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Rhynadon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Bengalaas_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Bengalaas;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Scantid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Scantid;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Kakaru_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Kakaru;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Ragnasaur_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ragnasaur;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Ursadon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ursadon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lurker_1Egg_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker_Egg;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lurker_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Disruption_1Web_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Disruption_Web;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Command_1Center_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Command_Center;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Comsat_1Station_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Comsat_Station;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Nuclear_1Silo_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Silo;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Supply_1Depot_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Supply_Depot;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Refinery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Refinery;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Barracks_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Barracks;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Academy_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Academy;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Factory_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Factory;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Starport_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Starport;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Control_1Tower_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Control_Tower;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Science_1Facility_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Facility;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Covert_1Ops_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Covert_Ops;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Physics_1Lab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Physics_Lab;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Machine_1Shop_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Machine_Shop;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Engineering_1Bay_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Engineering_Bay;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Armory_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Armory;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Missile_1Turret_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Missile_Turret;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Bunker_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Bunker;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Crashed_1Norad_1II_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Crashed_Norad_II;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Ion_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Ion_Cannon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Infested_1Command_1Center_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Command_Center;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hatchery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hatchery;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lair_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lair;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hive_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hive;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Nydus_1Canal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Nydus_Canal;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hydralisk_1Den_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk_Den;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Defiler_1Mound_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler_Mound;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Greater_1Spire_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Greater_Spire;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Queens_1Nest_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queens_Nest;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Evolution_1Chamber_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Evolution_Chamber;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Ultralisk_1Cavern_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk_Cavern;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spire_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spire;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spawning_1Pool_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spawning_Pool;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Creep_1Colony_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Creep_Colony;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spore_1Colony_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spore_Colony;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Sunken_1Colony_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Sunken_Colony;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1With_1Shell_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_With_Shell;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Extractor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Extractor;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Mature_1Chrysalis_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Mature_Chrysalis;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Cerebrate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Cerebrate_1Daggoth_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate_Daggoth;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Nexus_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Nexus;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Robotics_1Facility_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Facility;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Pylon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Pylon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Assimilator_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Assimilator;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Observatory_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observatory;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Gateway_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Gateway;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Photon_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Photon_Cannon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Citadel_1of_1Adun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Citadel_of_Adun;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Cybernetics_1Core_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Cybernetics_Core;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Templar_1Archives_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Templar_Archives;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Forge_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Forge;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Stargate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Stargate;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Stasis_1Cell_1Prison_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Stasis_Cell_Prison;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Fleet_1Beacon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Fleet_Beacon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Arbiter_1Tribunal_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter_Tribunal;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Robotics_1Support_1Bay_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Support_Bay;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Shield_1Battery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shield_Battery;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Khaydarin_1Crystal_1Form_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Khaydarin_Crystal_Form;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Protoss_1Temple_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Protoss_Temple;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1XelNaga_1Temple_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_XelNaga_Temple;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Resource_1Mineral_1Field_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Mineral_Field;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Resource_1Vespene_1Geyser_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Vespene_Geyser;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Warp_1Gate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Warp_Gate;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Psi_1Disrupter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Psi_Disrupter;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Power_1Generator_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Power_Generator;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1Cocoon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_Cocoon;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Dark_1Swarm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Dark_Swarm;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::None;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Unknown;
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType();
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType(arg1);
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *arg1 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UpgradeType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType((BWAPI::UpgradeType const &)*arg1);
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UpgradeType const & reference is null");
    return 0;
  } 
  result = (BWAPI::UpgradeType *) &(arg1)->operator =((BWAPI::UpgradeType const &)*arg2);
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UpgradeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator ==((BWAPI::UpgradeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UpgradeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator !=((BWAPI::UpgradeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::UpgradeType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator <((BWAPI::UpgradeType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getRace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::Race result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->getRace();
  *(BWAPI::Race **)&jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1mineralPriceBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceBase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1mineralPriceFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1gasPriceBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceBase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1gasPriceFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1upgradeTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeBase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1upgradeTimeFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1maxRepeats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->maxRepeats();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1whatUpgrades(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::UpgradeType const *)arg1)->whatUpgrades();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1whatUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  result = (std::set< BWAPI::UnitType const * > *) &((BWAPI::UpgradeType const *)arg1)->whatUses();
  *(std::set< BWAPI::UnitType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UpgradeType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::UpgradeType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getUpgradeType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::UpgradeType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::UpgradeTypes::getUpgradeType(*arg1);
  *(BWAPI::UpgradeType **)&jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allUpgradeTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::UpgradeType > *) &BWAPI::UpgradeTypes::allUpgradeTypes();
  *(std::set< BWAPI::UpgradeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initUpgradeTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::UpgradeTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Infantry_1Armor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Armor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vehicle_1Plating_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ship_1Plating_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Plating;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Carapace_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Carapace;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Flyer_1Carapace_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Armor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Armor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Plating_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Plating;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Infantry_1Weapons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vehicle_1Weapons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ship_1Weapons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Weapons;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Melee_1Attacks_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Missile_1Attacks_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Flyer_1Attacks_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Ground_1Weapons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Air_1Weapons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Air_Weapons;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Plasma_1Shields_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_U_1238_1Shells_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::U_238_Shells;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Ion_1Thrusters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ion_Thrusters;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Titan_1Reactor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Titan_Reactor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Ocular_1Implants_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ocular_Implants;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Moebius_1Reactor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Moebius_Reactor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Apollo_1Reactor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apollo_Reactor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Colossus_1Reactor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Colossus_Reactor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Ventral_1Sacs_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ventral_Sacs;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Antennae_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Antennae;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Pneumatized_1Carapace_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Pneumatized_Carapace;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Metabolic_1Boost_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metabolic_Boost;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Adrenal_1Glands_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Adrenal_Glands;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Muscular_1Augments_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Muscular_Augments;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Grooved_1Spines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Grooved_Spines;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gamete_1Meiosis_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gamete_Meiosis;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Metasynaptic_1Node_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metasynaptic_Node;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Singularity_1Charge_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Singularity_Charge;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Leg_1Enhancements_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Leg_Enhancements;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Scarab_1Damage_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Scarab_Damage;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Reaver_1Capacity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Reaver_Capacity;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Drive_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Drive;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Sensor_1Array_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Sensor_Array;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Boosters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Boosters;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Khaydarin_1Amulet_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Amulet;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Apial_1Sensors_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apial_Sensors;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Thrusters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Thrusters;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Carrier_1Capacity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Carrier_Capacity;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Khaydarin_1Core_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Core;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Argus_1Jewel_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Jewel;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Argus_1Talisman_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Talisman;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Caduceus_1Reactor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Caduceus_Reactor;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Chitinous_1Plating_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Chitinous_Plating;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Anabolic_1Synthesis_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Anabolic_Synthesis;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Charon_1Booster_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Charon_Booster;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::None;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Unknown;
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType();
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType(arg1);
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::WeaponType const & reference is null");
    return 0;
  } 
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType((BWAPI::WeaponType const &)*arg1);
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  arg2 = *(BWAPI::WeaponType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::WeaponType const & reference is null");
    return 0;
  } 
  result = (BWAPI::WeaponType *) &(arg1)->operator =((BWAPI::WeaponType const &)*arg2);
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  arg2 = *(BWAPI::WeaponType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::WeaponType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator ==((BWAPI::WeaponType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opNotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  arg2 = *(BWAPI::WeaponType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::WeaponType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator !=((BWAPI::WeaponType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  arg2 = *(BWAPI::WeaponType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BWAPI::WeaponType const & reference is null");
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator <((BWAPI::WeaponType const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getTech(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (BWAPI::TechType *)((BWAPI::WeaponType const *)arg1)->getTech();
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1whatUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::WeaponType const *)arg1)->whatUses();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageAmount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageBonus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageBonus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageCooldown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1upgradeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (BWAPI::UpgradeType *)((BWAPI::WeaponType const *)arg1)->upgradeType();
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::DamageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (BWAPI::DamageType *)((BWAPI::WeaponType const *)arg1)->damageType();
  *(BWAPI::DamageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1explosionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (BWAPI::ExplosionType *)((BWAPI::WeaponType const *)arg1)->explosionType();
  *(BWAPI::ExplosionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1minRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->minRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1maxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->maxRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1innerSplashRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->innerSplashRadius();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1medianSplashRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->medianSplashRadius();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1outerSplashRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->outerSplashRadius();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsAir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsAir();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsGround(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsGround();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsMechanical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsMechanical();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOrganic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrganic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsNonBuilding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonBuilding();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsNonRobotic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonRobotic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsTerrain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsTerrain();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOrgOrMech(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrgOrMech();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOwn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOwn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1WeaponType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWAPI::WeaponType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getWeaponType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BWAPI::WeaponType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = BWAPI::WeaponTypes::getWeaponType(*arg1);
  *(BWAPI::WeaponType **)&jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_allWeaponTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::allWeaponTypes();
  *(std::set< BWAPI::WeaponType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_normalWeaponTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::normalWeaponTypes();
  *(std::set< BWAPI::WeaponType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_specialWeaponTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::specialWeaponTypes();
  *(std::set< BWAPI::WeaponType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_initWeaponTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWAPI::WeaponTypes::init();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Gauss_1Rifle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gauss_Rifle;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_C_110_1Canister_1Rifle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeFragmentation_1Grenade_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fragmentation_Grenade;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSpider_1Mines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spider_Mines;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Twin_1Autocannons_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Twin_Autocannons;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Hellfire_1Missile_1Pack_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Fusion_1Cutter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fusion_Cutter;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeGemini_1Missiles_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gemini_Missiles;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeBurst_1Lasers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Burst_Lasers;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ATS_1Laser_1Battery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATS_Laser_Battery;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ATA_1Laser_1Battery_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATA_Laser_Battery;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Flame_1Thrower_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Flame_Thrower;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Shock_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Shock_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeLongbolt_1Missile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Longbolt_Missile;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Claws_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Claws;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Needle_1Spines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Needle_Spines;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Kaiser_1Blades_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Kaiser_Blades;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Toxic_1Spores_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Toxic_Spores;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spines;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeAcid_1Spore_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Acid_Spore;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeGlave_1Wurm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Glave_Wurm;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSeeker_1Spores_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Seeker_Spores;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Subterranean_1Tentacle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Tentacle;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Suicide_1Infested_1Terran_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Infested_Terran;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Suicide_1Scourge_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Scourge;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Particle_1Beam_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Particle_Beam;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Psi_1Blades_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psi_Blades;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePhase_1Disruptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Shockwave_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Shockwave;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Dual_1Photon_1Blasters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dual_Photon_Blasters;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Anti_1Matter_1Missiles_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Anti_Matter_Missiles;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Phase_1Disruptor_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePulse_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Pulse_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_STS_1Photon_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STS_Photon_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_STA_1Photon_1Cannon_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STA_Photon_Cannon;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Scarab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Scarab;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNeutron_1Flare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Neutron_Flare;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeHalo_1Rockets_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Halo_Rockets;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeCorrosive_1Acid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Corrosive_Acid;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSubterranean_1Spines_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Spines;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Warp_1Blades_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Warp_Blades;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeYamato_1Gun_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Yamato_Gun;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNuclear_1Strike_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Nuclear_Strike;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Lockdown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Lockdown;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_EMP_1Shockwave_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::EMP_Shockwave;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeIrradiate_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Irradiate;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Parasite_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Parasite;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Spawn_1Broodlings_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spawn_Broodlings;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeEnsnare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Ensnare;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Dark_1Swarm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dark_Swarm;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePlague_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Plague;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeConsume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Consume;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Stasis_1Field_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Stasis_Field;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePsionic_1Storm_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Storm;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Disruption_1Web_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Disruption_Web;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeRestoration_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Restoration;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeMind_1Control_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Mind_Control;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Feedback_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Feedback;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Optical_1Flare_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Optical_Flare;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_Maelstrom_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Maelstrom;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNone_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::None;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Unknown;
  *(BWAPI::WeaponType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_readMap(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWTA::readMap();
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_analyze(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BWTA::analyze();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getRegions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWTA::Region * > *) &BWTA::getRegions();
  *(std::set< BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getChokepoints(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWTA::Chokepoint * > *) &BWTA::getChokepoints();
  *(std::set< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getBaseLocations(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getBaseLocations();
  *(std::set< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getStartLocations(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getStartLocations();
  *(std::set< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getUnwalkablePolygons(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< BWTA::Polygon * > *) &BWTA::getUnwalkablePolygons();
  *(std::set< BWTA::Polygon * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getNearestUnwalkablePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(BWAPI::Position **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg1 = *argp1; 
  result = BWTA::getNearestUnwalkablePosition(arg1);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getStartLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::Player **)&jarg1; 
  result = (BWTA::BaseLocation *)BWTA::getStartLocation(arg1);
  *(BWTA::BaseLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_getNearestBaseLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::BaseLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(BWAPI::TilePosition **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::BaseLocation *)BWTA::getNearestBaseLocation(arg1);
  *(BWTA::BaseLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getPosition();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getTilePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getTilePosition();
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (BWTA::Region *)((BWTA::BaseLocation const *)arg1)->getRegion();
  *(BWTA::Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1minerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->minerals();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1gas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->gas();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getStaticMinerals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getStaticMinerals();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getGeysers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getGeysers();
  *(std::set< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getGroundDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getGroundDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getAirDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getAirDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isIsland(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isIsland();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isMineralOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isMineralOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isStartLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isStartLocation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1BaseLocation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWTA::BaseLocation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Chokepoint **)&jarg1; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *) &((BWTA::Chokepoint const *)arg1)->getRegions();
  *(std::pair< BWTA::Region *,BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getSides(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Chokepoint **)&jarg1; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *) &((BWTA::Chokepoint const *)arg1)->getSides();
  *(std::pair< BWAPI::Position,BWAPI::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Chokepoint **)&jarg1; 
  result = ((BWTA::Chokepoint const *)arg1)->getCenter();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Chokepoint **)&jarg1; 
  result = (double)((BWTA::Chokepoint const *)arg1)->getWidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Chokepoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWTA::Chokepoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Polygon(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BWTA::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BWTA::Polygon *)new BWTA::Polygon();
  *(BWTA::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getArea();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getPerimeter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getPerimeter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  result = ((BWTA::Polygon const *)arg1)->getCenter();
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1isInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWTA::Polygon const *)arg1)->isInside(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getNearestPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = ((BWTA::Polygon const *)arg1)->getNearestPoint(arg2);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Polygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWTA::Polygon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Region **)&jarg1; 
  result = (BWTA::Polygon *) &((BWTA::Region const *)arg1)->getPolygon();
  *(BWTA::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Region **)&jarg1; 
  result = (BWAPI::Position *) &((BWTA::Region const *)arg1)->getCenter();
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getChokepoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Region **)&jarg1; 
  result = (std::set< BWTA::Chokepoint * > *) &((BWTA::Region const *)arg1)->getChokepoints();
  *(std::set< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getBaseLocations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWTA::Region **)&jarg1; 
  result = (std::set< BWTA::BaseLocation * > *) &((BWTA::Region const *)arg1)->getBaseLocations();
  *(std::set< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Region(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BWTA::Region **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1DamageTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  SetWrapper< BWAPI::DamageType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::DamageType > **)&jarg1; 
  result = (SetWrapper< BWAPI::DamageType > *)new SetWrapper< BWAPI::DamageType >(arg1);
  *(SetWrapper< BWAPI::DamageType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1DamageTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  BWAPI::DamageType arg2 ;
  BWAPI::DamageType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  argp2 = *(BWAPI::DamageType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::DamageType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  BWAPI::DamageType arg2 ;
  BWAPI::DamageType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  argp2 = *(BWAPI::DamageType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::DamageType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::DamageType > *arg1 = (SetWrapper< BWAPI::DamageType > *) 0 ;
  BWAPI::DamageType arg2 ;
  BWAPI::DamageType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::DamageType > **)&jarg1; 
  argp2 = *(BWAPI::DamageType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::DamageType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1DamageTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  SetIterator< BWAPI::DamageType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::DamageType > **)&jarg1; 
  result = (SetIterator< BWAPI::DamageType > *)new SetIterator< BWAPI::DamageType >(arg1);
  *(SetIterator< BWAPI::DamageType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::DamageType > *arg1 = (SetIterator< BWAPI::DamageType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::DamageType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::DamageType > *arg1 = (SetIterator< BWAPI::DamageType > *) 0 ;
  BWAPI::DamageType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::DamageType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::DamageType **)&jresult = new BWAPI::DamageType((const BWAPI::DamageType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1DamageTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::DamageType > *arg1 = (SetIterator< BWAPI::DamageType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::DamageType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ErrorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  SetWrapper< BWAPI::Error > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Error > **)&jarg1; 
  result = (SetWrapper< BWAPI::Error > *)new SetWrapper< BWAPI::Error >(arg1);
  *(SetWrapper< BWAPI::Error > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ErrorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  BWAPI::Error arg2 ;
  BWAPI::Error *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  argp2 = *(BWAPI::Error **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Error");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  BWAPI::Error arg2 ;
  BWAPI::Error *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  argp2 = *(BWAPI::Error **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Error");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Error > *arg1 = (SetWrapper< BWAPI::Error > *) 0 ;
  BWAPI::Error arg2 ;
  BWAPI::Error *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Error > **)&jarg1; 
  argp2 = *(BWAPI::Error **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Error");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ErrorSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  SetIterator< BWAPI::Error > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Error > **)&jarg1; 
  result = (SetIterator< BWAPI::Error > *)new SetIterator< BWAPI::Error >(arg1);
  *(SetIterator< BWAPI::Error > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Error > *arg1 = (SetIterator< BWAPI::Error > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Error > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Error > *arg1 = (SetIterator< BWAPI::Error > *) 0 ;
  BWAPI::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Error > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::Error **)&jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ErrorSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Error > *arg1 = (SetIterator< BWAPI::Error > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Error > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ExplosionTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  SetWrapper< BWAPI::ExplosionType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::ExplosionType > **)&jarg1; 
  result = (SetWrapper< BWAPI::ExplosionType > *)new SetWrapper< BWAPI::ExplosionType >(arg1);
  *(SetWrapper< BWAPI::ExplosionType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ExplosionTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  BWAPI::ExplosionType arg2 ;
  BWAPI::ExplosionType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  argp2 = *(BWAPI::ExplosionType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::ExplosionType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  BWAPI::ExplosionType arg2 ;
  BWAPI::ExplosionType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  argp2 = *(BWAPI::ExplosionType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::ExplosionType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::ExplosionType > *arg1 = (SetWrapper< BWAPI::ExplosionType > *) 0 ;
  BWAPI::ExplosionType arg2 ;
  BWAPI::ExplosionType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::ExplosionType > **)&jarg1; 
  argp2 = *(BWAPI::ExplosionType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::ExplosionType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ExplosionTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  SetIterator< BWAPI::ExplosionType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::ExplosionType > **)&jarg1; 
  result = (SetIterator< BWAPI::ExplosionType > *)new SetIterator< BWAPI::ExplosionType >(arg1);
  *(SetIterator< BWAPI::ExplosionType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::ExplosionType > *arg1 = (SetIterator< BWAPI::ExplosionType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::ExplosionType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::ExplosionType > *arg1 = (SetIterator< BWAPI::ExplosionType > *) 0 ;
  BWAPI::ExplosionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::ExplosionType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::ExplosionType **)&jresult = new BWAPI::ExplosionType((const BWAPI::ExplosionType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ExplosionTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::ExplosionType > *arg1 = (SetIterator< BWAPI::ExplosionType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::ExplosionType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  SetWrapper< BWAPI::Force * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Force * > **)&jarg1; 
  result = (SetWrapper< BWAPI::Force * > *)new SetWrapper< BWAPI::Force * >(arg1);
  *(SetWrapper< BWAPI::Force * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  BWAPI::Force *arg2 = (BWAPI::Force *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  arg2 = *(BWAPI::Force **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  BWAPI::Force *arg2 = (BWAPI::Force *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  arg2 = *(BWAPI::Force **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Force * > *arg1 = (SetWrapper< BWAPI::Force * > *) 0 ;
  BWAPI::Force *arg2 = (BWAPI::Force *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Force * > **)&jarg1; 
  arg2 = *(BWAPI::Force **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ForceSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  SetIterator< BWAPI::Force * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Force * > **)&jarg1; 
  result = (SetIterator< BWAPI::Force * > *)new SetIterator< BWAPI::Force * >(arg1);
  *(SetIterator< BWAPI::Force * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Force * > *arg1 = (SetIterator< BWAPI::Force * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Force * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ForceSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Force * > *arg1 = (SetIterator< BWAPI::Force * > *) 0 ;
  BWAPI::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Force * > **)&jarg1; 
  result = (BWAPI::Force *)(arg1)->next();
  *(BWAPI::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ForceSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Force * > *arg1 = (SetIterator< BWAPI::Force * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Force * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1OrderSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  SetWrapper< BWAPI::Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Order > **)&jarg1; 
  result = (SetWrapper< BWAPI::Order > *)new SetWrapper< BWAPI::Order >(arg1);
  *(SetWrapper< BWAPI::Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1OrderSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  BWAPI::Order arg2 ;
  BWAPI::Order *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  argp2 = *(BWAPI::Order **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Order");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  BWAPI::Order arg2 ;
  BWAPI::Order *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  argp2 = *(BWAPI::Order **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Order");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Order > *arg1 = (SetWrapper< BWAPI::Order > *) 0 ;
  BWAPI::Order arg2 ;
  BWAPI::Order *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Order > **)&jarg1; 
  argp2 = *(BWAPI::Order **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Order");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1OrderSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  SetIterator< BWAPI::Order > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Order > **)&jarg1; 
  result = (SetIterator< BWAPI::Order > *)new SetIterator< BWAPI::Order >(arg1);
  *(SetIterator< BWAPI::Order > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Order > *arg1 = (SetIterator< BWAPI::Order > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Order > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_OrderSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Order > *arg1 = (SetIterator< BWAPI::Order > *) 0 ;
  BWAPI::Order result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Order > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::Order **)&jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1OrderSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Order > *arg1 = (SetIterator< BWAPI::Order > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Order > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  SetWrapper< BWAPI::Player * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Player * > **)&jarg1; 
  result = (SetWrapper< BWAPI::Player * > *)new SetWrapper< BWAPI::Player * >(arg1);
  *(SetWrapper< BWAPI::Player * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Player * > *arg1 = (SetWrapper< BWAPI::Player * > *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Player * > **)&jarg1; 
  arg2 = *(BWAPI::Player **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  SetIterator< BWAPI::Player * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Player * > **)&jarg1; 
  result = (SetIterator< BWAPI::Player * > *)new SetIterator< BWAPI::Player * >(arg1);
  *(SetIterator< BWAPI::Player * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Player * > *arg1 = (SetIterator< BWAPI::Player * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Player * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Player * > *arg1 = (SetIterator< BWAPI::Player * > *) 0 ;
  BWAPI::Player *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Player * > **)&jarg1; 
  result = (BWAPI::Player *)(arg1)->next();
  *(BWAPI::Player **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Player * > *arg1 = (SetIterator< BWAPI::Player * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Player * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  SetWrapper< BWAPI::PlayerType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::PlayerType > **)&jarg1; 
  result = (SetWrapper< BWAPI::PlayerType > *)new SetWrapper< BWAPI::PlayerType >(arg1);
  *(SetWrapper< BWAPI::PlayerType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  BWAPI::PlayerType arg2 ;
  BWAPI::PlayerType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  argp2 = *(BWAPI::PlayerType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::PlayerType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  BWAPI::PlayerType arg2 ;
  BWAPI::PlayerType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  argp2 = *(BWAPI::PlayerType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::PlayerType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::PlayerType > *arg1 = (SetWrapper< BWAPI::PlayerType > *) 0 ;
  BWAPI::PlayerType arg2 ;
  BWAPI::PlayerType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::PlayerType > **)&jarg1; 
  argp2 = *(BWAPI::PlayerType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::PlayerType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  SetIterator< BWAPI::PlayerType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::PlayerType > **)&jarg1; 
  result = (SetIterator< BWAPI::PlayerType > *)new SetIterator< BWAPI::PlayerType >(arg1);
  *(SetIterator< BWAPI::PlayerType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::PlayerType > *arg1 = (SetIterator< BWAPI::PlayerType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::PlayerType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::PlayerType > *arg1 = (SetIterator< BWAPI::PlayerType > *) 0 ;
  BWAPI::PlayerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::PlayerType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::PlayerType **)&jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::PlayerType > *arg1 = (SetIterator< BWAPI::PlayerType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::PlayerType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RaceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  SetWrapper< BWAPI::Race > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Race > **)&jarg1; 
  result = (SetWrapper< BWAPI::Race > *)new SetWrapper< BWAPI::Race >(arg1);
  *(SetWrapper< BWAPI::Race > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RaceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  argp2 = *(BWAPI::Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Race");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  argp2 = *(BWAPI::Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Race");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Race > *arg1 = (SetWrapper< BWAPI::Race > *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Race > **)&jarg1; 
  argp2 = *(BWAPI::Race **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Race");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RaceSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  SetIterator< BWAPI::Race > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Race > **)&jarg1; 
  result = (SetIterator< BWAPI::Race > *)new SetIterator< BWAPI::Race >(arg1);
  *(SetIterator< BWAPI::Race > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Race > *arg1 = (SetIterator< BWAPI::Race > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Race > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RaceSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Race > *arg1 = (SetIterator< BWAPI::Race > *) 0 ;
  BWAPI::Race result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Race > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::Race **)&jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RaceSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Race > *arg1 = (SetIterator< BWAPI::Race > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Race > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  SetWrapper< BWAPI::TechType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TechType const * > **)&jarg1; 
  result = (SetWrapper< BWAPI::TechType const * > *)new SetWrapper< BWAPI::TechType const * >(arg1);
  *(SetWrapper< BWAPI::TechType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  BWAPI::TechType *arg2 = (BWAPI::TechType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2; 
  result = (bool)(arg1)->contains((BWAPI::TechType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  BWAPI::TechType *arg2 = (BWAPI::TechType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2; 
  result = (bool)(arg1)->add((BWAPI::TechType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType const * > *arg1 = (SetWrapper< BWAPI::TechType const * > *) 0 ;
  BWAPI::TechType *arg2 = (BWAPI::TechType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType const * > **)&jarg1; 
  arg2 = *(BWAPI::TechType **)&jarg2; 
  result = (bool)(arg1)->remove((BWAPI::TechType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  SetIterator< BWAPI::TechType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TechType const * > **)&jarg1; 
  result = (SetIterator< BWAPI::TechType const * > *)new SetIterator< BWAPI::TechType const * >(arg1);
  *(SetIterator< BWAPI::TechType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::TechType const * > *arg1 = (SetIterator< BWAPI::TechType const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TechType const * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::TechType const * > *arg1 = (SetIterator< BWAPI::TechType const * > *) 0 ;
  BWAPI::TechType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TechType const * > **)&jarg1; 
  result = (BWAPI::TechType *)(arg1)->next();
  *(BWAPI::TechType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::TechType const * > *arg1 = (SetIterator< BWAPI::TechType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::TechType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  SetWrapper< BWAPI::TechType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TechType > **)&jarg1; 
  result = (SetWrapper< BWAPI::TechType > *)new SetWrapper< BWAPI::TechType >(arg1);
  *(SetWrapper< BWAPI::TechType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TechType > *arg1 = (SetWrapper< BWAPI::TechType > *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TechType > **)&jarg1; 
  argp2 = *(BWAPI::TechType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TechType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  SetIterator< BWAPI::TechType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TechType > **)&jarg1; 
  result = (SetIterator< BWAPI::TechType > *)new SetIterator< BWAPI::TechType >(arg1);
  *(SetIterator< BWAPI::TechType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::TechType > *arg1 = (SetIterator< BWAPI::TechType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TechType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::TechType > *arg1 = (SetIterator< BWAPI::TechType > *) 0 ;
  BWAPI::TechType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TechType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::TechType **)&jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::TechType > *arg1 = (SetIterator< BWAPI::TechType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::TechType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * > *arg2 = (std::list< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(std::list< BWAPI::Unit * > **)&jarg2; 
  if (arg1) (arg1)->_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  result = (std::list< BWAPI::Unit * > *) ((arg1)->_list);
  *(std::list< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  ListWrapper< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< BWAPI::Unit * > **)&jarg1; 
  result = (ListWrapper< BWAPI::Unit * > *)new ListWrapper< BWAPI::Unit * >(arg1);
  *(ListWrapper< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::Unit * > *arg1 = (ListWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  ListIterator< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< BWAPI::Unit * > **)&jarg1; 
  result = (ListIterator< BWAPI::Unit * > *)new ListIterator< BWAPI::Unit * >(arg1);
  *(ListIterator< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitListIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListIterator< BWAPI::Unit * > *arg1 = (ListIterator< BWAPI::Unit * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< BWAPI::Unit * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitListIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListIterator< BWAPI::Unit * > *arg1 = (ListIterator< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< BWAPI::Unit * > **)&jarg1; 
  result = (BWAPI::Unit *)(arg1)->next();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListIterator< BWAPI::Unit * > *arg1 = (ListIterator< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListIterator< BWAPI::Unit * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  SetWrapper< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Unit * > **)&jarg1; 
  result = (SetWrapper< BWAPI::Unit * > *)new SetWrapper< BWAPI::Unit * >(arg1);
  *(SetWrapper< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::Unit * > *arg1 = (SetWrapper< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::Unit * > **)&jarg1; 
  arg2 = *(BWAPI::Unit **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  SetIterator< BWAPI::Unit * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::Unit * > **)&jarg1; 
  result = (SetIterator< BWAPI::Unit * > *)new SetIterator< BWAPI::Unit * >(arg1);
  *(SetIterator< BWAPI::Unit * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::Unit * > *arg1 = (SetIterator< BWAPI::Unit * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Unit * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::Unit * > *arg1 = (SetIterator< BWAPI::Unit * > *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::Unit * > **)&jarg1; 
  result = (BWAPI::Unit *)(arg1)->next();
  *(BWAPI::Unit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::Unit * > *arg1 = (SetIterator< BWAPI::Unit * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::Unit * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSizeTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  SetWrapper< BWAPI::UnitSizeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitSizeType > **)&jarg1; 
  result = (SetWrapper< BWAPI::UnitSizeType > *)new SetWrapper< BWAPI::UnitSizeType >(arg1);
  *(SetWrapper< BWAPI::UnitSizeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSizeTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  BWAPI::UnitSizeType arg2 ;
  BWAPI::UnitSizeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  argp2 = *(BWAPI::UnitSizeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitSizeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  BWAPI::UnitSizeType arg2 ;
  BWAPI::UnitSizeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  argp2 = *(BWAPI::UnitSizeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitSizeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitSizeType > *arg1 = (SetWrapper< BWAPI::UnitSizeType > *) 0 ;
  BWAPI::UnitSizeType arg2 ;
  BWAPI::UnitSizeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitSizeType > **)&jarg1; 
  argp2 = *(BWAPI::UnitSizeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitSizeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSizeTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  SetIterator< BWAPI::UnitSizeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitSizeType > **)&jarg1; 
  result = (SetIterator< BWAPI::UnitSizeType > *)new SetIterator< BWAPI::UnitSizeType >(arg1);
  *(SetIterator< BWAPI::UnitSizeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::UnitSizeType > *arg1 = (SetIterator< BWAPI::UnitSizeType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitSizeType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::UnitSizeType > *arg1 = (SetIterator< BWAPI::UnitSizeType > *) 0 ;
  BWAPI::UnitSizeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitSizeType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::UnitSizeType **)&jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSizeTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::UnitSizeType > *arg1 = (SetIterator< BWAPI::UnitSizeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::UnitSizeType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  SetWrapper< BWAPI::UnitType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitType const * > **)&jarg1; 
  result = (SetWrapper< BWAPI::UnitType const * > *)new SetWrapper< BWAPI::UnitType const * >(arg1);
  *(SetWrapper< BWAPI::UnitType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2; 
  result = (bool)(arg1)->contains((BWAPI::UnitType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2; 
  result = (bool)(arg1)->add((BWAPI::UnitType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType const * > *arg1 = (SetWrapper< BWAPI::UnitType const * > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType const * > **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2; 
  result = (bool)(arg1)->remove((BWAPI::UnitType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  SetIterator< BWAPI::UnitType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitType const * > **)&jarg1; 
  result = (SetIterator< BWAPI::UnitType const * > *)new SetIterator< BWAPI::UnitType const * >(arg1);
  *(SetIterator< BWAPI::UnitType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::UnitType const * > *arg1 = (SetIterator< BWAPI::UnitType const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitType const * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::UnitType const * > *arg1 = (SetIterator< BWAPI::UnitType const * > *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitType const * > **)&jarg1; 
  result = (BWAPI::UnitType *)(arg1)->next();
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::UnitType const * > *arg1 = (SetIterator< BWAPI::UnitType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::UnitType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  SetWrapper< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitType > **)&jarg1; 
  result = (SetWrapper< BWAPI::UnitType > *)new SetWrapper< BWAPI::UnitType >(arg1);
  *(SetWrapper< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UnitType > *arg1 = (SetWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  SetIterator< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UnitType > **)&jarg1; 
  result = (SetIterator< BWAPI::UnitType > *)new SetIterator< BWAPI::UnitType >(arg1);
  *(SetIterator< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::UnitType > *arg1 = (SetIterator< BWAPI::UnitType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::UnitType > *arg1 = (SetIterator< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UnitType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::UnitType **)&jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::UnitType > *arg1 = (SetIterator< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::UnitType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >();
  *(std::pair< BWAPI::UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int arg2 ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BWAPI::UnitType **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >((BWAPI::UnitType const *)arg1,arg2);
  *(std::pair< BWAPI::UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = 0 ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< BWAPI::UnitType const *,int > const & reference is null");
    return 0;
  } 
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >((std::pair< BWAPI::UnitType const *,int > const &)*arg1);
  *(std::pair< BWAPI::UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1; 
  arg2 = *(BWAPI::UnitType **)&jarg2; 
  if (arg1) (arg1)->first = (BWAPI::UnitType const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1; 
  result = (BWAPI::UnitType *) ((arg1)->first);
  *(BWAPI::UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeWhatBuildsPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< BWAPI::UnitType const *,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< UnitType const *,int > *arg1 = (std::map< UnitType const *,int > *) 0 ;
  MapWrapper< UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< UnitType const *,int > **)&jarg1; 
  result = (MapWrapper< UnitType const *,int > *)new MapWrapper< UnitType const *,int >(arg1);
  *(MapWrapper< UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MapWrapper< UnitType const *,int > *arg1 = (MapWrapper< UnitType const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MapWrapper< UnitType const *,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MapWrapper< UnitType const *,int > *arg1 = (MapWrapper< UnitType const *,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapWrapper< UnitType const *,int > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  MapWrapper< UnitType const *,int > *arg1 = (MapWrapper< UnitType const *,int > *) 0 ;
  UnitType *arg2 = (UnitType *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapWrapper< UnitType const *,int > **)&jarg1; 
  arg2 = *(UnitType **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->add((UnitType const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MapWrapper< UnitType const *,int > *arg1 = (MapWrapper< UnitType const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapWrapper< UnitType const *,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  MapWrapper< UnitType const *,int > *arg1 = (MapWrapper< UnitType const *,int > *) 0 ;
  UnitType *arg2 = (UnitType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapWrapper< UnitType const *,int > **)&jarg1; 
  arg2 = *(UnitType **)&jarg2; 
  result = (bool)(arg1)->remove((UnitType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeMapIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< UnitType const *,int > *arg1 = (std::map< UnitType const *,int > *) 0 ;
  MapIterator< UnitType const *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< UnitType const *,int > **)&jarg1; 
  result = (MapIterator< UnitType const *,int > *)new MapIterator< UnitType const *,int >(arg1);
  *(MapIterator< UnitType const *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MapIterator< UnitType const *,int > *arg1 = (MapIterator< UnitType const *,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapIterator< UnitType const *,int > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MapIterator< UnitType const *,int > *arg1 = (MapIterator< UnitType const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapIterator< UnitType const *,int > **)&jarg1; 
  (arg1)->next();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MapIterator< UnitType const *,int > *arg1 = (MapIterator< UnitType const *,int > *) 0 ;
  UnitType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapIterator< UnitType const *,int > **)&jarg1; 
  result = (UnitType *)(arg1)->getKey();
  *(UnitType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MapIterator< UnitType const *,int > *arg1 = (MapIterator< UnitType const *,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapIterator< UnitType const *,int > **)&jarg1; 
  result = (int)(arg1)->getValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeMapIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MapIterator< UnitType const *,int > *arg1 = (MapIterator< UnitType const *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MapIterator< UnitType const *,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType > *arg2 = (std::list< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  arg2 = *(std::list< BWAPI::UnitType > **)&jarg2; 
  if (arg1) (arg1)->_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  result = (std::list< BWAPI::UnitType > *) ((arg1)->_list);
  *(std::list< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  ListWrapper< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< BWAPI::UnitType > **)&jarg1; 
  result = (ListWrapper< BWAPI::UnitType > *)new ListWrapper< BWAPI::UnitType >(arg1);
  *(ListWrapper< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ListWrapper< BWAPI::UnitType > *arg1 = (ListWrapper< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ListWrapper< BWAPI::UnitType > **)&jarg1; 
  argp2 = *(BWAPI::UnitType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UnitType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  ListIterator< BWAPI::UnitType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< BWAPI::UnitType > **)&jarg1; 
  result = (ListIterator< BWAPI::UnitType > *)new ListIterator< BWAPI::UnitType >(arg1);
  *(ListIterator< BWAPI::UnitType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeListIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListIterator< BWAPI::UnitType > *arg1 = (ListIterator< BWAPI::UnitType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< BWAPI::UnitType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeListIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListIterator< BWAPI::UnitType > *arg1 = (ListIterator< BWAPI::UnitType > *) 0 ;
  BWAPI::UnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< BWAPI::UnitType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::UnitType **)&jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListIterator< BWAPI::UnitType > *arg1 = (ListIterator< BWAPI::UnitType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListIterator< BWAPI::UnitType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  SetWrapper< BWAPI::UpgradeType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UpgradeType const * > **)&jarg1; 
  result = (SetWrapper< BWAPI::UpgradeType const * > *)new SetWrapper< BWAPI::UpgradeType const * >(arg1);
  *(SetWrapper< BWAPI::UpgradeType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeConstantSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  BWAPI::UpgradeType *arg2 = (BWAPI::UpgradeType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2; 
  result = (bool)(arg1)->contains((BWAPI::UpgradeType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  BWAPI::UpgradeType *arg2 = (BWAPI::UpgradeType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2; 
  result = (bool)(arg1)->add((BWAPI::UpgradeType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType const * > *arg1 = (SetWrapper< BWAPI::UpgradeType const * > *) 0 ;
  BWAPI::UpgradeType *arg2 = (BWAPI::UpgradeType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType const * > **)&jarg1; 
  arg2 = *(BWAPI::UpgradeType **)&jarg2; 
  result = (bool)(arg1)->remove((BWAPI::UpgradeType const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  SetIterator< BWAPI::UpgradeType const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UpgradeType const * > **)&jarg1; 
  result = (SetIterator< BWAPI::UpgradeType const * > *)new SetIterator< BWAPI::UpgradeType const * >(arg1);
  *(SetIterator< BWAPI::UpgradeType const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::UpgradeType const * > *arg1 = (SetIterator< BWAPI::UpgradeType const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UpgradeType const * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::UpgradeType const * > *arg1 = (SetIterator< BWAPI::UpgradeType const * > *) 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UpgradeType const * > **)&jarg1; 
  result = (BWAPI::UpgradeType *)(arg1)->next();
  *(BWAPI::UpgradeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeConstantSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::UpgradeType const * > *arg1 = (SetIterator< BWAPI::UpgradeType const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::UpgradeType const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  SetWrapper< BWAPI::UpgradeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UpgradeType > **)&jarg1; 
  result = (SetWrapper< BWAPI::UpgradeType > *)new SetWrapper< BWAPI::UpgradeType >(arg1);
  *(SetWrapper< BWAPI::UpgradeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  argp2 = *(BWAPI::UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  argp2 = *(BWAPI::UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::UpgradeType > *arg1 = (SetWrapper< BWAPI::UpgradeType > *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::UpgradeType > **)&jarg1; 
  argp2 = *(BWAPI::UpgradeType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::UpgradeType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  SetIterator< BWAPI::UpgradeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::UpgradeType > **)&jarg1; 
  result = (SetIterator< BWAPI::UpgradeType > *)new SetIterator< BWAPI::UpgradeType >(arg1);
  *(SetIterator< BWAPI::UpgradeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::UpgradeType > *arg1 = (SetIterator< BWAPI::UpgradeType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UpgradeType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::UpgradeType > *arg1 = (SetIterator< BWAPI::UpgradeType > *) 0 ;
  BWAPI::UpgradeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::UpgradeType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::UpgradeType **)&jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::UpgradeType > *arg1 = (SetIterator< BWAPI::UpgradeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::UpgradeType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1WeaponTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  SetWrapper< BWAPI::WeaponType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::WeaponType > **)&jarg1; 
  result = (SetWrapper< BWAPI::WeaponType > *)new SetWrapper< BWAPI::WeaponType >(arg1);
  *(SetWrapper< BWAPI::WeaponType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1WeaponTypeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  argp2 = *(BWAPI::WeaponType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::WeaponType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  argp2 = *(BWAPI::WeaponType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::WeaponType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::WeaponType > *arg1 = (SetWrapper< BWAPI::WeaponType > *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::WeaponType > **)&jarg1; 
  argp2 = *(BWAPI::WeaponType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::WeaponType");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1WeaponTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  SetIterator< BWAPI::WeaponType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::WeaponType > **)&jarg1; 
  result = (SetIterator< BWAPI::WeaponType > *)new SetIterator< BWAPI::WeaponType >(arg1);
  *(SetIterator< BWAPI::WeaponType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::WeaponType > *arg1 = (SetIterator< BWAPI::WeaponType > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::WeaponType > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::WeaponType > *arg1 = (SetIterator< BWAPI::WeaponType > *) 0 ;
  BWAPI::WeaponType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::WeaponType > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::WeaponType **)&jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1WeaponTypeSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::WeaponType > *arg1 = (SetIterator< BWAPI::WeaponType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::WeaponType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TilePositionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  SetWrapper< BWAPI::TilePosition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TilePosition > **)&jarg1; 
  result = (SetWrapper< BWAPI::TilePosition > *)new SetWrapper< BWAPI::TilePosition >(arg1);
  *(SetWrapper< BWAPI::TilePosition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TilePositionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  argp2 = *(BWAPI::TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  argp2 = *(BWAPI::TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWAPI::TilePosition > *arg1 = (SetWrapper< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWAPI::TilePosition > **)&jarg1; 
  argp2 = *(BWAPI::TilePosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::TilePosition");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1TilePositionSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  SetIterator< BWAPI::TilePosition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWAPI::TilePosition > **)&jarg1; 
  result = (SetIterator< BWAPI::TilePosition > *)new SetIterator< BWAPI::TilePosition >(arg1);
  *(SetIterator< BWAPI::TilePosition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWAPI::TilePosition > *arg1 = (SetIterator< BWAPI::TilePosition > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TilePosition > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWAPI::TilePosition > *arg1 = (SetIterator< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWAPI::TilePosition > **)&jarg1; 
  result = (arg1)->next();
  *(BWAPI::TilePosition **)&jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TilePositionSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWAPI::TilePosition > *arg1 = (SetIterator< BWAPI::TilePosition > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWAPI::TilePosition > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  SetWrapper< BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Region * > **)&jarg1; 
  result = (SetWrapper< BWTA::Region * > *)new SetWrapper< BWTA::Region * >(arg1);
  *(SetWrapper< BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  SetIterator< BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Region * > **)&jarg1; 
  result = (SetIterator< BWTA::Region * > *)new SetIterator< BWTA::Region * >(arg1);
  *(SetIterator< BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  result = (BWTA::Region *)(arg1)->next();
  *(BWTA::Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  SetWrapper< BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Region * > **)&jarg1; 
  result = (SetWrapper< BWTA::Region * > *)new SetWrapper< BWTA::Region * >(arg1);
  *(SetWrapper< BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Region * > *arg1 = (SetWrapper< BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  SetIterator< BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Region * > **)&jarg1; 
  result = (SetIterator< BWTA::Region * > *)new SetIterator< BWTA::Region * >(arg1);
  *(SetIterator< BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  result = (BWTA::Region *)(arg1)->next();
  *(BWTA::Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Region * > *arg1 = (SetIterator< BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Region * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  SetWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Chokepoint * > **)&jarg1; 
  result = (SetWrapper< BWTA::Chokepoint * > *)new SetWrapper< BWTA::Chokepoint * >(arg1);
  *(SetWrapper< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  SetIterator< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Chokepoint * > **)&jarg1; 
  result = (SetIterator< BWTA::Chokepoint * > *)new SetIterator< BWTA::Chokepoint * >(arg1);
  *(SetIterator< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  result = (BWTA::Chokepoint *)(arg1)->next();
  *(BWTA::Chokepoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  SetWrapper< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Chokepoint * > **)&jarg1; 
  result = (SetWrapper< BWTA::Chokepoint * > *)new SetWrapper< BWTA::Chokepoint * >(arg1);
  *(SetWrapper< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Chokepoint * > *arg1 = (SetWrapper< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *arg2 = (BWTA::Chokepoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Chokepoint * > **)&jarg1; 
  arg2 = *(BWTA::Chokepoint **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  SetIterator< BWTA::Chokepoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Chokepoint * > **)&jarg1; 
  result = (SetIterator< BWTA::Chokepoint * > *)new SetIterator< BWTA::Chokepoint * >(arg1);
  *(SetIterator< BWTA::Chokepoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  BWTA::Chokepoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  result = (BWTA::Chokepoint *)(arg1)->next();
  *(BWTA::Chokepoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Chokepoint * > *arg1 = (SetIterator< BWTA::Chokepoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Chokepoint * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >();
  *(std::pair< BWTA::Region *,BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BWTA::Region **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >(arg1,arg2);
  *(std::pair< BWTA::Region *,BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< BWTA::Region *,BWTA::Region * > const & reference is null");
    return 0;
  } 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >((std::pair< BWTA::Region *,BWTA::Region * > const &)*arg1);
  *(std::pair< BWTA::Region *,BWTA::Region * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1; 
  result = (BWTA::Region *) ((arg1)->first);
  *(BWTA::Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1; 
  arg2 = *(BWTA::Region **)&jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1; 
  result = (BWTA::Region *) ((arg1)->second);
  *(BWTA::Region **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointGetRegionsPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< BWTA::Region *,BWTA::Region * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >();
  *(std::pair< BWAPI::Position,BWAPI::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BWAPI::Position arg1 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position *argp2 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(BWAPI::Position **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(BWAPI::Position **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >(arg1,arg2);
  *(std::pair< BWAPI::Position,BWAPI::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< BWAPI::Position,BWAPI::Position > const & reference is null");
    return 0;
  } 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >((std::pair< BWAPI::Position,BWAPI::Position > const &)*arg1);
  *(std::pair< BWAPI::Position,BWAPI::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1; 
  result = (BWAPI::Position *)& ((arg1)->first);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1; 
  arg2 = *(BWAPI::Position **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1; 
  result = (BWAPI::Position *)& ((arg1)->second);
  *(BWAPI::Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointGetSidesPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< BWAPI::Position,BWAPI::Position > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::BaseLocation * > **)&jarg1; 
  result = (SetWrapper< BWTA::BaseLocation * > *)new SetWrapper< BWTA::BaseLocation * >(arg1);
  *(SetWrapper< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  SetIterator< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::BaseLocation * > **)&jarg1; 
  result = (SetIterator< BWTA::BaseLocation * > *)new SetIterator< BWTA::BaseLocation * >(arg1);
  *(SetIterator< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  result = (BWTA::BaseLocation *)(arg1)->next();
  *(BWTA::BaseLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  SetWrapper< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::BaseLocation * > **)&jarg1; 
  result = (SetWrapper< BWTA::BaseLocation * > *)new SetWrapper< BWTA::BaseLocation * >(arg1);
  *(SetWrapper< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::BaseLocation * > *arg1 = (SetWrapper< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::BaseLocation * > **)&jarg1; 
  arg2 = *(BWTA::BaseLocation **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  SetIterator< BWTA::BaseLocation * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::BaseLocation * > **)&jarg1; 
  result = (SetIterator< BWTA::BaseLocation * > *)new SetIterator< BWTA::BaseLocation * >(arg1);
  *(SetIterator< BWTA::BaseLocation * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  result = (BWTA::BaseLocation *)(arg1)->next();
  *(BWTA::BaseLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::BaseLocation * > *arg1 = (SetIterator< BWTA::BaseLocation * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::BaseLocation * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  SetWrapper< BWTA::Polygon * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Polygon * > **)&jarg1; 
  result = (SetWrapper< BWTA::Polygon * > *)new SetWrapper< BWTA::Polygon * >(arg1);
  *(SetWrapper< BWTA::Polygon * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  SetIterator< BWTA::Polygon * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Polygon * > **)&jarg1; 
  result = (SetIterator< BWTA::Polygon * > *)new SetIterator< BWTA::Polygon * >(arg1);
  *(SetIterator< BWTA::Polygon * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  result = (BWTA::Polygon *)(arg1)->next();
  *(BWTA::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  SetWrapper< BWTA::Polygon * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Polygon * > **)&jarg1; 
  result = (SetWrapper< BWTA::Polygon * > *)new SetWrapper< BWTA::Polygon * >(arg1);
  *(SetWrapper< BWTA::Polygon * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSpacelessSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->add(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SetWrapper< BWTA::Polygon * > *arg1 = (SetWrapper< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *arg2 = (BWTA::Polygon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetWrapper< BWTA::Polygon * > **)&jarg1; 
  arg2 = *(BWTA::Polygon **)&jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  SetIterator< BWTA::Polygon * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< BWTA::Polygon * > **)&jarg1; 
  result = (SetIterator< BWTA::Polygon * > *)new SetIterator< BWTA::Polygon * >(arg1);
  *(SetIterator< BWTA::Polygon * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSetIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSetIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  BWTA::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  result = (BWTA::Polygon *)(arg1)->next();
  *(BWTA::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSpacelessSetIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SetIterator< BWTA::Polygon * > *arg1 = (SetIterator< BWTA::Polygon * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SetIterator< BWTA::Polygon * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_new_1PositionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  VectorWrapper< BWAPI::Position > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< BWAPI::Position > **)&jarg1; 
  result = (VectorWrapper< BWAPI::Position > *)new VectorWrapper< BWAPI::Position >(arg1);
  *(VectorWrapper< BWAPI::Position > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PositionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(BWAPI::Position **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp3 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(BWAPI::Position **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BWAPI::Position");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->set(arg2,arg3);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->remove(arg2);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  VectorWrapper< BWAPI::Position > *arg1 = (VectorWrapper< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VectorWrapper< BWAPI::Position > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->get(arg2);
  *(BWAPI::Position **)&jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif



int SwigUtils::registerNatives(JNIEnv* env)
{
	JNINativeMethod methods[1606];
	jclass cls = env->FindClass("org/bwapi/bridge/swig/bridgeJNI");

	methods[0].name = "getError";
	methods[0].signature = "(J)J";
	methods[0].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getError;

	methods[1].name = "BWAPI_init";
	methods[1].signature = "()V";
	methods[1].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BWAPI_1init;

	methods[2].name = "new_AIModule";
	methods[2].signature = "()J";
	methods[2].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1AIModule;

	methods[3].name = "delete_AIModule";
	methods[3].signature = "(J)V";
	methods[3].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1AIModule;

	methods[4].name = "AIModule_onStart";
	methods[4].signature = "(JLorg/bwapi/bridge/swig/AIModule;)V";
	methods[4].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onStart;

	methods[5].name = "AIModule_onEnd";
	methods[5].signature = "(JLorg/bwapi/bridge/swig/AIModule;Z)V";
	methods[5].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onEnd;

	methods[6].name = "AIModule_onFrame";
	methods[6].signature = "(JLorg/bwapi/bridge/swig/AIModule;)V";
	methods[6].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onFrame;

	methods[7].name = "AIModule_onSendText";
	methods[7].signature = "(JLorg/bwapi/bridge/swig/AIModule;Ljava/lang/String;)Z";
	methods[7].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onSendText;

	methods[8].name = "AIModule_onPlayerLeft";
	methods[8].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Player;)V";
	methods[8].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onPlayerLeft;

	methods[9].name = "AIModule_onNukeDetect";
	methods[9].signature = "(JLorg/bwapi/bridge/swig/AIModule;J)V";
	methods[9].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onNukeDetect;

	methods[10].name = "AIModule_onUnitCreate";
	methods[10].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[10].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitCreate;

	methods[11].name = "AIModule_onUnitDestroy";
	methods[11].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[11].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitDestroy;

	methods[12].name = "AIModule_onUnitMorph";
	methods[12].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[12].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitMorph;

	methods[13].name = "AIModule_onUnitShow";
	methods[13].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[13].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitShow;

	methods[14].name = "AIModule_onUnitHide";
	methods[14].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[14].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitHide;

	methods[15].name = "AIModule_onUnitRenegade";
	methods[15].signature = "(JLorg/bwapi/bridge/swig/AIModule;JLorg/bwapi/bridge/swig/SWIG_Unit;)V";
	methods[15].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIModule_1onUnitRenegade;

	methods[16].name = "new_SWIG_AttackType__SWIG_0";
	methods[16].signature = "()J";
	methods[16].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_10;

	methods[17].name = "new_SWIG_AttackType__SWIG_1";
	methods[17].signature = "(I)J";
	methods[17].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_11;

	methods[18].name = "new_SWIG_AttackType__SWIG_2";
	methods[18].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;)J";
	methods[18].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1AttackType_1_1SWIG_12;

	methods[19].name = "SWIG_AttackType_opAssign";
	methods[19].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;JLorg/bwapi/bridge/swig/SWIG_AttackType;)J";
	methods[19].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opAssign;

	methods[20].name = "SWIG_AttackType_opEquals";
	methods[20].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;JLorg/bwapi/bridge/swig/SWIG_AttackType;)Z";
	methods[20].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opEquals;

	methods[21].name = "SWIG_AttackType_opNotEquals";
	methods[21].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;JLorg/bwapi/bridge/swig/SWIG_AttackType;)Z";
	methods[21].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opNotEquals;

	methods[22].name = "SWIG_AttackType_opLessThan";
	methods[22].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;JLorg/bwapi/bridge/swig/SWIG_AttackType;)Z";
	methods[22].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1opLessThan;

	methods[23].name = "SWIG_AttackType_getID";
	methods[23].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;)I";
	methods[23].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1getID;

	methods[24].name = "SWIG_AttackType_getName";
	methods[24].signature = "(JLorg/bwapi/bridge/swig/SWIG_AttackType;)Ljava/lang/String;";
	methods[24].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1AttackType_1getName;

	methods[25].name = "delete_SWIG_AttackType";
	methods[25].signature = "(J)V";
	methods[25].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1AttackType;

	methods[26].name = "getAttackType";
	methods[26].signature = "(J)J";
	methods[26].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getAttackType;

	methods[27].name = "allAttackTypes";
	methods[27].signature = "()J";
	methods[27].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allAttackTypes;

	methods[28].name = "initAttackTypes";
	methods[28].signature = "()V";
	methods[28].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initAttackTypes;

	methods[29].name = "Melee_get";
	methods[29].signature = "()J";
	methods[29].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Melee_1get;

	methods[30].name = "Fusion_Cutter_Hit_get";
	methods[30].signature = "()J";
	methods[30].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Fusion_1Cutter_1Hit_1get;

	methods[31].name = "Gauss_Rifle_Hit_get";
	methods[31].signature = "()J";
	methods[31].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gauss_1Rifle_1Hit_1get;

	methods[32].name = "C_10_Canister_Rifle_Hit_get";
	methods[32].signature = "()J";
	methods[32].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_C_110_1Canister_1Rifle_1Hit_1get;

	methods[33].name = "AttackTypeGemeni_Missiles_get";
	methods[33].signature = "()J";
	methods[33].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeGemeni_1Missiles_1get;

	methods[34].name = "AttackTypeFragmentation_Grenade_get";
	methods[34].signature = "()J";
	methods[34].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeFragmentation_1Grenade_1get;

	methods[35].name = "AttackTypeLongbolt_Missile_get";
	methods[35].signature = "()J";
	methods[35].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeLongbolt_1Missile_1get;

	methods[36].name = "ATS_ATA_Laser_Battery_get";
	methods[36].signature = "()J";
	methods[36].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ATS_1ATA_1Laser_1Battery_1get;

	methods[37].name = "AttackTypeBurst_Lasers_get";
	methods[37].signature = "()J";
	methods[37].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeBurst_1Lasers_1get;

	methods[38].name = "Arclite_Shock_Cannon_Hit_get";
	methods[38].signature = "()J";
	methods[38].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Shock_1Cannon_1Hit_1get;

	methods[39].name = "EMP_Missile_get";
	methods[39].signature = "()J";
	methods[39].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_EMP_1Missile_1get;

	methods[40].name = "Dual_Photon_Blasters_Hit_get";
	methods[40].signature = "()J";
	methods[40].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Dual_1Photon_1Blasters_1Hit_1get;

	methods[41].name = "Particle_Beam_Hit_get";
	methods[41].signature = "()J";
	methods[41].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Particle_1Beam_1Hit_1get;

	methods[42].name = "Anti_Matter_Missile_get";
	methods[42].signature = "()J";
	methods[42].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Anti_1Matter_1Missile_1get;

	methods[43].name = "AttackTypePulse_Cannon_get";
	methods[43].signature = "()J";
	methods[43].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypePulse_1Cannon_1get;

	methods[44].name = "Psionic_Shockwave_Hit_get";
	methods[44].signature = "()J";
	methods[44].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Shockwave_1Hit_1get;

	methods[45].name = "Psionic_Storm_get";
	methods[45].signature = "()J";
	methods[45].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Storm_1get;

	methods[46].name = "AttackTypeYamato_Gun_get";
	methods[46].signature = "()J";
	methods[46].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeYamato_1Gun_1get;

	methods[47].name = "AttackTypePhase_Disruptor_get";
	methods[47].signature = "()J";
	methods[47].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypePhase_1Disruptor_1get;

	methods[48].name = "STA_STS_Cannon_Overlay_get";
	methods[48].signature = "()J";
	methods[48].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_STA_1STS_1Cannon_1Overlay_1get;

	methods[49].name = "Sunken_Colony_Tentacle_get";
	methods[49].signature = "()J";
	methods[49].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Sunken_1Colony_1Tentacle_1get;

	methods[50].name = "AttackTypeAcid_Spore_get";
	methods[50].signature = "()J";
	methods[50].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeAcid_1Spore_1get;

	methods[51].name = "AttackTypeGlave_Wurm_get";
	methods[51].signature = "()J";
	methods[51].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeGlave_1Wurm_1get;

	methods[52].name = "AttackTypeSeeker_Spores_get";
	methods[52].signature = "()J";
	methods[52].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeSeeker_1Spores_1get;

	methods[53].name = "Queen_Spell_Carrier_get";
	methods[53].signature = "()J";
	methods[53].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Queen_1Spell_1Carrier_1get;

	methods[54].name = "Plague_Cloud_get";
	methods[54].signature = "()J";
	methods[54].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Plague_1Cloud_1get;

	methods[55].name = "Consume_get";
	methods[55].signature = "()J";
	methods[55].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Consume_1get;

	methods[56].name = "Needle_Spine_Hit_get";
	methods[56].signature = "()J";
	methods[56].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Needle_1Spine_1Hit_1get;

	methods[57].name = "Invisible_get";
	methods[57].signature = "()J";
	methods[57].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Invisible_1get;

	methods[58].name = "Optical_Flare_Grenade_get";
	methods[58].signature = "()J";
	methods[58].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Optical_1Flare_1Grenade_1get;

	methods[59].name = "AttackTypeHalo_Rockets_get";
	methods[59].signature = "()J";
	methods[59].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeHalo_1Rockets_1get;

	methods[60].name = "AttackTypeSubterranean_Spines_get";
	methods[60].signature = "()J";
	methods[60].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeSubterranean_1Spines_1get;

	methods[61].name = "Corrosive_Acid_Shot_get";
	methods[61].signature = "()J";
	methods[61].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Corrosive_1Acid_1Shot_1get;

	methods[62].name = "Neutron_Flare_get";
	methods[62].signature = "()J";
	methods[62].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Neutron_1Flare_1get;

	methods[63].name = "AttackTypeNone_get";
	methods[63].signature = "()J";
	methods[63].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeNone_1get;

	methods[64].name = "AttackTypeUnknown_get";
	methods[64].signature = "()J";
	methods[64].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTypeUnknown_1get;

	methods[65].name = "new_SWIG_Color__SWIG_0";
	methods[65].signature = "()J";
	methods[65].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_10;

	methods[66].name = "new_SWIG_Color__SWIG_1";
	methods[66].signature = "(I)J";
	methods[66].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_11;

	methods[67].name = "new_SWIG_Color__SWIG_2";
	methods[67].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;)J";
	methods[67].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_12;

	methods[68].name = "new_SWIG_Color__SWIG_3";
	methods[68].signature = "(III)J";
	methods[68].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Color_1_1SWIG_13;

	methods[69].name = "SWIG_Color_opAssign";
	methods[69].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;JLorg/bwapi/bridge/swig/SWIG_Color;)J";
	methods[69].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opAssign;

	methods[70].name = "SWIG_Color_opEquals";
	methods[70].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;JLorg/bwapi/bridge/swig/SWIG_Color;)Z";
	methods[70].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opEquals;

	methods[71].name = "SWIG_Color_opNotEquals";
	methods[71].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;JLorg/bwapi/bridge/swig/SWIG_Color;)Z";
	methods[71].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opNotEquals;

	methods[72].name = "SWIG_Color_opLessThan";
	methods[72].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;JLorg/bwapi/bridge/swig/SWIG_Color;)Z";
	methods[72].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1opLessThan;

	methods[73].name = "SWIG_Color_getID";
	methods[73].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;)I";
	methods[73].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1getID;

	methods[74].name = "SWIG_Color_red";
	methods[74].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;)I";
	methods[74].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1red;

	methods[75].name = "SWIG_Color_green";
	methods[75].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;)I";
	methods[75].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1green;

	methods[76].name = "SWIG_Color_blue";
	methods[76].signature = "(JLorg/bwapi/bridge/swig/SWIG_Color;)I";
	methods[76].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Color_1blue;

	methods[77].name = "delete_SWIG_Color";
	methods[77].signature = "(J)V";
	methods[77].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Color;

	methods[78].name = "initColors";
	methods[78].signature = "()V";
	methods[78].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initColors;

	methods[79].name = "Red_get";
	methods[79].signature = "()J";
	methods[79].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Red_1get;

	methods[80].name = "Green_get";
	methods[80].signature = "()J";
	methods[80].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Green_1get;

	methods[81].name = "Blue_get";
	methods[81].signature = "()J";
	methods[81].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Blue_1get;

	methods[82].name = "Yellow_get";
	methods[82].signature = "()J";
	methods[82].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Yellow_1get;

	methods[83].name = "Cyan_get";
	methods[83].signature = "()J";
	methods[83].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Cyan_1get;

	methods[84].name = "Purple_get";
	methods[84].signature = "()J";
	methods[84].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Purple_1get;

	methods[85].name = "Orange_get";
	methods[85].signature = "()J";
	methods[85].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Orange_1get;

	methods[86].name = "Black_get";
	methods[86].signature = "()J";
	methods[86].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Black_1get;

	methods[87].name = "White_get";
	methods[87].signature = "()J";
	methods[87].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_White_1get;

	methods[88].name = "Grey_get";
	methods[88].signature = "()J";
	methods[88].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Grey_1get;

	methods[89].name = "TILE_SIZE_get";
	methods[89].signature = "()I";
	methods[89].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TILE_1SIZE_1get;

	methods[90].name = "PYLON_X_RADIUS_get";
	methods[90].signature = "()I";
	methods[90].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PYLON_1X_1RADIUS_1get;

	methods[91].name = "PYLON_Y_RADIUS_get";
	methods[91].signature = "()I";
	methods[91].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PYLON_1Y_1RADIUS_1get;

	methods[92].name = "new_SWIG_DamageType__SWIG_0";
	methods[92].signature = "()J";
	methods[92].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_10;

	methods[93].name = "new_SWIG_DamageType__SWIG_1";
	methods[93].signature = "(I)J";
	methods[93].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_11;

	methods[94].name = "new_SWIG_DamageType__SWIG_2";
	methods[94].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;)J";
	methods[94].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1DamageType_1_1SWIG_12;

	methods[95].name = "SWIG_DamageType_opAssign";
	methods[95].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;JLorg/bwapi/bridge/swig/SWIG_DamageType;)J";
	methods[95].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opAssign;

	methods[96].name = "SWIG_DamageType_opEquals";
	methods[96].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[96].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opEquals;

	methods[97].name = "SWIG_DamageType_opNotEquals";
	methods[97].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[97].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opNotEquals;

	methods[98].name = "SWIG_DamageType_opLessThan";
	methods[98].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[98].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1opLessThan;

	methods[99].name = "SWIG_DamageType_getID";
	methods[99].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;)I";
	methods[99].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1getID;

	methods[100].name = "SWIG_DamageType_getName";
	methods[100].signature = "(JLorg/bwapi/bridge/swig/SWIG_DamageType;)Ljava/lang/String;";
	methods[100].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1DamageType_1getName;

	methods[101].name = "delete_SWIG_DamageType";
	methods[101].signature = "(J)V";
	methods[101].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1DamageType;

	methods[102].name = "getDamageType";
	methods[102].signature = "(J)J";
	methods[102].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getDamageType;

	methods[103].name = "allDamageTypes";
	methods[103].signature = "()J";
	methods[103].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allDamageTypes;

	methods[104].name = "initDamageTypes";
	methods[104].signature = "()V";
	methods[104].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initDamageTypes;

	methods[105].name = "DamageTypeIndependent_get";
	methods[105].signature = "()J";
	methods[105].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeIndependent_1get;

	methods[106].name = "Explosive_get";
	methods[106].signature = "()J";
	methods[106].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Explosive_1get;

	methods[107].name = "Concussive_get";
	methods[107].signature = "()J";
	methods[107].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Concussive_1get;

	methods[108].name = "DamageTypeNormal_get";
	methods[108].signature = "()J";
	methods[108].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeNormal_1get;

	methods[109].name = "Ignore_Armor_get";
	methods[109].signature = "()J";
	methods[109].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Ignore_1Armor_1get;

	methods[110].name = "DamageTypeNone_get";
	methods[110].signature = "()J";
	methods[110].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeNone_1get;

	methods[111].name = "DamageTypeUnknown_get";
	methods[111].signature = "()J";
	methods[111].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeUnknown_1get;

	methods[112].name = "new_SWIG_Error__SWIG_0";
	methods[112].signature = "()J";
	methods[112].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_10;

	methods[113].name = "new_SWIG_Error__SWIG_1";
	methods[113].signature = "(I)J";
	methods[113].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_11;

	methods[114].name = "new_SWIG_Error__SWIG_2";
	methods[114].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;)J";
	methods[114].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Error_1_1SWIG_12;

	methods[115].name = "SWIG_Error_opAssign";
	methods[115].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;JLorg/bwapi/bridge/swig/SWIG_Error;)J";
	methods[115].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opAssign;

	methods[116].name = "SWIG_Error_opEquals";
	methods[116].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[116].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opEquals;

	methods[117].name = "SWIG_Error_opNotEquals";
	methods[117].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[117].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opNotEquals;

	methods[118].name = "SWIG_Error_opLessThan";
	methods[118].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[118].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1opLessThan;

	methods[119].name = "SWIG_Error_getID";
	methods[119].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;)I";
	methods[119].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1getID;

	methods[120].name = "SWIG_Error_toErrorString";
	methods[120].signature = "(JLorg/bwapi/bridge/swig/SWIG_Error;)Ljava/lang/String;";
	methods[120].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Error_1toErrorString;

	methods[121].name = "delete_SWIG_Error";
	methods[121].signature = "(J)V";
	methods[121].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Error;

	methods[122].name = "allErrors";
	methods[122].signature = "()J";
	methods[122].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allErrors;

	methods[123].name = "initErrors";
	methods[123].signature = "()V";
	methods[123].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initErrors;

	methods[124].name = "Unit_Does_Not_Exist_get";
	methods[124].signature = "()J";
	methods[124].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Does_1Not_1Exist_1get;

	methods[125].name = "Unit_Not_Visible_get";
	methods[125].signature = "()J";
	methods[125].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Not_1Visible_1get;

	methods[126].name = "Unit_Not_Owned_get";
	methods[126].signature = "()J";
	methods[126].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Not_1Owned_1get;

	methods[127].name = "Unit_Busy_get";
	methods[127].signature = "()J";
	methods[127].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unit_1Busy_1get;

	methods[128].name = "Incompatible_UnitType_get";
	methods[128].signature = "()J";
	methods[128].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Incompatible_1UnitType_1get;

	methods[129].name = "Incompatible_TechType_get";
	methods[129].signature = "()J";
	methods[129].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Incompatible_1TechType_1get;

	methods[130].name = "Already_Researched_get";
	methods[130].signature = "()J";
	methods[130].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Already_1Researched_1get;

	methods[131].name = "Fully_Upgraded_get";
	methods[131].signature = "()J";
	methods[131].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Fully_1Upgraded_1get;

	methods[132].name = "Insufficient_Minerals_get";
	methods[132].signature = "()J";
	methods[132].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Minerals_1get;

	methods[133].name = "Insufficient_Gas_get";
	methods[133].signature = "()J";
	methods[133].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Gas_1get;

	methods[134].name = "Insufficient_Supply_get";
	methods[134].signature = "()J";
	methods[134].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Supply_1get;

	methods[135].name = "Insufficient_Energy_get";
	methods[135].signature = "()J";
	methods[135].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Energy_1get;

	methods[136].name = "Insufficient_Tech_get";
	methods[136].signature = "()J";
	methods[136].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Tech_1get;

	methods[137].name = "Insufficient_Ammo_get";
	methods[137].signature = "()J";
	methods[137].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Ammo_1get;

	methods[138].name = "Insufficient_Space_get";
	methods[138].signature = "()J";
	methods[138].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Insufficient_1Space_1get;

	methods[139].name = "Unbuildable_Location_get";
	methods[139].signature = "()J";
	methods[139].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unbuildable_1Location_1get;

	methods[140].name = "Out_Of_Range_get";
	methods[140].signature = "()J";
	methods[140].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Out_1Of_1Range_1get;

	methods[141].name = "Unable_To_Hit_get";
	methods[141].signature = "()J";
	methods[141].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unable_1To_1Hit_1get;

	methods[142].name = "Access_Denied_get";
	methods[142].signature = "()J";
	methods[142].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Access_1Denied_1get;

	methods[143].name = "ErrorNone_get";
	methods[143].signature = "()J";
	methods[143].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorNone_1get;

	methods[144].name = "ErrorUnknown_get";
	methods[144].signature = "()J";
	methods[144].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorUnknown_1get;

	methods[145].name = "new_SWIG_ExplosionType__SWIG_0";
	methods[145].signature = "()J";
	methods[145].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_10;

	methods[146].name = "new_SWIG_ExplosionType__SWIG_1";
	methods[146].signature = "(I)J";
	methods[146].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_11;

	methods[147].name = "new_SWIG_ExplosionType__SWIG_2";
	methods[147].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)J";
	methods[147].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1ExplosionType_1_1SWIG_12;

	methods[148].name = "SWIG_ExplosionType_opAssign";
	methods[148].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)J";
	methods[148].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opAssign;

	methods[149].name = "SWIG_ExplosionType_opEquals";
	methods[149].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[149].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opEquals;

	methods[150].name = "SWIG_ExplosionType_opNotEquals";
	methods[150].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[150].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opNotEquals;

	methods[151].name = "SWIG_ExplosionType_opLessThan";
	methods[151].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[151].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1opLessThan;

	methods[152].name = "SWIG_ExplosionType_getID";
	methods[152].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)I";
	methods[152].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1getID;

	methods[153].name = "SWIG_ExplosionType_getName";
	methods[153].signature = "(JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Ljava/lang/String;";
	methods[153].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1ExplosionType_1getName;

	methods[154].name = "delete_SWIG_ExplosionType";
	methods[154].signature = "(J)V";
	methods[154].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1ExplosionType;

	methods[155].name = "getExplosionType";
	methods[155].signature = "(J)J";
	methods[155].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getExplosionType;

	methods[156].name = "allExplosionTypes";
	methods[156].signature = "()J";
	methods[156].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allExplosionTypes;

	methods[157].name = "initExplosionTypes";
	methods[157].signature = "()V";
	methods[157].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initExplosionTypes;

	methods[158].name = "ExplosionTypeNone_get";
	methods[158].signature = "()J";
	methods[158].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeNone_1get;

	methods[159].name = "ExplosionTypeNormal_get";
	methods[159].signature = "()J";
	methods[159].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeNormal_1get;

	methods[160].name = "Radial_Splash_get";
	methods[160].signature = "()J";
	methods[160].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Radial_1Splash_1get;

	methods[161].name = "Enemy_Splash_get";
	methods[161].signature = "()J";
	methods[161].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Enemy_1Splash_1get;

	methods[162].name = "ExplosionTypeLockdown_get";
	methods[162].signature = "()J";
	methods[162].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeLockdown_1get;

	methods[163].name = "Nuclear_Missile_get";
	methods[163].signature = "()J";
	methods[163].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Nuclear_1Missile_1get;

	methods[164].name = "ExplosionTypeParasite_get";
	methods[164].signature = "()J";
	methods[164].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeParasite_1get;

	methods[165].name = "Broodlings_get";
	methods[165].signature = "()J";
	methods[165].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Broodlings_1get;

	methods[166].name = "ExplosionTypeEMP_Shockwave_get";
	methods[166].signature = "()J";
	methods[166].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeEMP_1Shockwave_1get;

	methods[167].name = "ExplosionTypeIrradiate_get";
	methods[167].signature = "()J";
	methods[167].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeIrradiate_1get;

	methods[168].name = "ExplosionTypeEnsnare_get";
	methods[168].signature = "()J";
	methods[168].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeEnsnare_1get;

	methods[169].name = "ExplosionTypePlague_get";
	methods[169].signature = "()J";
	methods[169].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypePlague_1get;

	methods[170].name = "ExplosionTypeStasis_Field_get";
	methods[170].signature = "()J";
	methods[170].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeStasis_1Field_1get;

	methods[171].name = "ExplosionTypeDark_Swarm_get";
	methods[171].signature = "()J";
	methods[171].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeDark_1Swarm_1get;

	methods[172].name = "ExplosionTypeConsume_get";
	methods[172].signature = "()J";
	methods[172].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeConsume_1get;

	methods[173].name = "ExplosionTypeYamato_Gun_get";
	methods[173].signature = "()J";
	methods[173].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeYamato_1Gun_1get;

	methods[174].name = "ExplosionTypeRestoration_get";
	methods[174].signature = "()J";
	methods[174].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeRestoration_1get;

	methods[175].name = "ExplosionTypeDisruption_Web_get";
	methods[175].signature = "()J";
	methods[175].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeDisruption_1Web_1get;

	methods[176].name = "ExplosionTypeCorrosive_Acid_get";
	methods[176].signature = "()J";
	methods[176].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeCorrosive_1Acid_1get;

	methods[177].name = "ExplosionTypeMind_Control_get";
	methods[177].signature = "()J";
	methods[177].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeMind_1Control_1get;

	methods[178].name = "ExplosionTypeFeedback_get";
	methods[178].signature = "()J";
	methods[178].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeFeedback_1get;

	methods[179].name = "ExplosionTypeOptical_Flare_get";
	methods[179].signature = "()J";
	methods[179].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeOptical_1Flare_1get;

	methods[180].name = "ExplosionTypeMaelstrom_get";
	methods[180].signature = "()J";
	methods[180].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeMaelstrom_1get;

	methods[181].name = "Air_Splash_get";
	methods[181].signature = "()J";
	methods[181].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Air_1Splash_1get;

	methods[182].name = "ExplosionTypeUnknown_get";
	methods[182].signature = "()J";
	methods[182].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeUnknown_1get;

	methods[183].name = "FLAG_COUNT_get";
	methods[183].signature = "()I";
	methods[183].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_FLAG_1COUNT_1get;

	methods[184].name = "SWIG_Force_getName";
	methods[184].signature = "(JLorg/bwapi/bridge/swig/SWIG_Force;)Ljava/lang/String;";
	methods[184].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Force_1getName;

	methods[185].name = "SWIG_Force_getPlayers";
	methods[185].signature = "(JLorg/bwapi/bridge/swig/SWIG_Force;)J";
	methods[185].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Force_1getPlayers;

	methods[186].name = "delete_SWIG_Force";
	methods[186].signature = "(J)V";
	methods[186].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Force;

	methods[187].name = "SWIG_Game_getForces";
	methods[187].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[187].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getForces;

	methods[188].name = "SWIG_Game_getPlayers";
	methods[188].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[188].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getPlayers;

	methods[189].name = "SWIG_Game_getAllUnits";
	methods[189].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[189].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getAllUnits;

	methods[190].name = "SWIG_Game_getMinerals";
	methods[190].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[190].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMinerals;

	methods[191].name = "SWIG_Game_getGeysers";
	methods[191].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[191].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getGeysers;

	methods[192].name = "SWIG_Game_getNeutralUnits";
	methods[192].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[192].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getNeutralUnits;

	methods[193].name = "SWIG_Game_getStaticMinerals";
	methods[193].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[193].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticMinerals;

	methods[194].name = "SWIG_Game_getStaticGeysers";
	methods[194].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[194].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticGeysers;

	methods[195].name = "SWIG_Game_getStaticNeutralUnits";
	methods[195].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[195].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStaticNeutralUnits;

	methods[196].name = "SWIG_Game_getLatency";
	methods[196].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[196].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getLatency;

	methods[197].name = "SWIG_Game_getFrameCount";
	methods[197].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[197].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getFrameCount;

	methods[198].name = "SWIG_Game_getMouseX";
	methods[198].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[198].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMouseX;

	methods[199].name = "SWIG_Game_getMouseY";
	methods[199].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[199].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMouseY;

	methods[200].name = "SWIG_Game_getScreenX";
	methods[200].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[200].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getScreenX;

	methods[201].name = "SWIG_Game_getScreenY";
	methods[201].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[201].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getScreenY;

	methods[202].name = "SWIG_Game_isFlagEnabled";
	methods[202].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;I)Z";
	methods[202].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isFlagEnabled;

	methods[203].name = "SWIG_Game_enableFlag";
	methods[203].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;I)V";
	methods[203].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1enableFlag;

	methods[204].name = "SWIG_Game_unitsOnTile";
	methods[204].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)J";
	methods[204].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1unitsOnTile;

	methods[205].name = "SWIG_Game_getLastError";
	methods[205].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[205].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getLastError;

	methods[206].name = "SWIG_Game_mapWidth";
	methods[206].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[206].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapWidth;

	methods[207].name = "SWIG_Game_mapHeight";
	methods[207].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[207].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapHeight;

	methods[208].name = "SWIG_Game_mapFilename";
	methods[208].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)Ljava/lang/String;";
	methods[208].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapFilename;

	methods[209].name = "SWIG_Game_mapName";
	methods[209].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)Ljava/lang/String;";
	methods[209].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1mapName;

	methods[210].name = "SWIG_Game_getMapHash";
	methods[210].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)I";
	methods[210].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getMapHash;

	methods[211].name = "SWIG_Game_getGroundHeight";
	methods[211].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)I";
	methods[211].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getGroundHeight;

	methods[212].name = "SWIG_Game_isWalkable";
	methods[212].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)Z";
	methods[212].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isWalkable;

	methods[213].name = "SWIG_Game_isBuildable__SWIG_0";
	methods[213].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)Z";
	methods[213].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isBuildable_1_1SWIG_10;

	methods[214].name = "SWIG_Game_isVisible__SWIG_0";
	methods[214].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)Z";
	methods[214].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isVisible_1_1SWIG_10;

	methods[215].name = "SWIG_Game_isExplored__SWIG_0";
	methods[215].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)Z";
	methods[215].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isExplored_1_1SWIG_10;

	methods[216].name = "SWIG_Game_hasCreep__SWIG_0";
	methods[216].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;II)Z";
	methods[216].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasCreep_1_1SWIG_10;

	methods[217].name = "SWIG_Game_hasPower__SWIG_0";
	methods[217].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIII)Z";
	methods[217].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasPower_1_1SWIG_10;

	methods[218].name = "SWIG_Game_isBuildable__SWIG_1";
	methods[218].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;J)Z";
	methods[218].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isBuildable_1_1SWIG_11;

	methods[219].name = "SWIG_Game_isVisible__SWIG_1";
	methods[219].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;J)Z";
	methods[219].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isVisible_1_1SWIG_11;

	methods[220].name = "SWIG_Game_isExplored__SWIG_1";
	methods[220].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;J)Z";
	methods[220].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isExplored_1_1SWIG_11;

	methods[221].name = "SWIG_Game_hasCreep__SWIG_1";
	methods[221].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;J)Z";
	methods[221].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasCreep_1_1SWIG_11;

	methods[222].name = "SWIG_Game_hasPower__SWIG_1";
	methods[222].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;JII)Z";
	methods[222].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1hasPower_1_1SWIG_11;

	methods[223].name = "SWIG_Game_canBuildHere";
	methods[223].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;JLorg/bwapi/bridge/swig/SWIG_Unit;JJLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[223].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canBuildHere;

	methods[224].name = "SWIG_Game_canMake";
	methods[224].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[224].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canMake;

	methods[225].name = "SWIG_Game_canResearch";
	methods[225].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;JLorg/bwapi/bridge/swig/SWIG_Unit;J)Z";
	methods[225].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canResearch;

	methods[226].name = "SWIG_Game_canUpgrade";
	methods[226].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;JLorg/bwapi/bridge/swig/SWIG_Unit;J)Z";
	methods[226].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1canUpgrade;

	methods[227].name = "SWIG_Game_getStartLocations";
	methods[227].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[227].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getStartLocations;

	methods[228].name = "SWIG_Game_printf";
	methods[228].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;Ljava/lang/String;)V";
	methods[228].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1printf;

	methods[229].name = "SWIG_Game_sendText";
	methods[229].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;Ljava/lang/String;)V";
	methods[229].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1sendText;

	methods[230].name = "SWIG_Game_changeRace";
	methods[230].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;J)V";
	methods[230].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1changeRace;

	methods[231].name = "SWIG_Game_isMultiplayer";
	methods[231].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)Z";
	methods[231].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isMultiplayer;

	methods[232].name = "SWIG_Game_isPaused";
	methods[232].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)Z";
	methods[232].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isPaused;

	methods[233].name = "SWIG_Game_isReplay";
	methods[233].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)Z";
	methods[233].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1isReplay;

	methods[234].name = "SWIG_Game_startGame";
	methods[234].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[234].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1startGame;

	methods[235].name = "SWIG_Game_pauseGame";
	methods[235].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[235].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1pauseGame;

	methods[236].name = "SWIG_Game_resumeGame";
	methods[236].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[236].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1resumeGame;

	methods[237].name = "SWIG_Game_leaveGame";
	methods[237].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[237].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1leaveGame;

	methods[238].name = "SWIG_Game_restartGame";
	methods[238].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[238].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1restartGame;

	methods[239].name = "SWIG_Game_setLocalSpeed__SWIG_0";
	methods[239].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;I)V";
	methods[239].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1setLocalSpeed_1_1SWIG_10;

	methods[240].name = "SWIG_Game_setLocalSpeed__SWIG_1";
	methods[240].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[240].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1setLocalSpeed_1_1SWIG_11;

	methods[241].name = "SWIG_Game_getSelectedUnits";
	methods[241].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[241].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1getSelectedUnits;

	methods[242].name = "SWIG_Game_self";
	methods[242].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[242].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1self;

	methods[243].name = "SWIG_Game_enemy";
	methods[243].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)J";
	methods[243].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1enemy;

	methods[244].name = "SWIG_Game_drawText";
	methods[244].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIILjava/lang/String;)V";
	methods[244].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawText;

	methods[245].name = "SWIG_Game_drawTextMap";
	methods[245].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IILjava/lang/String;)V";
	methods[245].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextMap;

	methods[246].name = "SWIG_Game_drawTextMouse";
	methods[246].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IILjava/lang/String;)V";
	methods[246].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextMouse;

	methods[247].name = "SWIG_Game_drawTextScreen";
	methods[247].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IILjava/lang/String;)V";
	methods[247].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTextScreen;

	methods[248].name = "SWIG_Game_drawBox__SWIG_0";
	methods[248].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[248].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBox_1_1SWIG_10;

	methods[249].name = "SWIG_Game_drawBox__SWIG_1";
	methods[249].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[249].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBox_1_1SWIG_11;

	methods[250].name = "SWIG_Game_drawBoxMap__SWIG_0";
	methods[250].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[250].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMap_1_1SWIG_10;

	methods[251].name = "SWIG_Game_drawBoxMap__SWIG_1";
	methods[251].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[251].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMap_1_1SWIG_11;

	methods[252].name = "SWIG_Game_drawBoxMouse__SWIG_0";
	methods[252].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[252].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMouse_1_1SWIG_10;

	methods[253].name = "SWIG_Game_drawBoxMouse__SWIG_1";
	methods[253].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[253].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxMouse_1_1SWIG_11;

	methods[254].name = "SWIG_Game_drawBoxScreen__SWIG_0";
	methods[254].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[254].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxScreen_1_1SWIG_10;

	methods[255].name = "SWIG_Game_drawBoxScreen__SWIG_1";
	methods[255].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[255].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawBoxScreen_1_1SWIG_11;

	methods[256].name = "SWIG_Game_drawTriangle__SWIG_0";
	methods[256].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[256].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangle_1_1SWIG_10;

	methods[257].name = "SWIG_Game_drawTriangle__SWIG_1";
	methods[257].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[257].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangle_1_1SWIG_11;

	methods[258].name = "SWIG_Game_drawTriangleMap__SWIG_0";
	methods[258].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[258].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMap_1_1SWIG_10;

	methods[259].name = "SWIG_Game_drawTriangleMap__SWIG_1";
	methods[259].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[259].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMap_1_1SWIG_11;

	methods[260].name = "SWIG_Game_drawTriangleMouse__SWIG_0";
	methods[260].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[260].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMouse_1_1SWIG_10;

	methods[261].name = "SWIG_Game_drawTriangleMouse__SWIG_1";
	methods[261].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[261].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleMouse_1_1SWIG_11;

	methods[262].name = "SWIG_Game_drawTriangleScreen__SWIG_0";
	methods[262].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[262].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleScreen_1_1SWIG_10;

	methods[263].name = "SWIG_Game_drawTriangleScreen__SWIG_1";
	methods[263].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[263].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawTriangleScreen_1_1SWIG_11;

	methods[264].name = "SWIG_Game_drawCircle__SWIG_0";
	methods[264].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[264].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircle_1_1SWIG_10;

	methods[265].name = "SWIG_Game_drawCircle__SWIG_1";
	methods[265].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[265].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircle_1_1SWIG_11;

	methods[266].name = "SWIG_Game_drawCircleMap__SWIG_0";
	methods[266].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[266].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMap_1_1SWIG_10;

	methods[267].name = "SWIG_Game_drawCircleMap__SWIG_1";
	methods[267].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[267].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMap_1_1SWIG_11;

	methods[268].name = "SWIG_Game_drawCircleMouse__SWIG_0";
	methods[268].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[268].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMouse_1_1SWIG_10;

	methods[269].name = "SWIG_Game_drawCircleMouse__SWIG_1";
	methods[269].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[269].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleMouse_1_1SWIG_11;

	methods[270].name = "SWIG_Game_drawCircleScreen__SWIG_0";
	methods[270].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[270].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleScreen_1_1SWIG_10;

	methods[271].name = "SWIG_Game_drawCircleScreen__SWIG_1";
	methods[271].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[271].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawCircleScreen_1_1SWIG_11;

	methods[272].name = "SWIG_Game_drawEllipse__SWIG_0";
	methods[272].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[272].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipse_1_1SWIG_10;

	methods[273].name = "SWIG_Game_drawEllipse__SWIG_1";
	methods[273].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[273].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipse_1_1SWIG_11;

	methods[274].name = "SWIG_Game_drawEllipseMap__SWIG_0";
	methods[274].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[274].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMap_1_1SWIG_10;

	methods[275].name = "SWIG_Game_drawEllipseMap__SWIG_1";
	methods[275].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[275].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMap_1_1SWIG_11;

	methods[276].name = "SWIG_Game_drawEllipseMouse__SWIG_0";
	methods[276].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[276].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMouse_1_1SWIG_10;

	methods[277].name = "SWIG_Game_drawEllipseMouse__SWIG_1";
	methods[277].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[277].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseMouse_1_1SWIG_11;

	methods[278].name = "SWIG_Game_drawEllipseScreen__SWIG_0";
	methods[278].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;Z)V";
	methods[278].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseScreen_1_1SWIG_10;

	methods[279].name = "SWIG_Game_drawEllipseScreen__SWIG_1";
	methods[279].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[279].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawEllipseScreen_1_1SWIG_11;

	methods[280].name = "SWIG_Game_drawDot";
	methods[280].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[280].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDot;

	methods[281].name = "SWIG_Game_drawDotMap";
	methods[281].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[281].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotMap;

	methods[282].name = "SWIG_Game_drawDotMouse";
	methods[282].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[282].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotMouse;

	methods[283].name = "SWIG_Game_drawDotScreen";
	methods[283].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[283].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawDotScreen;

	methods[284].name = "SWIG_Game_drawLine";
	methods[284].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[284].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLine;

	methods[285].name = "SWIG_Game_drawLineMap";
	methods[285].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[285].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineMap;

	methods[286].name = "SWIG_Game_drawLineMouse";
	methods[286].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[286].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineMouse;

	methods[287].name = "SWIG_Game_drawLineScreen";
	methods[287].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;IIIIJLorg/bwapi/bridge/swig/SWIG_Color;)V";
	methods[287].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Game_1drawLineScreen;

	methods[288].name = "delete_SWIG_Game";
	methods[288].signature = "(J)V";
	methods[288].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Game;

	methods[289].name = "Broodwar_set";
	methods[289].signature = "(JLorg/bwapi/bridge/swig/SWIG_Game;)V";
	methods[289].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Broodwar_1set;

	methods[290].name = "Broodwar_get";
	methods[290].signature = "()J";
	methods[290].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Broodwar_1get;

	methods[291].name = "new_SWIG_Order__SWIG_0";
	methods[291].signature = "()J";
	methods[291].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_10;

	methods[292].name = "new_SWIG_Order__SWIG_1";
	methods[292].signature = "(I)J";
	methods[292].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_11;

	methods[293].name = "new_SWIG_Order__SWIG_2";
	methods[293].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;)J";
	methods[293].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Order_1_1SWIG_12;

	methods[294].name = "SWIG_Order_opAssign";
	methods[294].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;JLorg/bwapi/bridge/swig/SWIG_Order;)J";
	methods[294].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opAssign;

	methods[295].name = "SWIG_Order_opEquals";
	methods[295].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[295].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opEquals;

	methods[296].name = "SWIG_Order_opNotEquals";
	methods[296].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[296].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opNotEquals;

	methods[297].name = "SWIG_Order_opLessThan";
	methods[297].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[297].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1opLessThan;

	methods[298].name = "SWIG_Order_getID";
	methods[298].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;)I";
	methods[298].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1getID;

	methods[299].name = "SWIG_Order_getName";
	methods[299].signature = "(JLorg/bwapi/bridge/swig/SWIG_Order;)Ljava/lang/String;";
	methods[299].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Order_1getName;

	methods[300].name = "delete_SWIG_Order";
	methods[300].signature = "(J)V";
	methods[300].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Order;

	methods[301].name = "getOrder";
	methods[301].signature = "(J)J";
	methods[301].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getOrder;

	methods[302].name = "allOrders";
	methods[302].signature = "()J";
	methods[302].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allOrders;

	methods[303].name = "initOrders";
	methods[303].signature = "()V";
	methods[303].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initOrders;

	methods[304].name = "Die_get";
	methods[304].signature = "()J";
	methods[304].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Die_1get;

	methods[305].name = "Stop_get";
	methods[305].signature = "()J";
	methods[305].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Stop_1get;

	methods[306].name = "Guard_get";
	methods[306].signature = "()J";
	methods[306].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Guard_1get;

	methods[307].name = "PlayerGuard_get";
	methods[307].signature = "()J";
	methods[307].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerGuard_1get;

	methods[308].name = "TurretGuard_get";
	methods[308].signature = "()J";
	methods[308].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TurretGuard_1get;

	methods[309].name = "BunkerGuard_get";
	methods[309].signature = "()J";
	methods[309].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BunkerGuard_1get;

	methods[310].name = "Move_get";
	methods[310].signature = "()J";
	methods[310].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Move_1get;

	methods[311].name = "ReaverStop_get";
	methods[311].signature = "()J";
	methods[311].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReaverStop_1get;

	methods[312].name = "Attack1_get";
	methods[312].signature = "()J";
	methods[312].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Attack1_1get;

	methods[313].name = "Attack2_get";
	methods[313].signature = "()J";
	methods[313].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Attack2_1get;

	methods[314].name = "AttackUnit_get";
	methods[314].signature = "()J";
	methods[314].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackUnit_1get;

	methods[315].name = "AttackFixedRange_get";
	methods[315].signature = "()J";
	methods[315].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackFixedRange_1get;

	methods[316].name = "AttackTile_get";
	methods[316].signature = "()J";
	methods[316].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackTile_1get;

	methods[317].name = "Hover_get";
	methods[317].signature = "()J";
	methods[317].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Hover_1get;

	methods[318].name = "AttackMove_get";
	methods[318].signature = "()J";
	methods[318].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AttackMove_1get;

	methods[319].name = "InfestMine1_get";
	methods[319].signature = "()J";
	methods[319].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine1_1get;

	methods[320].name = "Nothing1_get";
	methods[320].signature = "()J";
	methods[320].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Nothing1_1get;

	methods[321].name = "Powerup1_get";
	methods[321].signature = "()J";
	methods[321].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Powerup1_1get;

	methods[322].name = "TowerGuard_get";
	methods[322].signature = "()J";
	methods[322].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TowerGuard_1get;

	methods[323].name = "TowerAttack_get";
	methods[323].signature = "()J";
	methods[323].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TowerAttack_1get;

	methods[324].name = "VultureMine_get";
	methods[324].signature = "()J";
	methods[324].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_VultureMine_1get;

	methods[325].name = "StayinRange_get";
	methods[325].signature = "()J";
	methods[325].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_StayinRange_1get;

	methods[326].name = "TurretAttack_get";
	methods[326].signature = "()J";
	methods[326].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TurretAttack_1get;

	methods[327].name = "Nothing2_get";
	methods[327].signature = "()J";
	methods[327].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Nothing2_1get;

	methods[328].name = "Nothing3_get";
	methods[328].signature = "()J";
	methods[328].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Nothing3_1get;

	methods[329].name = "DroneStartBuild_get";
	methods[329].signature = "()J";
	methods[329].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DroneStartBuild_1get;

	methods[330].name = "DroneBuild_get";
	methods[330].signature = "()J";
	methods[330].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DroneBuild_1get;

	methods[331].name = "InfestMine2_get";
	methods[331].signature = "()J";
	methods[331].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine2_1get;

	methods[332].name = "InfestMine3_get";
	methods[332].signature = "()J";
	methods[332].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine3_1get;

	methods[333].name = "InfestMine4_get";
	methods[333].signature = "()J";
	methods[333].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InfestMine4_1get;

	methods[334].name = "BuildTerran_get";
	methods[334].signature = "()J";
	methods[334].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildTerran_1get;

	methods[335].name = "BuildProtoss1_get";
	methods[335].signature = "()J";
	methods[335].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildProtoss1_1get;

	methods[336].name = "BuildProtoss2_get";
	methods[336].signature = "()J";
	methods[336].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildProtoss2_1get;

	methods[337].name = "ConstructingBuilding_get";
	methods[337].signature = "()J";
	methods[337].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ConstructingBuilding_1get;

	methods[338].name = "Repair1_get";
	methods[338].signature = "()J";
	methods[338].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Repair1_1get;

	methods[339].name = "Repair2_get";
	methods[339].signature = "()J";
	methods[339].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Repair2_1get;

	methods[340].name = "PlaceAddon_get";
	methods[340].signature = "()J";
	methods[340].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlaceAddon_1get;

	methods[341].name = "BuildAddon_get";
	methods[341].signature = "()J";
	methods[341].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildAddon_1get;

	methods[342].name = "Train_get";
	methods[342].signature = "()J";
	methods[342].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Train_1get;

	methods[343].name = "RallyPoint1_get";
	methods[343].signature = "()J";
	methods[343].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RallyPoint1_1get;

	methods[344].name = "RallyPoint2_get";
	methods[344].signature = "()J";
	methods[344].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RallyPoint2_1get;

	methods[345].name = "ZergBirth_get";
	methods[345].signature = "()J";
	methods[345].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ZergBirth_1get;

	methods[346].name = "Morph1_get";
	methods[346].signature = "()J";
	methods[346].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Morph1_1get;

	methods[347].name = "Morph2_get";
	methods[347].signature = "()J";
	methods[347].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Morph2_1get;

	methods[348].name = "BuildSelf1_get";
	methods[348].signature = "()J";
	methods[348].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildSelf1_1get;

	methods[349].name = "ZergBuildSelf_get";
	methods[349].signature = "()J";
	methods[349].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ZergBuildSelf_1get;

	methods[350].name = "Build5_get";
	methods[350].signature = "()J";
	methods[350].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Build5_1get;

	methods[351].name = "Enternyduscanal_get";
	methods[351].signature = "()J";
	methods[351].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Enternyduscanal_1get;

	methods[352].name = "BuildSelf2_get";
	methods[352].signature = "()J";
	methods[352].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildSelf2_1get;

	methods[353].name = "Follow_get";
	methods[353].signature = "()J";
	methods[353].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Follow_1get;

	methods[354].name = "Carrier_get";
	methods[354].signature = "()J";
	methods[354].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Carrier_1get;

	methods[355].name = "CarrierIgnore1_get";
	methods[355].signature = "()J";
	methods[355].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierIgnore1_1get;

	methods[356].name = "CarrierStop_get";
	methods[356].signature = "()J";
	methods[356].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierStop_1get;

	methods[357].name = "CarrierAttack1_get";
	methods[357].signature = "()J";
	methods[357].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierAttack1_1get;

	methods[358].name = "CarrierAttack2_get";
	methods[358].signature = "()J";
	methods[358].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierAttack2_1get;

	methods[359].name = "CarrierIgnore2_get";
	methods[359].signature = "()J";
	methods[359].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierIgnore2_1get;

	methods[360].name = "CarrierFight_get";
	methods[360].signature = "()J";
	methods[360].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CarrierFight_1get;

	methods[361].name = "HoldPosition1_get";
	methods[361].signature = "()J";
	methods[361].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition1_1get;

	methods[362].name = "Reaver_get";
	methods[362].signature = "()J";
	methods[362].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Reaver_1get;

	methods[363].name = "ReaverAttack1_get";
	methods[363].signature = "()J";
	methods[363].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReaverAttack1_1get;

	methods[364].name = "ReaverAttack2_get";
	methods[364].signature = "()J";
	methods[364].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReaverAttack2_1get;

	methods[365].name = "ReaverFight_get";
	methods[365].signature = "()J";
	methods[365].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReaverFight_1get;

	methods[366].name = "ReaverHold_get";
	methods[366].signature = "()J";
	methods[366].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReaverHold_1get;

	methods[367].name = "TrainFighter_get";
	methods[367].signature = "()J";
	methods[367].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TrainFighter_1get;

	methods[368].name = "StrafeUnit1_get";
	methods[368].signature = "()J";
	methods[368].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_StrafeUnit1_1get;

	methods[369].name = "StrafeUnit2_get";
	methods[369].signature = "()J";
	methods[369].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_StrafeUnit2_1get;

	methods[370].name = "RechargeShields1_get";
	methods[370].signature = "()J";
	methods[370].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RechargeShields1_1get;

	methods[371].name = "Rechargeshields2_get";
	methods[371].signature = "()J";
	methods[371].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Rechargeshields2_1get;

	methods[372].name = "ShieldBattery_get";
	methods[372].signature = "()J";
	methods[372].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ShieldBattery_1get;

	methods[373].name = "Return_get";
	methods[373].signature = "()J";
	methods[373].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Return_1get;

	methods[374].name = "DroneLand_get";
	methods[374].signature = "()J";
	methods[374].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DroneLand_1get;

	methods[375].name = "BuildingLand_get";
	methods[375].signature = "()J";
	methods[375].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildingLand_1get;

	methods[376].name = "BuildingLiftoff_get";
	methods[376].signature = "()J";
	methods[376].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BuildingLiftoff_1get;

	methods[377].name = "DroneLiftoff_get";
	methods[377].signature = "()J";
	methods[377].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DroneLiftoff_1get;

	methods[378].name = "Liftoff_get";
	methods[378].signature = "()J";
	methods[378].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Liftoff_1get;

	methods[379].name = "ResearchTech_get";
	methods[379].signature = "()J";
	methods[379].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ResearchTech_1get;

	methods[380].name = "Upgrade_get";
	methods[380].signature = "()J";
	methods[380].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Upgrade_1get;

	methods[381].name = "Larva_get";
	methods[381].signature = "()J";
	methods[381].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Larva_1get;

	methods[382].name = "SpawningLarva_get";
	methods[382].signature = "()J";
	methods[382].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SpawningLarva_1get;

	methods[383].name = "Harvest1_get";
	methods[383].signature = "()J";
	methods[383].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Harvest1_1get;

	methods[384].name = "Harvest2_get";
	methods[384].signature = "()J";
	methods[384].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Harvest2_1get;

	methods[385].name = "MoveToGas_get";
	methods[385].signature = "()J";
	methods[385].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MoveToGas_1get;

	methods[386].name = "WaitForGas_get";
	methods[386].signature = "()J";
	methods[386].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WaitForGas_1get;

	methods[387].name = "HarvestGas_get";
	methods[387].signature = "()J";
	methods[387].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HarvestGas_1get;

	methods[388].name = "ReturnGas_get";
	methods[388].signature = "()J";
	methods[388].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReturnGas_1get;

	methods[389].name = "MoveToMinerals_get";
	methods[389].signature = "()J";
	methods[389].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MoveToMinerals_1get;

	methods[390].name = "WaitForMinerals_get";
	methods[390].signature = "()J";
	methods[390].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WaitForMinerals_1get;

	methods[391].name = "MiningMinerals_get";
	methods[391].signature = "()J";
	methods[391].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MiningMinerals_1get;

	methods[392].name = "Harvest3_get";
	methods[392].signature = "()J";
	methods[392].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Harvest3_1get;

	methods[393].name = "Harvest4_get";
	methods[393].signature = "()J";
	methods[393].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Harvest4_1get;

	methods[394].name = "ReturnMinerals_get";
	methods[394].signature = "()J";
	methods[394].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ReturnMinerals_1get;

	methods[395].name = "Harvest5_get";
	methods[395].signature = "()J";
	methods[395].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Harvest5_1get;

	methods[396].name = "EnterTransport_get";
	methods[396].signature = "()J";
	methods[396].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_EnterTransport_1get;

	methods[397].name = "Pickup1_get";
	methods[397].signature = "()J";
	methods[397].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Pickup1_1get;

	methods[398].name = "Pickup2_get";
	methods[398].signature = "()J";
	methods[398].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Pickup2_1get;

	methods[399].name = "Pickup3_get";
	methods[399].signature = "()J";
	methods[399].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Pickup3_1get;

	methods[400].name = "Pickup4_get";
	methods[400].signature = "()J";
	methods[400].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Pickup4_1get;

	methods[401].name = "Powerup2_get";
	methods[401].signature = "()J";
	methods[401].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Powerup2_1get;

	methods[402].name = "SiegeMode_get";
	methods[402].signature = "()J";
	methods[402].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SiegeMode_1get;

	methods[403].name = "TankMode_get";
	methods[403].signature = "()J";
	methods[403].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TankMode_1get;

	methods[404].name = "WatchTarget_get";
	methods[404].signature = "()J";
	methods[404].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WatchTarget_1get;

	methods[405].name = "InitCreepGrowth_get";
	methods[405].signature = "()J";
	methods[405].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InitCreepGrowth_1get;

	methods[406].name = "SpreadCreep_get";
	methods[406].signature = "()J";
	methods[406].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SpreadCreep_1get;

	methods[407].name = "StoppingCreepGrowth_get";
	methods[407].signature = "()J";
	methods[407].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_StoppingCreepGrowth_1get;

	methods[408].name = "GuardianAspect_get";
	methods[408].signature = "()J";
	methods[408].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_GuardianAspect_1get;

	methods[409].name = "WarpingArchon_get";
	methods[409].signature = "()J";
	methods[409].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WarpingArchon_1get;

	methods[410].name = "CompletingArchonsummon_get";
	methods[410].signature = "()J";
	methods[410].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CompletingArchonsummon_1get;

	methods[411].name = "HoldPosition2_get";
	methods[411].signature = "()J";
	methods[411].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition2_1get;

	methods[412].name = "HoldPosition3_get";
	methods[412].signature = "()J";
	methods[412].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition3_1get;

	methods[413].name = "Cloak_get";
	methods[413].signature = "()J";
	methods[413].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Cloak_1get;

	methods[414].name = "Decloak_get";
	methods[414].signature = "()J";
	methods[414].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Decloak_1get;

	methods[415].name = "Unload_get";
	methods[415].signature = "()J";
	methods[415].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unload_1get;

	methods[416].name = "MoveUnload_get";
	methods[416].signature = "()J";
	methods[416].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MoveUnload_1get;

	methods[417].name = "FireYamatoGun1_get";
	methods[417].signature = "()J";
	methods[417].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_FireYamatoGun1_1get;

	methods[418].name = "FireYamatoGun2_get";
	methods[418].signature = "()J";
	methods[418].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_FireYamatoGun2_1get;

	methods[419].name = "MagnaPulse_get";
	methods[419].signature = "()J";
	methods[419].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MagnaPulse_1get;

	methods[420].name = "Burrow_get";
	methods[420].signature = "()J";
	methods[420].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Burrow_1get;

	methods[421].name = "Burrowed_get";
	methods[421].signature = "()J";
	methods[421].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Burrowed_1get;

	methods[422].name = "Unburrow_get";
	methods[422].signature = "()J";
	methods[422].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Unburrow_1get;

	methods[423].name = "DarkSwarm_get";
	methods[423].signature = "()J";
	methods[423].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DarkSwarm_1get;

	methods[424].name = "CastParasite_get";
	methods[424].signature = "()J";
	methods[424].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastParasite_1get;

	methods[425].name = "SummonBroodlings_get";
	methods[425].signature = "()J";
	methods[425].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SummonBroodlings_1get;

	methods[426].name = "EmpShockwave_get";
	methods[426].signature = "()J";
	methods[426].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_EmpShockwave_1get;

	methods[427].name = "NukeWait_get";
	methods[427].signature = "()J";
	methods[427].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeWait_1get;

	methods[428].name = "NukeTrain_get";
	methods[428].signature = "()J";
	methods[428].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeTrain_1get;

	methods[429].name = "NukeLaunch_get";
	methods[429].signature = "()J";
	methods[429].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeLaunch_1get;

	methods[430].name = "NukePaint_get";
	methods[430].signature = "()J";
	methods[430].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukePaint_1get;

	methods[431].name = "NukeUnit_get";
	methods[431].signature = "()J";
	methods[431].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeUnit_1get;

	methods[432].name = "NukeGround_get";
	methods[432].signature = "()J";
	methods[432].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeGround_1get;

	methods[433].name = "NukeTrack_get";
	methods[433].signature = "()J";
	methods[433].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NukeTrack_1get;

	methods[434].name = "InitArbiter_get";
	methods[434].signature = "()J";
	methods[434].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InitArbiter_1get;

	methods[435].name = "CloakNearbyUnits_get";
	methods[435].signature = "()J";
	methods[435].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CloakNearbyUnits_1get;

	methods[436].name = "PlaceMine_get";
	methods[436].signature = "()J";
	methods[436].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlaceMine_1get;

	methods[437].name = "Rightclickaction_get";
	methods[437].signature = "()J";
	methods[437].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Rightclickaction_1get;

	methods[438].name = "SapUnit_get";
	methods[438].signature = "()J";
	methods[438].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SapUnit_1get;

	methods[439].name = "SapLocation_get";
	methods[439].signature = "()J";
	methods[439].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SapLocation_1get;

	methods[440].name = "HoldPosition4_get";
	methods[440].signature = "()J";
	methods[440].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HoldPosition4_1get;

	methods[441].name = "Teleport_get";
	methods[441].signature = "()J";
	methods[441].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Teleport_1get;

	methods[442].name = "TeleporttoLocation_get";
	methods[442].signature = "()J";
	methods[442].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TeleporttoLocation_1get;

	methods[443].name = "PlaceScanner_get";
	methods[443].signature = "()J";
	methods[443].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlaceScanner_1get;

	methods[444].name = "Scanner_get";
	methods[444].signature = "()J";
	methods[444].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Scanner_1get;

	methods[445].name = "DefensiveMatrix_get";
	methods[445].signature = "()J";
	methods[445].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DefensiveMatrix_1get;

	methods[446].name = "PsiStorm_get";
	methods[446].signature = "()J";
	methods[446].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PsiStorm_1get;

	methods[447].name = "OrderIrradiate_get";
	methods[447].signature = "()J";
	methods[447].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderIrradiate_1get;

	methods[448].name = "OrderPlague_get";
	methods[448].signature = "()J";
	methods[448].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderPlague_1get;

	methods[449].name = "OrderConsume_get";
	methods[449].signature = "()J";
	methods[449].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderConsume_1get;

	methods[450].name = "OrderEnsnare_get";
	methods[450].signature = "()J";
	methods[450].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderEnsnare_1get;

	methods[451].name = "StasisField_get";
	methods[451].signature = "()J";
	methods[451].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_StasisField_1get;

	methods[452].name = "Hallucination1_get";
	methods[452].signature = "()J";
	methods[452].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination1_1get;

	methods[453].name = "Hallucination2_get";
	methods[453].signature = "()J";
	methods[453].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination2_1get;

	methods[454].name = "ResetCollision1_get";
	methods[454].signature = "()J";
	methods[454].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ResetCollision1_1get;

	methods[455].name = "ResetCollision2_get";
	methods[455].signature = "()J";
	methods[455].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ResetCollision2_1get;

	methods[456].name = "Patrol_get";
	methods[456].signature = "()J";
	methods[456].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Patrol_1get;

	methods[457].name = "CTFCOPInit_get";
	methods[457].signature = "()J";
	methods[457].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOPInit_1get;

	methods[458].name = "CTFCOP1_get";
	methods[458].signature = "()J";
	methods[458].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOP1_1get;

	methods[459].name = "CTFCOP2_get";
	methods[459].signature = "()J";
	methods[459].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CTFCOP2_1get;

	methods[460].name = "ComputerAI_get";
	methods[460].signature = "()J";
	methods[460].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ComputerAI_1get;

	methods[461].name = "AtkMoveEP_get";
	methods[461].signature = "()J";
	methods[461].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AtkMoveEP_1get;

	methods[462].name = "HarassMove_get";
	methods[462].signature = "()J";
	methods[462].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HarassMove_1get;

	methods[463].name = "AIPatrol_get";
	methods[463].signature = "()J";
	methods[463].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_AIPatrol_1get;

	methods[464].name = "GuardPost_get";
	methods[464].signature = "()J";
	methods[464].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_GuardPost_1get;

	methods[465].name = "RescuePassive_get";
	methods[465].signature = "()J";
	methods[465].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RescuePassive_1get;

	methods[466].name = "OrderNeutral_get";
	methods[466].signature = "()J";
	methods[466].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderNeutral_1get;

	methods[467].name = "ComputerReturn_get";
	methods[467].signature = "()J";
	methods[467].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ComputerReturn_1get;

	methods[468].name = "InitPsiProvider_get";
	methods[468].signature = "()J";
	methods[468].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_InitPsiProvider_1get;

	methods[469].name = "SelfDestrucing_get";
	methods[469].signature = "()J";
	methods[469].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SelfDestrucing_1get;

	methods[470].name = "Critter_get";
	methods[470].signature = "()J";
	methods[470].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1get;

	methods[471].name = "HiddenGun_get";
	methods[471].signature = "()J";
	methods[471].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HiddenGun_1get;

	methods[472].name = "OpenDoor_get";
	methods[472].signature = "()J";
	methods[472].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OpenDoor_1get;

	methods[473].name = "CloseDoor_get";
	methods[473].signature = "()J";
	methods[473].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CloseDoor_1get;

	methods[474].name = "HideTrap_get";
	methods[474].signature = "()J";
	methods[474].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HideTrap_1get;

	methods[475].name = "RevealTrap_get";
	methods[475].signature = "()J";
	methods[475].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RevealTrap_1get;

	methods[476].name = "Enabledoodad_get";
	methods[476].signature = "()J";
	methods[476].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Enabledoodad_1get;

	methods[477].name = "Disabledoodad_get";
	methods[477].signature = "()J";
	methods[477].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Disabledoodad_1get;

	methods[478].name = "Warpin_get";
	methods[478].signature = "()J";
	methods[478].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Warpin_1get;

	methods[479].name = "Medic_get";
	methods[479].signature = "()J";
	methods[479].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Medic_1get;

	methods[480].name = "MedicHeal1_get";
	methods[480].signature = "()J";
	methods[480].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MedicHeal1_1get;

	methods[481].name = "HealMove_get";
	methods[481].signature = "()J";
	methods[481].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HealMove_1get;

	methods[482].name = "MedicHoldPosition_get";
	methods[482].signature = "()J";
	methods[482].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MedicHoldPosition_1get;

	methods[483].name = "MedicHeal2_get";
	methods[483].signature = "()J";
	methods[483].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_MedicHeal2_1get;

	methods[484].name = "OrderRestoration_get";
	methods[484].signature = "()J";
	methods[484].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderRestoration_1get;

	methods[485].name = "CastDisruptionWeb_get";
	methods[485].signature = "()J";
	methods[485].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastDisruptionWeb_1get;

	methods[486].name = "CastMindControl_get";
	methods[486].signature = "()J";
	methods[486].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastMindControl_1get;

	methods[487].name = "WarpingDarkArchon_get";
	methods[487].signature = "()J";
	methods[487].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WarpingDarkArchon_1get;

	methods[488].name = "CastFeedback_get";
	methods[488].signature = "()J";
	methods[488].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastFeedback_1get;

	methods[489].name = "CastOpticalFlare_get";
	methods[489].signature = "()J";
	methods[489].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastOpticalFlare_1get;

	methods[490].name = "CastMaelstrom_get";
	methods[490].signature = "()J";
	methods[490].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_CastMaelstrom_1get;

	methods[491].name = "JunkYardDog_get";
	methods[491].signature = "()J";
	methods[491].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_JunkYardDog_1get;

	methods[492].name = "Fatal_get";
	methods[492].signature = "()J";
	methods[492].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Fatal_1get;

	methods[493].name = "OrderNone_get";
	methods[493].signature = "()J";
	methods[493].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderNone_1get;

	methods[494].name = "OrderUnknown_get";
	methods[494].signature = "()J";
	methods[494].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderUnknown_1get;

	methods[495].name = "SWIG_Player_getID";
	methods[495].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[495].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getID;

	methods[496].name = "SWIG_Player_getName";
	methods[496].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)Ljava/lang/String;";
	methods[496].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getName;

	methods[497].name = "SWIG_Player_getUnits";
	methods[497].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[497].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getUnits;

	methods[498].name = "SWIG_Player_getRace";
	methods[498].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[498].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getRace;

	methods[499].name = "SWIG_Player_playerType";
	methods[499].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[499].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1playerType;

	methods[500].name = "SWIG_Player_getForce";
	methods[500].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[500].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getForce;

	methods[501].name = "SWIG_Player_isAlly";
	methods[501].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[501].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isAlly;

	methods[502].name = "SWIG_Player_isEnemy";
	methods[502].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[502].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isEnemy;

	methods[503].name = "SWIG_Player_isNeutral";
	methods[503].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[503].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isNeutral;

	methods[504].name = "SWIG_Player_getStartLocation";
	methods[504].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[504].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getStartLocation;

	methods[505].name = "SWIG_Player_leftGame";
	methods[505].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[505].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1leftGame;

	methods[506].name = "SWIG_Player_minerals";
	methods[506].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[506].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1minerals;

	methods[507].name = "SWIG_Player_gas";
	methods[507].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[507].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1gas;

	methods[508].name = "SWIG_Player_cumulativeMinerals";
	methods[508].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[508].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1cumulativeMinerals;

	methods[509].name = "SWIG_Player_cumulativeGas";
	methods[509].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[509].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1cumulativeGas;

	methods[510].name = "SWIG_Player_supplyTotal__SWIG_0";
	methods[510].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[510].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyTotal_1_1SWIG_10;

	methods[511].name = "SWIG_Player_supplyUsed__SWIG_0";
	methods[511].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)I";
	methods[511].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyUsed_1_1SWIG_10;

	methods[512].name = "SWIG_Player_supplyTotal__SWIG_1";
	methods[512].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)I";
	methods[512].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyTotal_1_1SWIG_11;

	methods[513].name = "SWIG_Player_supplyUsed__SWIG_1";
	methods[513].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)I";
	methods[513].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1supplyUsed_1_1SWIG_11;

	methods[514].name = "SWIG_Player_allUnitCount";
	methods[514].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[514].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1allUnitCount;

	methods[515].name = "SWIG_Player_completedUnitCount";
	methods[515].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[515].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1completedUnitCount;

	methods[516].name = "SWIG_Player_incompleteUnitCount";
	methods[516].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[516].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1incompleteUnitCount;

	methods[517].name = "SWIG_Player_deadUnitCount";
	methods[517].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[517].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1deadUnitCount;

	methods[518].name = "SWIG_Player_killedUnitCount";
	methods[518].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[518].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1killedUnitCount;

	methods[519].name = "SWIG_Player_getUpgradeLevel";
	methods[519].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)I";
	methods[519].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1getUpgradeLevel;

	methods[520].name = "SWIG_Player_hasResearched";
	methods[520].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)Z";
	methods[520].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1hasResearched;

	methods[521].name = "SWIG_Player_isResearching";
	methods[521].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)Z";
	methods[521].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isResearching;

	methods[522].name = "SWIG_Player_isUpgrading";
	methods[522].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;J)Z";
	methods[522].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Player_1isUpgrading;

	methods[523].name = "delete_SWIG_Player";
	methods[523].signature = "(J)V";
	methods[523].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Player;

	methods[524].name = "new_SWIG_PlayerType__SWIG_0";
	methods[524].signature = "()J";
	methods[524].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_10;

	methods[525].name = "new_SWIG_PlayerType__SWIG_1";
	methods[525].signature = "(I)J";
	methods[525].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_11;

	methods[526].name = "new_SWIG_PlayerType__SWIG_2";
	methods[526].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;)J";
	methods[526].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1PlayerType_1_1SWIG_12;

	methods[527].name = "SWIG_PlayerType_opAssign";
	methods[527].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)J";
	methods[527].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opAssign;

	methods[528].name = "SWIG_PlayerType_opEquals";
	methods[528].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[528].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opEquals;

	methods[529].name = "SWIG_PlayerType_opNotEquals";
	methods[529].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[529].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opNotEquals;

	methods[530].name = "SWIG_PlayerType_opLessThan";
	methods[530].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[530].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1opLessThan;

	methods[531].name = "SWIG_PlayerType_getID";
	methods[531].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;)I";
	methods[531].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1getID;

	methods[532].name = "SWIG_PlayerType_getName";
	methods[532].signature = "(JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Ljava/lang/String;";
	methods[532].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1PlayerType_1getName;

	methods[533].name = "delete_SWIG_PlayerType";
	methods[533].signature = "(J)V";
	methods[533].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1PlayerType;

	methods[534].name = "getPlayerType";
	methods[534].signature = "(J)J";
	methods[534].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getPlayerType;

	methods[535].name = "allPlayerTypes";
	methods[535].signature = "()J";
	methods[535].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allPlayerTypes;

	methods[536].name = "initPlayerTypes";
	methods[536].signature = "()V";
	methods[536].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initPlayerTypes;

	methods[537].name = "NotUsed_get";
	methods[537].signature = "()J";
	methods[537].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_NotUsed_1get;

	methods[538].name = "Computer_get";
	methods[538].signature = "()J";
	methods[538].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Computer_1get;

	methods[539].name = "Human_get";
	methods[539].signature = "()J";
	methods[539].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Human_1get;

	methods[540].name = "Rescuable_get";
	methods[540].signature = "()J";
	methods[540].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Rescuable_1get;

	methods[541].name = "ComputerSlot_get";
	methods[541].signature = "()J";
	methods[541].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ComputerSlot_1get;

	methods[542].name = "OpenSlot_get";
	methods[542].signature = "()J";
	methods[542].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OpenSlot_1get;

	methods[543].name = "PlayerTypeNeutral_get";
	methods[543].signature = "()J";
	methods[543].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeNeutral_1get;

	methods[544].name = "ClosedSlot_get";
	methods[544].signature = "()J";
	methods[544].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ClosedSlot_1get;

	methods[545].name = "HumanDefeated_get";
	methods[545].signature = "()J";
	methods[545].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_HumanDefeated_1get;

	methods[546].name = "ComputerDefeated_get";
	methods[546].signature = "()J";
	methods[546].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ComputerDefeated_1get;

	methods[547].name = "PlayerTypeNone_get";
	methods[547].signature = "()J";
	methods[547].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeNone_1get;

	methods[548].name = "PlayerTypeUnknown_get";
	methods[548].signature = "()J";
	methods[548].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeUnknown_1get;

	methods[549].name = "new_SWIG_Position__SWIG_0";
	methods[549].signature = "()J";
	methods[549].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_10;

	methods[550].name = "new_SWIG_Position__SWIG_1";
	methods[550].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[550].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_11;

	methods[551].name = "new_SWIG_Position__SWIG_2";
	methods[551].signature = "(II)J";
	methods[551].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Position_1_1SWIG_12;

	methods[552].name = "SWIG_Position_opEquals";
	methods[552].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[552].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opEquals;

	methods[553].name = "SWIG_Position_opNotEquals";
	methods[553].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[553].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opNotEquals;

	methods[554].name = "SWIG_Position_opLessThan";
	methods[554].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[554].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opLessThan;

	methods[555].name = "SWIG_Position_opPlus";
	methods[555].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[555].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opPlus;

	methods[556].name = "SWIG_Position_opMinus";
	methods[556].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[556].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opMinus;

	methods[557].name = "SWIG_Position_opAdd";
	methods[557].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[557].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opAdd;

	methods[558].name = "SWIG_Position_opSubtract";
	methods[558].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[558].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1opSubtract;

	methods[559].name = "SWIG_Position_getDistance";
	methods[559].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)D";
	methods[559].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1getDistance;

	methods[560].name = "SWIG_Position_getLength";
	methods[560].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)D";
	methods[560].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1getLength;

	methods[561].name = "SWIG_Position_x";
	methods[561].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[561].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1x;

	methods[562].name = "SWIG_Position_y";
	methods[562].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[562].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1y;

	methods[563].name = "SWIG_Position_xConst";
	methods[563].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)I";
	methods[563].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1xConst;

	methods[564].name = "SWIG_Position_yConst";
	methods[564].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)I";
	methods[564].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Position_1yConst;

	methods[565].name = "delete_SWIG_Position";
	methods[565].signature = "(J)V";
	methods[565].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Position;

	methods[566].name = "PositionInvalid_get";
	methods[566].signature = "()J";
	methods[566].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionInvalid_1get;

	methods[567].name = "PositionNone_get";
	methods[567].signature = "()J";
	methods[567].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionNone_1get;

	methods[568].name = "PositionUnknown_get";
	methods[568].signature = "()J";
	methods[568].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionUnknown_1get;

	methods[569].name = "new_SWIG_Race__SWIG_0";
	methods[569].signature = "()J";
	methods[569].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_10;

	methods[570].name = "new_SWIG_Race__SWIG_1";
	methods[570].signature = "(I)J";
	methods[570].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_11;

	methods[571].name = "new_SWIG_Race__SWIG_2";
	methods[571].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[571].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Race_1_1SWIG_12;

	methods[572].name = "SWIG_Race_opAssign";
	methods[572].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[572].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opAssign;

	methods[573].name = "SWIG_Race_opEquals";
	methods[573].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[573].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opEquals;

	methods[574].name = "SWIG_Race_opNotEquals";
	methods[574].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[574].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opNotEquals;

	methods[575].name = "SWIG_Race_opLessThan";
	methods[575].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[575].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1opLessThan;

	methods[576].name = "SWIG_Race_getID";
	methods[576].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)I";
	methods[576].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getID;

	methods[577].name = "SWIG_Race_getName";
	methods[577].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)Ljava/lang/String;";
	methods[577].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getName;

	methods[578].name = "SWIG_Race_getWorker";
	methods[578].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[578].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getWorker;

	methods[579].name = "SWIG_Race_getCenter";
	methods[579].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[579].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getCenter;

	methods[580].name = "SWIG_Race_getRefinery";
	methods[580].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[580].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getRefinery;

	methods[581].name = "SWIG_Race_getTransport";
	methods[581].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[581].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getTransport;

	methods[582].name = "SWIG_Race_getSupplyProvider";
	methods[582].signature = "(JLorg/bwapi/bridge/swig/SWIG_Race;)J";
	methods[582].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Race_1getSupplyProvider;

	methods[583].name = "delete_SWIG_Race";
	methods[583].signature = "(J)V";
	methods[583].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Race;

	methods[584].name = "getRace";
	methods[584].signature = "(J)J";
	methods[584].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getRace;

	methods[585].name = "allRaces";
	methods[585].signature = "()J";
	methods[585].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allRaces;

	methods[586].name = "initRaces";
	methods[586].signature = "()V";
	methods[586].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initRaces;

	methods[587].name = "Zerg_get";
	methods[587].signature = "()J";
	methods[587].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1get;

	methods[588].name = "Terran_get";
	methods[588].signature = "()J";
	methods[588].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1get;

	methods[589].name = "Protoss_get";
	methods[589].signature = "()J";
	methods[589].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1get;

	methods[590].name = "Random_get";
	methods[590].signature = "()J";
	methods[590].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Random_1get;

	methods[591].name = "Other_get";
	methods[591].signature = "()J";
	methods[591].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Other_1get;

	methods[592].name = "RaceNone_get";
	methods[592].signature = "()J";
	methods[592].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceNone_1get;

	methods[593].name = "RaceUnknown_get";
	methods[593].signature = "()J";
	methods[593].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceUnknown_1get;

	methods[594].name = "new_SWIG_TechType__SWIG_0";
	methods[594].signature = "()J";
	methods[594].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_10;

	methods[595].name = "new_SWIG_TechType__SWIG_1";
	methods[595].signature = "(I)J";
	methods[595].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_11;

	methods[596].name = "new_SWIG_TechType__SWIG_2";
	methods[596].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)J";
	methods[596].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TechType_1_1SWIG_12;

	methods[597].name = "SWIG_TechType_opAssign";
	methods[597].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_TechType;)J";
	methods[597].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opAssign;

	methods[598].name = "SWIG_TechType_opEquals";
	methods[598].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[598].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opEquals;

	methods[599].name = "SWIG_TechType_opNotEquals";
	methods[599].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[599].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opNotEquals;

	methods[600].name = "SWIG_TechType_opLessThan";
	methods[600].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[600].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1opLessThan;

	methods[601].name = "SWIG_TechType_getID";
	methods[601].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)I";
	methods[601].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getID;

	methods[602].name = "SWIG_TechType_getName";
	methods[602].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)Ljava/lang/String;";
	methods[602].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getName;

	methods[603].name = "SWIG_TechType_mineralPrice";
	methods[603].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)I";
	methods[603].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1mineralPrice;

	methods[604].name = "SWIG_TechType_gasPrice";
	methods[604].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)I";
	methods[604].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1gasPrice;

	methods[605].name = "SWIG_TechType_energyUsed";
	methods[605].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)I";
	methods[605].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1energyUsed;

	methods[606].name = "SWIG_TechType_whatResearches";
	methods[606].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)J";
	methods[606].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1whatResearches;

	methods[607].name = "SWIG_TechType_getWeapon";
	methods[607].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)J";
	methods[607].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1getWeapon;

	methods[608].name = "SWIG_TechType_whatUses";
	methods[608].signature = "(JLorg/bwapi/bridge/swig/SWIG_TechType;)J";
	methods[608].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TechType_1whatUses;

	methods[609].name = "delete_SWIG_TechType";
	methods[609].signature = "(J)V";
	methods[609].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1TechType;

	methods[610].name = "getTechType";
	methods[610].signature = "(J)J";
	methods[610].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getTechType;

	methods[611].name = "allTechTypes";
	methods[611].signature = "()J";
	methods[611].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allTechTypes;

	methods[612].name = "initTechTypes";
	methods[612].signature = "()V";
	methods[612].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initTechTypes;

	methods[613].name = "Stim_Packs_get";
	methods[613].signature = "()J";
	methods[613].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Stim_1Packs_1get;

	methods[614].name = "TechTypeLockdown_get";
	methods[614].signature = "()J";
	methods[614].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeLockdown_1get;

	methods[615].name = "TechTypeEMP_Shockwave_get";
	methods[615].signature = "()J";
	methods[615].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeEMP_1Shockwave_1get;

	methods[616].name = "Spider_Mines_get";
	methods[616].signature = "()J";
	methods[616].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spider_1Mines_1get;

	methods[617].name = "Scanner_Sweep_get";
	methods[617].signature = "()J";
	methods[617].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Scanner_1Sweep_1get;

	methods[618].name = "Tank_Siege_Mode_get";
	methods[618].signature = "()J";
	methods[618].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Tank_1Siege_1Mode_1get;

	methods[619].name = "Defensive_Matrix_get";
	methods[619].signature = "()J";
	methods[619].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Defensive_1Matrix_1get;

	methods[620].name = "TechTypeIrradiate_get";
	methods[620].signature = "()J";
	methods[620].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeIrradiate_1get;

	methods[621].name = "TechTypeYamato_Gun_get";
	methods[621].signature = "()J";
	methods[621].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeYamato_1Gun_1get;

	methods[622].name = "Cloaking_Field_get";
	methods[622].signature = "()J";
	methods[622].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Cloaking_1Field_1get;

	methods[623].name = "Personnel_Cloaking_get";
	methods[623].signature = "()J";
	methods[623].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Personnel_1Cloaking_1get;

	methods[624].name = "Burrowing_get";
	methods[624].signature = "()J";
	methods[624].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Burrowing_1get;

	methods[625].name = "Infestation_get";
	methods[625].signature = "()J";
	methods[625].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Infestation_1get;

	methods[626].name = "TechTypeSpawn_Broodlings_get";
	methods[626].signature = "()J";
	methods[626].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSpawn_1Broodlings_1get;

	methods[627].name = "TechTypeDark_Swarm_get";
	methods[627].signature = "()J";
	methods[627].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeDark_1Swarm_1get;

	methods[628].name = "TechTypePlague_get";
	methods[628].signature = "()J";
	methods[628].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypePlague_1get;

	methods[629].name = "TechTypeConsume_get";
	methods[629].signature = "()J";
	methods[629].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConsume_1get;

	methods[630].name = "TechTypeEnsnare_get";
	methods[630].signature = "()J";
	methods[630].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeEnsnare_1get;

	methods[631].name = "TechTypeParasite_get";
	methods[631].signature = "()J";
	methods[631].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeParasite_1get;

	methods[632].name = "TechTypePsionic_Storm_get";
	methods[632].signature = "()J";
	methods[632].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypePsionic_1Storm_1get;

	methods[633].name = "Hallucination_get";
	methods[633].signature = "()J";
	methods[633].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Hallucination_1get;

	methods[634].name = "Recall_get";
	methods[634].signature = "()J";
	methods[634].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Recall_1get;

	methods[635].name = "TechTypeStasis_Field_get";
	methods[635].signature = "()J";
	methods[635].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeStasis_1Field_1get;

	methods[636].name = "Archon_Warp_get";
	methods[636].signature = "()J";
	methods[636].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Archon_1Warp_1get;

	methods[637].name = "TechTypeRestoration_get";
	methods[637].signature = "()J";
	methods[637].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeRestoration_1get;

	methods[638].name = "TechTypeDisruption_Web_get";
	methods[638].signature = "()J";
	methods[638].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeDisruption_1Web_1get;

	methods[639].name = "TechTypeMind_Control_get";
	methods[639].signature = "()J";
	methods[639].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeMind_1Control_1get;

	methods[640].name = "Dark_Archon_Meld_get";
	methods[640].signature = "()J";
	methods[640].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Dark_1Archon_1Meld_1get;

	methods[641].name = "TechTypeFeedback_get";
	methods[641].signature = "()J";
	methods[641].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeFeedback_1get;

	methods[642].name = "TechTypeOptical_Flare_get";
	methods[642].signature = "()J";
	methods[642].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeOptical_1Flare_1get;

	methods[643].name = "TechTypeMaelstrom_get";
	methods[643].signature = "()J";
	methods[643].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeMaelstrom_1get;

	methods[644].name = "Lurker_Aspect_get";
	methods[644].signature = "()J";
	methods[644].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Lurker_1Aspect_1get;

	methods[645].name = "Healing_get";
	methods[645].signature = "()J";
	methods[645].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Healing_1get;

	methods[646].name = "TechTypeNone_get";
	methods[646].signature = "()J";
	methods[646].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeNone_1get;

	methods[647].name = "TechTypeUnknown_get";
	methods[647].signature = "()J";
	methods[647].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeUnknown_1get;

	methods[648].name = "TechTypeNuclear_Strike_get";
	methods[648].signature = "()J";
	methods[648].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeNuclear_1Strike_1get;

	methods[649].name = "new_SWIG_TilePosition__SWIG_0";
	methods[649].signature = "()J";
	methods[649].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_10;

	methods[650].name = "new_SWIG_TilePosition__SWIG_1";
	methods[650].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[650].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_11;

	methods[651].name = "new_SWIG_TilePosition__SWIG_2";
	methods[651].signature = "(II)J";
	methods[651].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1TilePosition_1_1SWIG_12;

	methods[652].name = "SWIG_TilePosition_opEquals";
	methods[652].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[652].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opEquals;

	methods[653].name = "SWIG_TilePosition_opNotEquals";
	methods[653].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[653].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opNotEquals;

	methods[654].name = "SWIG_TilePosition_opLessThan";
	methods[654].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[654].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opLessThan;

	methods[655].name = "SWIG_TilePosition_opPlus";
	methods[655].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[655].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opPlus;

	methods[656].name = "SWIG_TilePosition_opMinus";
	methods[656].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[656].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opMinus;

	methods[657].name = "SWIG_TilePosition_opAdd";
	methods[657].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[657].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opAdd;

	methods[658].name = "SWIG_TilePosition_opSubtract";
	methods[658].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[658].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1opSubtract;

	methods[659].name = "SWIG_TilePosition_getDistance";
	methods[659].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)D";
	methods[659].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1getDistance;

	methods[660].name = "SWIG_TilePosition_getLength";
	methods[660].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)D";
	methods[660].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1getLength;

	methods[661].name = "SWIG_TilePosition_isValid";
	methods[661].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[661].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1isValid;

	methods[662].name = "SWIG_TilePosition_x";
	methods[662].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[662].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1x;

	methods[663].name = "SWIG_TilePosition_y";
	methods[663].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[663].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1y;

	methods[664].name = "SWIG_TilePosition_xConst";
	methods[664].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)I";
	methods[664].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1xConst;

	methods[665].name = "SWIG_TilePosition_yConst";
	methods[665].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)I";
	methods[665].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1TilePosition_1yConst;

	methods[666].name = "delete_SWIG_TilePosition";
	methods[666].signature = "(J)V";
	methods[666].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1TilePosition;

	methods[667].name = "TilePositionInvalid_get";
	methods[667].signature = "()J";
	methods[667].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionInvalid_1get;

	methods[668].name = "TilePositionNone_get";
	methods[668].signature = "()J";
	methods[668].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionNone_1get;

	methods[669].name = "TilePositionUnknown_get";
	methods[669].signature = "()J";
	methods[669].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionUnknown_1get;

	methods[670].name = "SWIG_Unit_getPlayer";
	methods[670].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[670].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPlayer;

	methods[671].name = "SWIG_Unit_getType";
	methods[671].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[671].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getType;

	methods[672].name = "SWIG_Unit_getInitialType";
	methods[672].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[672].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialType;

	methods[673].name = "SWIG_Unit_getHitPoints";
	methods[673].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[673].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getHitPoints;

	methods[674].name = "SWIG_Unit_getInitialHitPoints";
	methods[674].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[674].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialHitPoints;

	methods[675].name = "SWIG_Unit_getShields";
	methods[675].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[675].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getShields;

	methods[676].name = "SWIG_Unit_getEnergy";
	methods[676].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[676].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getEnergy;

	methods[677].name = "SWIG_Unit_getResources";
	methods[677].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[677].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getResources;

	methods[678].name = "SWIG_Unit_getInitialResources";
	methods[678].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[678].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialResources;

	methods[679].name = "SWIG_Unit_getKillCount";
	methods[679].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[679].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getKillCount;

	methods[680].name = "SWIG_Unit_getGroundWeaponCooldown";
	methods[680].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[680].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getGroundWeaponCooldown;

	methods[681].name = "SWIG_Unit_getAirWeaponCooldown";
	methods[681].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[681].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAirWeaponCooldown;

	methods[682].name = "SWIG_Unit_getSpellCooldown";
	methods[682].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[682].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSpellCooldown;

	methods[683].name = "SWIG_Unit_getDefenseMatrixPoints";
	methods[683].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[683].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDefenseMatrixPoints;

	methods[684].name = "SWIG_Unit_getDefenseMatrixTimer";
	methods[684].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[684].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDefenseMatrixTimer;

	methods[685].name = "SWIG_Unit_getEnsnareTimer";
	methods[685].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[685].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getEnsnareTimer;

	methods[686].name = "SWIG_Unit_getIrradiateTimer";
	methods[686].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[686].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getIrradiateTimer;

	methods[687].name = "SWIG_Unit_getLockdownTimer";
	methods[687].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[687].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getLockdownTimer;

	methods[688].name = "SWIG_Unit_getMaelstromTimer";
	methods[688].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[688].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getMaelstromTimer;

	methods[689].name = "SWIG_Unit_getPlagueTimer";
	methods[689].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[689].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPlagueTimer;

	methods[690].name = "SWIG_Unit_getRemoveTimer";
	methods[690].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[690].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemoveTimer;

	methods[691].name = "SWIG_Unit_getStasisTimer";
	methods[691].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[691].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getStasisTimer;

	methods[692].name = "SWIG_Unit_getStimTimer";
	methods[692].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[692].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getStimTimer;

	methods[693].name = "SWIG_Unit_getPosition";
	methods[693].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[693].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getPosition;

	methods[694].name = "SWIG_Unit_getInitialPosition";
	methods[694].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[694].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialPosition;

	methods[695].name = "SWIG_Unit_getTilePosition";
	methods[695].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[695].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTilePosition;

	methods[696].name = "SWIG_Unit_getInitialTilePosition";
	methods[696].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[696].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInitialTilePosition;

	methods[697].name = "SWIG_Unit_getDistance__SWIG_0";
	methods[697].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)D";
	methods[697].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDistance_1_1SWIG_10;

	methods[698].name = "SWIG_Unit_getDistance__SWIG_1";
	methods[698].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)D";
	methods[698].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getDistance_1_1SWIG_11;

	methods[699].name = "SWIG_Unit_getAngle";
	methods[699].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)D";
	methods[699].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAngle;

	methods[700].name = "SWIG_Unit_getVelocityX";
	methods[700].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)D";
	methods[700].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getVelocityX;

	methods[701].name = "SWIG_Unit_getVelocityY";
	methods[701].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)D";
	methods[701].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getVelocityY;

	methods[702].name = "SWIG_Unit_getTarget";
	methods[702].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[702].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTarget;

	methods[703].name = "SWIG_Unit_getTargetPosition";
	methods[703].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[703].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTargetPosition;

	methods[704].name = "SWIG_Unit_getOrder";
	methods[704].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[704].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrder;

	methods[705].name = "SWIG_Unit_getOrderTarget";
	methods[705].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[705].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrderTarget;

	methods[706].name = "SWIG_Unit_getOrderTimer";
	methods[706].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[706].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getOrderTimer;

	methods[707].name = "SWIG_Unit_getSecondaryOrder";
	methods[707].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[707].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSecondaryOrder;

	methods[708].name = "SWIG_Unit_getBuildUnit";
	methods[708].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[708].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getBuildUnit;

	methods[709].name = "SWIG_Unit_getRemainingBuildTime";
	methods[709].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[709].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingBuildTime;

	methods[710].name = "SWIG_Unit_getRemainingTrainTime";
	methods[710].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[710].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingTrainTime;

	methods[711].name = "SWIG_Unit_getChild";
	methods[711].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[711].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getChild;

	methods[712].name = "SWIG_Unit_getTrainingQueue";
	methods[712].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[712].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTrainingQueue;

	methods[713].name = "SWIG_Unit_getTransport";
	methods[713].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[713].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTransport;

	methods[714].name = "SWIG_Unit_getLoadedUnits";
	methods[714].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[714].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getLoadedUnits;

	methods[715].name = "SWIG_Unit_getInterceptorCount";
	methods[715].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[715].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getInterceptorCount;

	methods[716].name = "SWIG_Unit_getScarabCount";
	methods[716].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[716].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getScarabCount;

	methods[717].name = "SWIG_Unit_getSpiderMineCount";
	methods[717].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[717].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getSpiderMineCount;

	methods[718].name = "SWIG_Unit_getTech";
	methods[718].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[718].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getTech;

	methods[719].name = "SWIG_Unit_getUpgrade";
	methods[719].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[719].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getUpgrade;

	methods[720].name = "SWIG_Unit_getRemainingResearchTime";
	methods[720].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[720].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingResearchTime;

	methods[721].name = "SWIG_Unit_getRemainingUpgradeTime";
	methods[721].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)I";
	methods[721].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRemainingUpgradeTime;

	methods[722].name = "SWIG_Unit_getRallyPosition";
	methods[722].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[722].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRallyPosition;

	methods[723].name = "SWIG_Unit_getRallyUnit";
	methods[723].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[723].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getRallyUnit;

	methods[724].name = "SWIG_Unit_getAddon";
	methods[724].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)J";
	methods[724].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getAddon;

	methods[725].name = "SWIG_Unit_getUpgradeLevel";
	methods[725].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;J)I";
	methods[725].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1getUpgradeLevel;

	methods[726].name = "SWIG_Unit_exists";
	methods[726].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[726].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1exists;

	methods[727].name = "SWIG_Unit_isAccelerating";
	methods[727].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[727].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isAccelerating;

	methods[728].name = "SWIG_Unit_isBeingConstructed";
	methods[728].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[728].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingConstructed;

	methods[729].name = "SWIG_Unit_isBeingHealed";
	methods[729].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[729].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingHealed;

	methods[730].name = "SWIG_Unit_isBlind";
	methods[730].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[730].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBlind;

	methods[731].name = "SWIG_Unit_isBraking";
	methods[731].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[731].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBraking;

	methods[732].name = "SWIG_Unit_isBurrowed";
	methods[732].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[732].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBurrowed;

	methods[733].name = "SWIG_Unit_isCarryingGas";
	methods[733].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[733].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCarryingGas;

	methods[734].name = "SWIG_Unit_isCarryingMinerals";
	methods[734].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[734].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCarryingMinerals;

	methods[735].name = "SWIG_Unit_isCloaked";
	methods[735].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[735].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCloaked;

	methods[736].name = "SWIG_Unit_isCompleted";
	methods[736].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[736].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isCompleted;

	methods[737].name = "SWIG_Unit_isConstructing";
	methods[737].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[737].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isConstructing;

	methods[738].name = "SWIG_Unit_isDefenseMatrixed";
	methods[738].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[738].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isDefenseMatrixed;

	methods[739].name = "SWIG_Unit_isEnsnared";
	methods[739].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[739].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isEnsnared;

	methods[740].name = "SWIG_Unit_isFollowing";
	methods[740].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[740].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isFollowing;

	methods[741].name = "SWIG_Unit_isGatheringGas";
	methods[741].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[741].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isGatheringGas;

	methods[742].name = "SWIG_Unit_isGatheringMinerals";
	methods[742].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[742].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isGatheringMinerals;

	methods[743].name = "SWIG_Unit_isHallucination";
	methods[743].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[743].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isHallucination;

	methods[744].name = "SWIG_Unit_isIdle";
	methods[744].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[744].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isIdle;

	methods[745].name = "SWIG_Unit_isIrradiated";
	methods[745].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[745].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isIrradiated;

	methods[746].name = "SWIG_Unit_isLifted";
	methods[746].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[746].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLifted;

	methods[747].name = "SWIG_Unit_isLoaded";
	methods[747].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[747].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLoaded;

	methods[748].name = "SWIG_Unit_isLockedDown";
	methods[748].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[748].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isLockedDown;

	methods[749].name = "SWIG_Unit_isMaelstrommed";
	methods[749].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[749].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMaelstrommed;

	methods[750].name = "SWIG_Unit_isMorphing";
	methods[750].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[750].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMorphing;

	methods[751].name = "SWIG_Unit_isMoving";
	methods[751].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[751].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isMoving;

	methods[752].name = "SWIG_Unit_isParasited";
	methods[752].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[752].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isParasited;

	methods[753].name = "SWIG_Unit_isPatrolling";
	methods[753].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[753].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isPatrolling;

	methods[754].name = "SWIG_Unit_isPlagued";
	methods[754].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[754].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isPlagued;

	methods[755].name = "SWIG_Unit_isRepairing";
	methods[755].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[755].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isRepairing;

	methods[756].name = "SWIG_Unit_isResearching";
	methods[756].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[756].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isResearching;

	methods[757].name = "SWIG_Unit_isSelected";
	methods[757].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[757].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isSelected;

	methods[758].name = "SWIG_Unit_isSieged";
	methods[758].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[758].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isSieged;

	methods[759].name = "SWIG_Unit_isStartingAttack";
	methods[759].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[759].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStartingAttack;

	methods[760].name = "SWIG_Unit_isStasised";
	methods[760].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[760].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStasised;

	methods[761].name = "SWIG_Unit_isStimmed";
	methods[761].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[761].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isStimmed;

	methods[762].name = "SWIG_Unit_isTraining";
	methods[762].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[762].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isTraining;

	methods[763].name = "SWIG_Unit_isUnderStorm";
	methods[763].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[763].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUnderStorm;

	methods[764].name = "SWIG_Unit_isUnpowered";
	methods[764].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[764].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUnpowered;

	methods[765].name = "SWIG_Unit_isUpgrading";
	methods[765].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[765].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isUpgrading;

	methods[766].name = "SWIG_Unit_isVisible";
	methods[766].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[766].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isVisible;

	methods[767].name = "SWIG_Unit_isBeingGathered";
	methods[767].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[767].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1isBeingGathered;

	methods[768].name = "SWIG_Unit_attackMove";
	methods[768].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[768].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1attackMove;

	methods[769].name = "SWIG_Unit_attackUnit";
	methods[769].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[769].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1attackUnit;

	methods[770].name = "SWIG_Unit_rightClick__SWIG_0";
	methods[770].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[770].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1rightClick_1_1SWIG_10;

	methods[771].name = "SWIG_Unit_rightClick__SWIG_1";
	methods[771].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[771].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1rightClick_1_1SWIG_11;

	methods[772].name = "SWIG_Unit_train";
	methods[772].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[772].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1train;

	methods[773].name = "SWIG_Unit_build";
	methods[773].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TilePosition;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[773].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1build;

	methods[774].name = "SWIG_Unit_buildAddon";
	methods[774].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[774].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1buildAddon;

	methods[775].name = "SWIG_Unit_research";
	methods[775].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[775].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1research;

	methods[776].name = "SWIG_Unit_upgrade";
	methods[776].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;J)Z";
	methods[776].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1upgrade;

	methods[777].name = "SWIG_Unit_stop";
	methods[777].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[777].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1stop;

	methods[778].name = "SWIG_Unit_holdPosition";
	methods[778].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[778].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1holdPosition;

	methods[779].name = "SWIG_Unit_patrol";
	methods[779].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[779].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1patrol;

	methods[780].name = "SWIG_Unit_follow";
	methods[780].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[780].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1follow;

	methods[781].name = "SWIG_Unit_setRallyPosition";
	methods[781].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[781].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1setRallyPosition;

	methods[782].name = "SWIG_Unit_setRallyUnit";
	methods[782].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[782].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1setRallyUnit;

	methods[783].name = "SWIG_Unit_repair";
	methods[783].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[783].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1repair;

	methods[784].name = "SWIG_Unit_morph";
	methods[784].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[784].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1morph;

	methods[785].name = "SWIG_Unit_burrow";
	methods[785].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[785].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1burrow;

	methods[786].name = "SWIG_Unit_unburrow";
	methods[786].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[786].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unburrow;

	methods[787].name = "SWIG_Unit_siege";
	methods[787].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[787].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1siege;

	methods[788].name = "SWIG_Unit_unsiege";
	methods[788].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[788].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unsiege;

	methods[789].name = "SWIG_Unit_cloak";
	methods[789].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[789].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cloak;

	methods[790].name = "SWIG_Unit_decloak";
	methods[790].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[790].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1decloak;

	methods[791].name = "SWIG_Unit_lift";
	methods[791].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[791].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1lift;

	methods[792].name = "SWIG_Unit_land";
	methods[792].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[792].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1land;

	methods[793].name = "SWIG_Unit_load";
	methods[793].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[793].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1load;

	methods[794].name = "SWIG_Unit_unload";
	methods[794].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[794].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unload;

	methods[795].name = "SWIG_Unit_unloadAll__SWIG_0";
	methods[795].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[795].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unloadAll_1_1SWIG_10;

	methods[796].name = "SWIG_Unit_unloadAll__SWIG_1";
	methods[796].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[796].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1unloadAll_1_1SWIG_11;

	methods[797].name = "SWIG_Unit_cancelConstruction";
	methods[797].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[797].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelConstruction;

	methods[798].name = "SWIG_Unit_haltConstruction";
	methods[798].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[798].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1haltConstruction;

	methods[799].name = "SWIG_Unit_cancelMorph";
	methods[799].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[799].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelMorph;

	methods[800].name = "SWIG_Unit_cancelTrain__SWIG_0";
	methods[800].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[800].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelTrain_1_1SWIG_10;

	methods[801].name = "SWIG_Unit_cancelTrain__SWIG_1";
	methods[801].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;I)Z";
	methods[801].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelTrain_1_1SWIG_11;

	methods[802].name = "SWIG_Unit_cancelAddon";
	methods[802].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[802].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelAddon;

	methods[803].name = "SWIG_Unit_cancelResearch";
	methods[803].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[803].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelResearch;

	methods[804].name = "SWIG_Unit_cancelUpgrade";
	methods[804].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[804].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1cancelUpgrade;

	methods[805].name = "SWIG_Unit_useTech__SWIG_0";
	methods[805].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[805].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_10;

	methods[806].name = "SWIG_Unit_useTech__SWIG_1";
	methods[806].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[806].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_11;

	methods[807].name = "SWIG_Unit_useTech__SWIG_2";
	methods[807].signature = "(JLorg/bwapi/bridge/swig/SWIG_Unit;JLorg/bwapi/bridge/swig/SWIG_TechType;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[807].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Unit_1useTech_1_1SWIG_12;

	methods[808].name = "delete_SWIG_Unit";
	methods[808].signature = "(J)V";
	methods[808].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Unit;

	methods[809].name = "new_SWIG_UnitSizeType__SWIG_0";
	methods[809].signature = "()J";
	methods[809].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_10;

	methods[810].name = "new_SWIG_UnitSizeType__SWIG_1";
	methods[810].signature = "(I)J";
	methods[810].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_11;

	methods[811].name = "new_SWIG_UnitSizeType__SWIG_2";
	methods[811].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)J";
	methods[811].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitSizeType_1_1SWIG_12;

	methods[812].name = "SWIG_UnitSizeType_opAssign";
	methods[812].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)J";
	methods[812].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opAssign;

	methods[813].name = "SWIG_UnitSizeType_opEquals";
	methods[813].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[813].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opEquals;

	methods[814].name = "SWIG_UnitSizeType_opNotEquals";
	methods[814].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[814].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opNotEquals;

	methods[815].name = "SWIG_UnitSizeType_opLessThan";
	methods[815].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[815].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1opLessThan;

	methods[816].name = "SWIG_UnitSizeType_getID";
	methods[816].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)I";
	methods[816].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1getID;

	methods[817].name = "SWIG_UnitSizeType_getName";
	methods[817].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Ljava/lang/String;";
	methods[817].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitSizeType_1getName;

	methods[818].name = "delete_SWIG_UnitSizeType";
	methods[818].signature = "(J)V";
	methods[818].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UnitSizeType;

	methods[819].name = "getUnitSizeType";
	methods[819].signature = "(J)J";
	methods[819].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getUnitSizeType;

	methods[820].name = "allUnitSizeTypes";
	methods[820].signature = "()J";
	methods[820].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allUnitSizeTypes;

	methods[821].name = "initUnitSizeTypes";
	methods[821].signature = "()V";
	methods[821].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initUnitSizeTypes;

	methods[822].name = "UnitSizeTypeIndependent_get";
	methods[822].signature = "()J";
	methods[822].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeIndependent_1get;

	methods[823].name = "Small_get";
	methods[823].signature = "()J";
	methods[823].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Small_1get;

	methods[824].name = "Medium_get";
	methods[824].signature = "()J";
	methods[824].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Medium_1get;

	methods[825].name = "Large_get";
	methods[825].signature = "()J";
	methods[825].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Large_1get;

	methods[826].name = "UnitSizeTypeNone_get";
	methods[826].signature = "()J";
	methods[826].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeNone_1get;

	methods[827].name = "UnitSizeTypeUnknown_get";
	methods[827].signature = "()J";
	methods[827].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeUnknown_1get;

	methods[828].name = "new_SWIG_UnitType__SWIG_0";
	methods[828].signature = "()J";
	methods[828].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_10;

	methods[829].name = "new_SWIG_UnitType__SWIG_1";
	methods[829].signature = "(I)J";
	methods[829].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_11;

	methods[830].name = "new_SWIG_UnitType__SWIG_2";
	methods[830].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[830].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UnitType_1_1SWIG_12;

	methods[831].name = "SWIG_UnitType_opAssign";
	methods[831].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[831].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opAssign;

	methods[832].name = "SWIG_UnitType_opEquals";
	methods[832].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[832].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opEquals;

	methods[833].name = "SWIG_UnitType_opNotEquals";
	methods[833].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[833].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opNotEquals;

	methods[834].name = "SWIG_UnitType_opLessThan";
	methods[834].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[834].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1opLessThan;

	methods[835].name = "SWIG_UnitType_getID";
	methods[835].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[835].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getID;

	methods[836].name = "SWIG_UnitType_getName";
	methods[836].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Ljava/lang/String;";
	methods[836].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getName;

	methods[837].name = "SWIG_UnitType_getSubLabel";
	methods[837].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Ljava/lang/String;";
	methods[837].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getSubLabel;

	methods[838].name = "SWIG_UnitType_getRace";
	methods[838].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[838].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1getRace;

	methods[839].name = "SWIG_UnitType_whatBuilds";
	methods[839].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[839].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1whatBuilds;

	methods[840].name = "SWIG_UnitType_requiredUnits";
	methods[840].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[840].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiredUnits;

	methods[841].name = "SWIG_UnitType_requiredTech";
	methods[841].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[841].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiredTech;

	methods[842].name = "SWIG_UnitType_abilities";
	methods[842].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[842].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1abilities;

	methods[843].name = "SWIG_UnitType_upgrades";
	methods[843].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[843].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1upgrades;

	methods[844].name = "SWIG_UnitType_armorUpgrade";
	methods[844].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[844].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1armorUpgrade;

	methods[845].name = "SWIG_UnitType_maxHitPoints";
	methods[845].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[845].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxHitPoints;

	methods[846].name = "SWIG_UnitType_maxShields";
	methods[846].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[846].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxShields;

	methods[847].name = "SWIG_UnitType_maxEnergy";
	methods[847].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[847].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxEnergy;

	methods[848].name = "SWIG_UnitType_armor";
	methods[848].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[848].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1armor;

	methods[849].name = "SWIG_UnitType_mineralPrice";
	methods[849].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[849].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1mineralPrice;

	methods[850].name = "SWIG_UnitType_gasPrice";
	methods[850].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[850].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1gasPrice;

	methods[851].name = "SWIG_UnitType_buildTime";
	methods[851].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[851].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1buildTime;

	methods[852].name = "SWIG_UnitType_supplyRequired";
	methods[852].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[852].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1supplyRequired;

	methods[853].name = "SWIG_UnitType_supplyProvided";
	methods[853].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[853].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1supplyProvided;

	methods[854].name = "SWIG_UnitType_spaceRequired";
	methods[854].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[854].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1spaceRequired;

	methods[855].name = "SWIG_UnitType_spaceProvided";
	methods[855].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[855].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1spaceProvided;

	methods[856].name = "SWIG_UnitType_buildScore";
	methods[856].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[856].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1buildScore;

	methods[857].name = "SWIG_UnitType_destroyScore";
	methods[857].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[857].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1destroyScore;

	methods[858].name = "SWIG_UnitType_size";
	methods[858].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[858].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1size;

	methods[859].name = "SWIG_UnitType_tileWidth";
	methods[859].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[859].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1tileWidth;

	methods[860].name = "SWIG_UnitType_tileHeight";
	methods[860].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[860].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1tileHeight;

	methods[861].name = "SWIG_UnitType_dimensionLeft";
	methods[861].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[861].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionLeft;

	methods[862].name = "SWIG_UnitType_dimensionUp";
	methods[862].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[862].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionUp;

	methods[863].name = "SWIG_UnitType_dimensionRight";
	methods[863].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[863].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionRight;

	methods[864].name = "SWIG_UnitType_dimensionDown";
	methods[864].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[864].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1dimensionDown;

	methods[865].name = "SWIG_UnitType_seekRange";
	methods[865].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[865].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1seekRange;

	methods[866].name = "SWIG_UnitType_sightRange";
	methods[866].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[866].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1sightRange;

	methods[867].name = "SWIG_UnitType_groundWeapon";
	methods[867].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[867].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1groundWeapon;

	methods[868].name = "SWIG_UnitType_maxGroundHits";
	methods[868].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[868].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxGroundHits;

	methods[869].name = "SWIG_UnitType_airWeapon";
	methods[869].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)J";
	methods[869].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1airWeapon;

	methods[870].name = "SWIG_UnitType_maxAirHits";
	methods[870].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[870].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1maxAirHits;

	methods[871].name = "SWIG_UnitType_topSpeed";
	methods[871].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)D";
	methods[871].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1topSpeed;

	methods[872].name = "SWIG_UnitType_acceleration";
	methods[872].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[872].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1acceleration;

	methods[873].name = "SWIG_UnitType_haltDistance";
	methods[873].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[873].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1haltDistance;

	methods[874].name = "SWIG_UnitType_turnRadius";
	methods[874].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)I";
	methods[874].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1turnRadius;

	methods[875].name = "SWIG_UnitType_canProduce";
	methods[875].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[875].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canProduce;

	methods[876].name = "SWIG_UnitType_canAttack";
	methods[876].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[876].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canAttack;

	methods[877].name = "SWIG_UnitType_canMove";
	methods[877].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[877].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1canMove;

	methods[878].name = "SWIG_UnitType_isFlyer";
	methods[878].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[878].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isFlyer;

	methods[879].name = "SWIG_UnitType_regeneratesHP";
	methods[879].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[879].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1regeneratesHP;

	methods[880].name = "SWIG_UnitType_isSpellcaster";
	methods[880].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[880].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isSpellcaster;

	methods[881].name = "SWIG_UnitType_hasPermanentCloak";
	methods[881].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[881].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1hasPermanentCloak;

	methods[882].name = "SWIG_UnitType_isInvincible";
	methods[882].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[882].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isInvincible;

	methods[883].name = "SWIG_UnitType_isOrganic";
	methods[883].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[883].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isOrganic;

	methods[884].name = "SWIG_UnitType_isMechanical";
	methods[884].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[884].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isMechanical;

	methods[885].name = "SWIG_UnitType_isRobotic";
	methods[885].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[885].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isRobotic;

	methods[886].name = "SWIG_UnitType_isDetector";
	methods[886].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[886].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isDetector;

	methods[887].name = "SWIG_UnitType_isResourceContainer";
	methods[887].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[887].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isResourceContainer;

	methods[888].name = "SWIG_UnitType_isResourceDepot";
	methods[888].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[888].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isResourceDepot;

	methods[889].name = "SWIG_UnitType_isRefinery";
	methods[889].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[889].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isRefinery;

	methods[890].name = "SWIG_UnitType_isWorker";
	methods[890].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[890].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isWorker;

	methods[891].name = "SWIG_UnitType_requiresPsi";
	methods[891].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[891].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiresPsi;

	methods[892].name = "SWIG_UnitType_requiresCreep";
	methods[892].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[892].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1requiresCreep;

	methods[893].name = "SWIG_UnitType_isTwoUnitsInOneEgg";
	methods[893].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[893].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isTwoUnitsInOneEgg;

	methods[894].name = "SWIG_UnitType_isBurrowable";
	methods[894].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[894].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isBurrowable;

	methods[895].name = "SWIG_UnitType_isCloakable";
	methods[895].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[895].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isCloakable;

	methods[896].name = "SWIG_UnitType_isBuilding";
	methods[896].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[896].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isBuilding;

	methods[897].name = "SWIG_UnitType_isAddon";
	methods[897].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[897].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isAddon;

	methods[898].name = "SWIG_UnitType_isFlyingBuilding";
	methods[898].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[898].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isFlyingBuilding;

	methods[899].name = "SWIG_UnitType_isNeutral";
	methods[899].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[899].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UnitType_1isNeutral;

	methods[900].name = "delete_SWIG_UnitType";
	methods[900].signature = "(J)V";
	methods[900].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UnitType;

	methods[901].name = "getUnitType";
	methods[901].signature = "(J)J";
	methods[901].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getUnitType;

	methods[902].name = "allUnitTypes";
	methods[902].signature = "()J";
	methods[902].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allUnitTypes;

	methods[903].name = "initUnitTypes";
	methods[903].signature = "()V";
	methods[903].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initUnitTypes;

	methods[904].name = "Terran_Marine_get";
	methods[904].signature = "()J";
	methods[904].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Marine_1get;

	methods[905].name = "Terran_Ghost_get";
	methods[905].signature = "()J";
	methods[905].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ghost_1get;

	methods[906].name = "Terran_Vulture_get";
	methods[906].signature = "()J";
	methods[906].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vulture_1get;

	methods[907].name = "Terran_Goliath_get";
	methods[907].signature = "()J";
	methods[907].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Goliath_1get;

	methods[908].name = "Terran_Siege_Tank_Tank_Mode_get";
	methods[908].signature = "()J";
	methods[908].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Siege_1Tank_1Tank_1Mode_1get;

	methods[909].name = "Terran_SCV_get";
	methods[909].signature = "()J";
	methods[909].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1SCV_1get;

	methods[910].name = "Terran_Wraith_get";
	methods[910].signature = "()J";
	methods[910].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Wraith_1get;

	methods[911].name = "Terran_Science_Vessel_get";
	methods[911].signature = "()J";
	methods[911].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Science_1Vessel_1get;

	methods[912].name = "Terran_Dropship_get";
	methods[912].signature = "()J";
	methods[912].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Dropship_1get;

	methods[913].name = "Terran_Battlecruiser_get";
	methods[913].signature = "()J";
	methods[913].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Battlecruiser_1get;

	methods[914].name = "Terran_Vulture_Spider_Mine_get";
	methods[914].signature = "()J";
	methods[914].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vulture_1Spider_1Mine_1get;

	methods[915].name = "Terran_Nuclear_Missile_get";
	methods[915].signature = "()J";
	methods[915].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Nuclear_1Missile_1get;

	methods[916].name = "Terran_Siege_Tank_Siege_Mode_get";
	methods[916].signature = "()J";
	methods[916].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Siege_1Tank_1Siege_1Mode_1get;

	methods[917].name = "Terran_Firebat_get";
	methods[917].signature = "()J";
	methods[917].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Firebat_1get;

	methods[918].name = "Spell_Scanner_Sweep_get";
	methods[918].signature = "()J";
	methods[918].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Scanner_1Sweep_1get;

	methods[919].name = "Terran_Medic_get";
	methods[919].signature = "()J";
	methods[919].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Medic_1get;

	methods[920].name = "Zerg_Larva_get";
	methods[920].signature = "()J";
	methods[920].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Larva_1get;

	methods[921].name = "Zerg_Egg_get";
	methods[921].signature = "()J";
	methods[921].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Egg_1get;

	methods[922].name = "Zerg_Zergling_get";
	methods[922].signature = "()J";
	methods[922].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Zergling_1get;

	methods[923].name = "Zerg_Hydralisk_get";
	methods[923].signature = "()J";
	methods[923].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hydralisk_1get;

	methods[924].name = "Zerg_Ultralisk_get";
	methods[924].signature = "()J";
	methods[924].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Ultralisk_1get;

	methods[925].name = "Zerg_Broodling_get";
	methods[925].signature = "()J";
	methods[925].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Broodling_1get;

	methods[926].name = "Zerg_Drone_get";
	methods[926].signature = "()J";
	methods[926].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Drone_1get;

	methods[927].name = "Zerg_Overlord_get";
	methods[927].signature = "()J";
	methods[927].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Overlord_1get;

	methods[928].name = "Zerg_Mutalisk_get";
	methods[928].signature = "()J";
	methods[928].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Mutalisk_1get;

	methods[929].name = "Zerg_Guardian_get";
	methods[929].signature = "()J";
	methods[929].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Guardian_1get;

	methods[930].name = "Zerg_Queen_get";
	methods[930].signature = "()J";
	methods[930].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Queen_1get;

	methods[931].name = "Zerg_Defiler_get";
	methods[931].signature = "()J";
	methods[931].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Defiler_1get;

	methods[932].name = "Zerg_Scourge_get";
	methods[932].signature = "()J";
	methods[932].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Scourge_1get;

	methods[933].name = "Zerg_Infested_Terran_get";
	methods[933].signature = "()J";
	methods[933].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Infested_1Terran_1get;

	methods[934].name = "Terran_Valkyrie_get";
	methods[934].signature = "()J";
	methods[934].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Valkyrie_1get;

	methods[935].name = "Zerg_Cocoon_get";
	methods[935].signature = "()J";
	methods[935].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Cocoon_1get;

	methods[936].name = "Protoss_Corsair_get";
	methods[936].signature = "()J";
	methods[936].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Corsair_1get;

	methods[937].name = "Protoss_Dark_Templar_get";
	methods[937].signature = "()J";
	methods[937].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dark_1Templar_1get;

	methods[938].name = "Zerg_Devourer_get";
	methods[938].signature = "()J";
	methods[938].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Devourer_1get;

	methods[939].name = "Protoss_Dark_Archon_get";
	methods[939].signature = "()J";
	methods[939].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dark_1Archon_1get;

	methods[940].name = "Protoss_Probe_get";
	methods[940].signature = "()J";
	methods[940].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Probe_1get;

	methods[941].name = "Protoss_Zealot_get";
	methods[941].signature = "()J";
	methods[941].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Zealot_1get;

	methods[942].name = "Protoss_Dragoon_get";
	methods[942].signature = "()J";
	methods[942].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Dragoon_1get;

	methods[943].name = "Protoss_High_Templar_get";
	methods[943].signature = "()J";
	methods[943].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1High_1Templar_1get;

	methods[944].name = "Protoss_Archon_get";
	methods[944].signature = "()J";
	methods[944].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Archon_1get;

	methods[945].name = "Protoss_Shuttle_get";
	methods[945].signature = "()J";
	methods[945].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Shuttle_1get;

	methods[946].name = "Protoss_Scout_get";
	methods[946].signature = "()J";
	methods[946].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Scout_1get;

	methods[947].name = "Protoss_Arbiter_get";
	methods[947].signature = "()J";
	methods[947].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Arbiter_1get;

	methods[948].name = "Protoss_Carrier_get";
	methods[948].signature = "()J";
	methods[948].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Carrier_1get;

	methods[949].name = "Protoss_Interceptor_get";
	methods[949].signature = "()J";
	methods[949].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Interceptor_1get;

	methods[950].name = "Protoss_Reaver_get";
	methods[950].signature = "()J";
	methods[950].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Reaver_1get;

	methods[951].name = "Protoss_Observer_get";
	methods[951].signature = "()J";
	methods[951].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Observer_1get;

	methods[952].name = "Protoss_Scarab_get";
	methods[952].signature = "()J";
	methods[952].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Scarab_1get;

	methods[953].name = "Critter_Rhynadon_get";
	methods[953].signature = "()J";
	methods[953].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Rhynadon_1get;

	methods[954].name = "Critter_Bengalaas_get";
	methods[954].signature = "()J";
	methods[954].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Bengalaas_1get;

	methods[955].name = "Critter_Scantid_get";
	methods[955].signature = "()J";
	methods[955].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Scantid_1get;

	methods[956].name = "Critter_Kakaru_get";
	methods[956].signature = "()J";
	methods[956].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Kakaru_1get;

	methods[957].name = "Critter_Ragnasaur_get";
	methods[957].signature = "()J";
	methods[957].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Ragnasaur_1get;

	methods[958].name = "Critter_Ursadon_get";
	methods[958].signature = "()J";
	methods[958].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Critter_1Ursadon_1get;

	methods[959].name = "Zerg_Lurker_Egg_get";
	methods[959].signature = "()J";
	methods[959].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lurker_1Egg_1get;

	methods[960].name = "Zerg_Lurker_get";
	methods[960].signature = "()J";
	methods[960].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lurker_1get;

	methods[961].name = "Spell_Disruption_Web_get";
	methods[961].signature = "()J";
	methods[961].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Disruption_1Web_1get;

	methods[962].name = "Terran_Command_Center_get";
	methods[962].signature = "()J";
	methods[962].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Command_1Center_1get;

	methods[963].name = "Terran_Comsat_Station_get";
	methods[963].signature = "()J";
	methods[963].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Comsat_1Station_1get;

	methods[964].name = "Terran_Nuclear_Silo_get";
	methods[964].signature = "()J";
	methods[964].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Nuclear_1Silo_1get;

	methods[965].name = "Terran_Supply_Depot_get";
	methods[965].signature = "()J";
	methods[965].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Supply_1Depot_1get;

	methods[966].name = "Terran_Refinery_get";
	methods[966].signature = "()J";
	methods[966].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Refinery_1get;

	methods[967].name = "Terran_Barracks_get";
	methods[967].signature = "()J";
	methods[967].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Barracks_1get;

	methods[968].name = "Terran_Academy_get";
	methods[968].signature = "()J";
	methods[968].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Academy_1get;

	methods[969].name = "Terran_Factory_get";
	methods[969].signature = "()J";
	methods[969].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Factory_1get;

	methods[970].name = "Terran_Starport_get";
	methods[970].signature = "()J";
	methods[970].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Starport_1get;

	methods[971].name = "Terran_Control_Tower_get";
	methods[971].signature = "()J";
	methods[971].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Control_1Tower_1get;

	methods[972].name = "Terran_Science_Facility_get";
	methods[972].signature = "()J";
	methods[972].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Science_1Facility_1get;

	methods[973].name = "Terran_Covert_Ops_get";
	methods[973].signature = "()J";
	methods[973].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Covert_1Ops_1get;

	methods[974].name = "Terran_Physics_Lab_get";
	methods[974].signature = "()J";
	methods[974].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Physics_1Lab_1get;

	methods[975].name = "Terran_Machine_Shop_get";
	methods[975].signature = "()J";
	methods[975].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Machine_1Shop_1get;

	methods[976].name = "Terran_Engineering_Bay_get";
	methods[976].signature = "()J";
	methods[976].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Engineering_1Bay_1get;

	methods[977].name = "Terran_Armory_get";
	methods[977].signature = "()J";
	methods[977].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Armory_1get;

	methods[978].name = "Terran_Missile_Turret_get";
	methods[978].signature = "()J";
	methods[978].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Missile_1Turret_1get;

	methods[979].name = "Terran_Bunker_get";
	methods[979].signature = "()J";
	methods[979].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Bunker_1get;

	methods[980].name = "Special_Crashed_Norad_II_get";
	methods[980].signature = "()J";
	methods[980].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Crashed_1Norad_1II_1get;

	methods[981].name = "Special_Ion_Cannon_get";
	methods[981].signature = "()J";
	methods[981].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Ion_1Cannon_1get;

	methods[982].name = "Zerg_Infested_Command_Center_get";
	methods[982].signature = "()J";
	methods[982].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Infested_1Command_1Center_1get;

	methods[983].name = "Zerg_Hatchery_get";
	methods[983].signature = "()J";
	methods[983].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hatchery_1get;

	methods[984].name = "Zerg_Lair_get";
	methods[984].signature = "()J";
	methods[984].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Lair_1get;

	methods[985].name = "Zerg_Hive_get";
	methods[985].signature = "()J";
	methods[985].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hive_1get;

	methods[986].name = "Zerg_Nydus_Canal_get";
	methods[986].signature = "()J";
	methods[986].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Nydus_1Canal_1get;

	methods[987].name = "Zerg_Hydralisk_Den_get";
	methods[987].signature = "()J";
	methods[987].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Hydralisk_1Den_1get;

	methods[988].name = "Zerg_Defiler_Mound_get";
	methods[988].signature = "()J";
	methods[988].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Defiler_1Mound_1get;

	methods[989].name = "Zerg_Greater_Spire_get";
	methods[989].signature = "()J";
	methods[989].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Greater_1Spire_1get;

	methods[990].name = "Zerg_Queens_Nest_get";
	methods[990].signature = "()J";
	methods[990].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Queens_1Nest_1get;

	methods[991].name = "Zerg_Evolution_Chamber_get";
	methods[991].signature = "()J";
	methods[991].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Evolution_1Chamber_1get;

	methods[992].name = "Zerg_Ultralisk_Cavern_get";
	methods[992].signature = "()J";
	methods[992].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Ultralisk_1Cavern_1get;

	methods[993].name = "Zerg_Spire_get";
	methods[993].signature = "()J";
	methods[993].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spire_1get;

	methods[994].name = "Zerg_Spawning_Pool_get";
	methods[994].signature = "()J";
	methods[994].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spawning_1Pool_1get;

	methods[995].name = "Zerg_Creep_Colony_get";
	methods[995].signature = "()J";
	methods[995].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Creep_1Colony_1get;

	methods[996].name = "Zerg_Spore_Colony_get";
	methods[996].signature = "()J";
	methods[996].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Spore_1Colony_1get;

	methods[997].name = "Zerg_Sunken_Colony_get";
	methods[997].signature = "()J";
	methods[997].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Sunken_1Colony_1get;

	methods[998].name = "Special_Overmind_With_Shell_get";
	methods[998].signature = "()J";
	methods[998].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1With_1Shell_1get;

	methods[999].name = "Special_Overmind_get";
	methods[999].signature = "()J";
	methods[999].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1get;

	methods[1000].name = "Zerg_Extractor_get";
	methods[1000].signature = "()J";
	methods[1000].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Extractor_1get;

	methods[1001].name = "Special_Mature_Chrysalis_get";
	methods[1001].signature = "()J";
	methods[1001].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Mature_1Chrysalis_1get;

	methods[1002].name = "Special_Cerebrate_get";
	methods[1002].signature = "()J";
	methods[1002].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Cerebrate_1get;

	methods[1003].name = "Special_Cerebrate_Daggoth_get";
	methods[1003].signature = "()J";
	methods[1003].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Cerebrate_1Daggoth_1get;

	methods[1004].name = "Protoss_Nexus_get";
	methods[1004].signature = "()J";
	methods[1004].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Nexus_1get;

	methods[1005].name = "Protoss_Robotics_Facility_get";
	methods[1005].signature = "()J";
	methods[1005].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Robotics_1Facility_1get;

	methods[1006].name = "Protoss_Pylon_get";
	methods[1006].signature = "()J";
	methods[1006].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Pylon_1get;

	methods[1007].name = "Protoss_Assimilator_get";
	methods[1007].signature = "()J";
	methods[1007].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Assimilator_1get;

	methods[1008].name = "Protoss_Observatory_get";
	methods[1008].signature = "()J";
	methods[1008].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Observatory_1get;

	methods[1009].name = "Protoss_Gateway_get";
	methods[1009].signature = "()J";
	methods[1009].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Gateway_1get;

	methods[1010].name = "Protoss_Photon_Cannon_get";
	methods[1010].signature = "()J";
	methods[1010].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Photon_1Cannon_1get;

	methods[1011].name = "Protoss_Citadel_of_Adun_get";
	methods[1011].signature = "()J";
	methods[1011].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Citadel_1of_1Adun_1get;

	methods[1012].name = "Protoss_Cybernetics_Core_get";
	methods[1012].signature = "()J";
	methods[1012].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Cybernetics_1Core_1get;

	methods[1013].name = "Protoss_Templar_Archives_get";
	methods[1013].signature = "()J";
	methods[1013].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Templar_1Archives_1get;

	methods[1014].name = "Protoss_Forge_get";
	methods[1014].signature = "()J";
	methods[1014].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Forge_1get;

	methods[1015].name = "Protoss_Stargate_get";
	methods[1015].signature = "()J";
	methods[1015].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Stargate_1get;

	methods[1016].name = "Special_Stasis_Cell_Prison_get";
	methods[1016].signature = "()J";
	methods[1016].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Stasis_1Cell_1Prison_1get;

	methods[1017].name = "Protoss_Fleet_Beacon_get";
	methods[1017].signature = "()J";
	methods[1017].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Fleet_1Beacon_1get;

	methods[1018].name = "Protoss_Arbiter_Tribunal_get";
	methods[1018].signature = "()J";
	methods[1018].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Arbiter_1Tribunal_1get;

	methods[1019].name = "Protoss_Robotics_Support_Bay_get";
	methods[1019].signature = "()J";
	methods[1019].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Robotics_1Support_1Bay_1get;

	methods[1020].name = "Protoss_Shield_Battery_get";
	methods[1020].signature = "()J";
	methods[1020].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Shield_1Battery_1get;

	methods[1021].name = "Special_Khaydarin_Crystal_Form_get";
	methods[1021].signature = "()J";
	methods[1021].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Khaydarin_1Crystal_1Form_1get;

	methods[1022].name = "Special_Protoss_Temple_get";
	methods[1022].signature = "()J";
	methods[1022].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Protoss_1Temple_1get;

	methods[1023].name = "Special_XelNaga_Temple_get";
	methods[1023].signature = "()J";
	methods[1023].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1XelNaga_1Temple_1get;

	methods[1024].name = "Resource_Mineral_Field_get";
	methods[1024].signature = "()J";
	methods[1024].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Resource_1Mineral_1Field_1get;

	methods[1025].name = "Resource_Vespene_Geyser_get";
	methods[1025].signature = "()J";
	methods[1025].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Resource_1Vespene_1Geyser_1get;

	methods[1026].name = "Special_Warp_Gate_get";
	methods[1026].signature = "()J";
	methods[1026].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Warp_1Gate_1get;

	methods[1027].name = "Special_Psi_Disrupter_get";
	methods[1027].signature = "()J";
	methods[1027].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Psi_1Disrupter_1get;

	methods[1028].name = "Special_Power_Generator_get";
	methods[1028].signature = "()J";
	methods[1028].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Power_1Generator_1get;

	methods[1029].name = "Special_Overmind_Cocoon_get";
	methods[1029].signature = "()J";
	methods[1029].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Special_1Overmind_1Cocoon_1get;

	methods[1030].name = "Spell_Dark_Swarm_get";
	methods[1030].signature = "()J";
	methods[1030].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spell_1Dark_1Swarm_1get;

	methods[1031].name = "UnitTypeNone_get";
	methods[1031].signature = "()J";
	methods[1031].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeNone_1get;

	methods[1032].name = "UnitTypeUnknown_get";
	methods[1032].signature = "()J";
	methods[1032].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeUnknown_1get;

	methods[1033].name = "new_SWIG_UpgradeType__SWIG_0";
	methods[1033].signature = "()J";
	methods[1033].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_10;

	methods[1034].name = "new_SWIG_UpgradeType__SWIG_1";
	methods[1034].signature = "(I)J";
	methods[1034].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_11;

	methods[1035].name = "new_SWIG_UpgradeType__SWIG_2";
	methods[1035].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)J";
	methods[1035].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1UpgradeType_1_1SWIG_12;

	methods[1036].name = "SWIG_UpgradeType_opAssign";
	methods[1036].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)J";
	methods[1036].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opAssign;

	methods[1037].name = "SWIG_UpgradeType_opEquals";
	methods[1037].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1037].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opEquals;

	methods[1038].name = "SWIG_UpgradeType_opNotEquals";
	methods[1038].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1038].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opNotEquals;

	methods[1039].name = "SWIG_UpgradeType_opLessThan";
	methods[1039].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1039].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1opLessThan;

	methods[1040].name = "SWIG_UpgradeType_getID";
	methods[1040].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1040].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getID;

	methods[1041].name = "SWIG_UpgradeType_getName";
	methods[1041].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Ljava/lang/String;";
	methods[1041].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getName;

	methods[1042].name = "SWIG_UpgradeType_getRace";
	methods[1042].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)J";
	methods[1042].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1getRace;

	methods[1043].name = "SWIG_UpgradeType_mineralPriceBase";
	methods[1043].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1043].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1mineralPriceBase;

	methods[1044].name = "SWIG_UpgradeType_mineralPriceFactor";
	methods[1044].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1044].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1mineralPriceFactor;

	methods[1045].name = "SWIG_UpgradeType_gasPriceBase";
	methods[1045].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1045].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1gasPriceBase;

	methods[1046].name = "SWIG_UpgradeType_gasPriceFactor";
	methods[1046].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1046].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1gasPriceFactor;

	methods[1047].name = "SWIG_UpgradeType_upgradeTimeBase";
	methods[1047].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1047].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1upgradeTimeBase;

	methods[1048].name = "SWIG_UpgradeType_upgradeTimeFactor";
	methods[1048].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1048].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1upgradeTimeFactor;

	methods[1049].name = "SWIG_UpgradeType_maxRepeats";
	methods[1049].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)I";
	methods[1049].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1maxRepeats;

	methods[1050].name = "SWIG_UpgradeType_whatUpgrades";
	methods[1050].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)J";
	methods[1050].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1whatUpgrades;

	methods[1051].name = "SWIG_UpgradeType_whatUses";
	methods[1051].signature = "(JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)J";
	methods[1051].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1UpgradeType_1whatUses;

	methods[1052].name = "delete_SWIG_UpgradeType";
	methods[1052].signature = "(J)V";
	methods[1052].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1UpgradeType;

	methods[1053].name = "getUpgradeType";
	methods[1053].signature = "(J)J";
	methods[1053].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getUpgradeType;

	methods[1054].name = "allUpgradeTypes";
	methods[1054].signature = "()J";
	methods[1054].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allUpgradeTypes;

	methods[1055].name = "initUpgradeTypes";
	methods[1055].signature = "()V";
	methods[1055].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initUpgradeTypes;

	methods[1056].name = "Terran_Infantry_Armor_get";
	methods[1056].signature = "()J";
	methods[1056].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Infantry_1Armor_1get;

	methods[1057].name = "Terran_Vehicle_Plating_get";
	methods[1057].signature = "()J";
	methods[1057].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vehicle_1Plating_1get;

	methods[1058].name = "Terran_Ship_Plating_get";
	methods[1058].signature = "()J";
	methods[1058].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ship_1Plating_1get;

	methods[1059].name = "Zerg_Carapace_get";
	methods[1059].signature = "()J";
	methods[1059].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Carapace_1get;

	methods[1060].name = "Zerg_Flyer_Carapace_get";
	methods[1060].signature = "()J";
	methods[1060].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Flyer_1Carapace_1get;

	methods[1061].name = "Protoss_Armor_get";
	methods[1061].signature = "()J";
	methods[1061].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Armor_1get;

	methods[1062].name = "Protoss_Plating_get";
	methods[1062].signature = "()J";
	methods[1062].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Plating_1get;

	methods[1063].name = "Terran_Infantry_Weapons_get";
	methods[1063].signature = "()J";
	methods[1063].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Infantry_1Weapons_1get;

	methods[1064].name = "Terran_Vehicle_Weapons_get";
	methods[1064].signature = "()J";
	methods[1064].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Vehicle_1Weapons_1get;

	methods[1065].name = "Terran_Ship_Weapons_get";
	methods[1065].signature = "()J";
	methods[1065].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Terran_1Ship_1Weapons_1get;

	methods[1066].name = "Zerg_Melee_Attacks_get";
	methods[1066].signature = "()J";
	methods[1066].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Melee_1Attacks_1get;

	methods[1067].name = "Zerg_Missile_Attacks_get";
	methods[1067].signature = "()J";
	methods[1067].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Missile_1Attacks_1get;

	methods[1068].name = "Zerg_Flyer_Attacks_get";
	methods[1068].signature = "()J";
	methods[1068].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Zerg_1Flyer_1Attacks_1get;

	methods[1069].name = "Protoss_Ground_Weapons_get";
	methods[1069].signature = "()J";
	methods[1069].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Ground_1Weapons_1get;

	methods[1070].name = "Protoss_Air_Weapons_get";
	methods[1070].signature = "()J";
	methods[1070].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Air_1Weapons_1get;

	methods[1071].name = "Protoss_Plasma_Shields_get";
	methods[1071].signature = "()J";
	methods[1071].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Protoss_1Plasma_1Shields_1get;

	methods[1072].name = "U_238_Shells_get";
	methods[1072].signature = "()J";
	methods[1072].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_U_1238_1Shells_1get;

	methods[1073].name = "Ion_Thrusters_get";
	methods[1073].signature = "()J";
	methods[1073].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Ion_1Thrusters_1get;

	methods[1074].name = "Titan_Reactor_get";
	methods[1074].signature = "()J";
	methods[1074].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Titan_1Reactor_1get;

	methods[1075].name = "Ocular_Implants_get";
	methods[1075].signature = "()J";
	methods[1075].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Ocular_1Implants_1get;

	methods[1076].name = "Moebius_Reactor_get";
	methods[1076].signature = "()J";
	methods[1076].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Moebius_1Reactor_1get;

	methods[1077].name = "Apollo_Reactor_get";
	methods[1077].signature = "()J";
	methods[1077].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Apollo_1Reactor_1get;

	methods[1078].name = "Colossus_Reactor_get";
	methods[1078].signature = "()J";
	methods[1078].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Colossus_1Reactor_1get;

	methods[1079].name = "Ventral_Sacs_get";
	methods[1079].signature = "()J";
	methods[1079].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Ventral_1Sacs_1get;

	methods[1080].name = "Antennae_get";
	methods[1080].signature = "()J";
	methods[1080].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Antennae_1get;

	methods[1081].name = "Pneumatized_Carapace_get";
	methods[1081].signature = "()J";
	methods[1081].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Pneumatized_1Carapace_1get;

	methods[1082].name = "Metabolic_Boost_get";
	methods[1082].signature = "()J";
	methods[1082].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Metabolic_1Boost_1get;

	methods[1083].name = "Adrenal_Glands_get";
	methods[1083].signature = "()J";
	methods[1083].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Adrenal_1Glands_1get;

	methods[1084].name = "Muscular_Augments_get";
	methods[1084].signature = "()J";
	methods[1084].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Muscular_1Augments_1get;

	methods[1085].name = "Grooved_Spines_get";
	methods[1085].signature = "()J";
	methods[1085].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Grooved_1Spines_1get;

	methods[1086].name = "Gamete_Meiosis_get";
	methods[1086].signature = "()J";
	methods[1086].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gamete_1Meiosis_1get;

	methods[1087].name = "Metasynaptic_Node_get";
	methods[1087].signature = "()J";
	methods[1087].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Metasynaptic_1Node_1get;

	methods[1088].name = "Singularity_Charge_get";
	methods[1088].signature = "()J";
	methods[1088].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Singularity_1Charge_1get;

	methods[1089].name = "Leg_Enhancements_get";
	methods[1089].signature = "()J";
	methods[1089].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Leg_1Enhancements_1get;

	methods[1090].name = "Scarab_Damage_get";
	methods[1090].signature = "()J";
	methods[1090].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Scarab_1Damage_1get;

	methods[1091].name = "Reaver_Capacity_get";
	methods[1091].signature = "()J";
	methods[1091].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Reaver_1Capacity_1get;

	methods[1092].name = "Gravitic_Drive_get";
	methods[1092].signature = "()J";
	methods[1092].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Drive_1get;

	methods[1093].name = "Sensor_Array_get";
	methods[1093].signature = "()J";
	methods[1093].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Sensor_1Array_1get;

	methods[1094].name = "Gravitic_Boosters_get";
	methods[1094].signature = "()J";
	methods[1094].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Boosters_1get;

	methods[1095].name = "Khaydarin_Amulet_get";
	methods[1095].signature = "()J";
	methods[1095].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Khaydarin_1Amulet_1get;

	methods[1096].name = "Apial_Sensors_get";
	methods[1096].signature = "()J";
	methods[1096].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Apial_1Sensors_1get;

	methods[1097].name = "Gravitic_Thrusters_get";
	methods[1097].signature = "()J";
	methods[1097].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gravitic_1Thrusters_1get;

	methods[1098].name = "Carrier_Capacity_get";
	methods[1098].signature = "()J";
	methods[1098].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Carrier_1Capacity_1get;

	methods[1099].name = "Khaydarin_Core_get";
	methods[1099].signature = "()J";
	methods[1099].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Khaydarin_1Core_1get;

	methods[1100].name = "Argus_Jewel_get";
	methods[1100].signature = "()J";
	methods[1100].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Argus_1Jewel_1get;

	methods[1101].name = "Argus_Talisman_get";
	methods[1101].signature = "()J";
	methods[1101].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Argus_1Talisman_1get;

	methods[1102].name = "Caduceus_Reactor_get";
	methods[1102].signature = "()J";
	methods[1102].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Caduceus_1Reactor_1get;

	methods[1103].name = "Chitinous_Plating_get";
	methods[1103].signature = "()J";
	methods[1103].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Chitinous_1Plating_1get;

	methods[1104].name = "Anabolic_Synthesis_get";
	methods[1104].signature = "()J";
	methods[1104].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Anabolic_1Synthesis_1get;

	methods[1105].name = "Charon_Booster_get";
	methods[1105].signature = "()J";
	methods[1105].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Charon_1Booster_1get;

	methods[1106].name = "UpgradeTypeNone_get";
	methods[1106].signature = "()J";
	methods[1106].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeNone_1get;

	methods[1107].name = "UpgradeTypeUnknown_get";
	methods[1107].signature = "()J";
	methods[1107].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeUnknown_1get;

	methods[1108].name = "new_SWIG_WeaponType__SWIG_0";
	methods[1108].signature = "()J";
	methods[1108].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_10;

	methods[1109].name = "new_SWIG_WeaponType__SWIG_1";
	methods[1109].signature = "(I)J";
	methods[1109].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_11;

	methods[1110].name = "new_SWIG_WeaponType__SWIG_2";
	methods[1110].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1110].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1WeaponType_1_1SWIG_12;

	methods[1111].name = "SWIG_WeaponType_opAssign";
	methods[1111].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1111].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opAssign;

	methods[1112].name = "SWIG_WeaponType_opEquals";
	methods[1112].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1112].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opEquals;

	methods[1113].name = "SWIG_WeaponType_opNotEquals";
	methods[1113].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1113].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opNotEquals;

	methods[1114].name = "SWIG_WeaponType_opLessThan";
	methods[1114].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1114].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1opLessThan;

	methods[1115].name = "SWIG_WeaponType_getID";
	methods[1115].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1115].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getID;

	methods[1116].name = "SWIG_WeaponType_getName";
	methods[1116].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Ljava/lang/String;";
	methods[1116].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getName;

	methods[1117].name = "SWIG_WeaponType_getTech";
	methods[1117].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1117].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1getTech;

	methods[1118].name = "SWIG_WeaponType_whatUses";
	methods[1118].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1118].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1whatUses;

	methods[1119].name = "SWIG_WeaponType_damageAmount";
	methods[1119].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1119].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageAmount;

	methods[1120].name = "SWIG_WeaponType_damageBonus";
	methods[1120].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1120].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageBonus;

	methods[1121].name = "SWIG_WeaponType_damageCooldown";
	methods[1121].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1121].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageCooldown;

	methods[1122].name = "SWIG_WeaponType_damageFactor";
	methods[1122].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1122].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageFactor;

	methods[1123].name = "SWIG_WeaponType_upgradeType";
	methods[1123].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1123].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1upgradeType;

	methods[1124].name = "SWIG_WeaponType_damageType";
	methods[1124].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1124].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1damageType;

	methods[1125].name = "SWIG_WeaponType_explosionType";
	methods[1125].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)J";
	methods[1125].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1explosionType;

	methods[1126].name = "SWIG_WeaponType_minRange";
	methods[1126].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1126].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1minRange;

	methods[1127].name = "SWIG_WeaponType_maxRange";
	methods[1127].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1127].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1maxRange;

	methods[1128].name = "SWIG_WeaponType_innerSplashRadius";
	methods[1128].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1128].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1innerSplashRadius;

	methods[1129].name = "SWIG_WeaponType_medianSplashRadius";
	methods[1129].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1129].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1medianSplashRadius;

	methods[1130].name = "SWIG_WeaponType_outerSplashRadius";
	methods[1130].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)I";
	methods[1130].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1outerSplashRadius;

	methods[1131].name = "SWIG_WeaponType_targetsAir";
	methods[1131].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1131].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsAir;

	methods[1132].name = "SWIG_WeaponType_targetsGround";
	methods[1132].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1132].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsGround;

	methods[1133].name = "SWIG_WeaponType_targetsMechanical";
	methods[1133].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1133].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsMechanical;

	methods[1134].name = "SWIG_WeaponType_targetsOrganic";
	methods[1134].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1134].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOrganic;

	methods[1135].name = "SWIG_WeaponType_targetsNonBuilding";
	methods[1135].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1135].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsNonBuilding;

	methods[1136].name = "SWIG_WeaponType_targetsNonRobotic";
	methods[1136].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1136].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsNonRobotic;

	methods[1137].name = "SWIG_WeaponType_targetsTerrain";
	methods[1137].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1137].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsTerrain;

	methods[1138].name = "SWIG_WeaponType_targetsOrgOrMech";
	methods[1138].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1138].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOrgOrMech;

	methods[1139].name = "SWIG_WeaponType_targetsOwn";
	methods[1139].signature = "(JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1139].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1WeaponType_1targetsOwn;

	methods[1140].name = "delete_SWIG_WeaponType";
	methods[1140].signature = "(J)V";
	methods[1140].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1WeaponType;

	methods[1141].name = "getWeaponType";
	methods[1141].signature = "(J)J";
	methods[1141].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getWeaponType;

	methods[1142].name = "allWeaponTypes";
	methods[1142].signature = "()J";
	methods[1142].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_allWeaponTypes;

	methods[1143].name = "normalWeaponTypes";
	methods[1143].signature = "()J";
	methods[1143].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_normalWeaponTypes;

	methods[1144].name = "specialWeaponTypes";
	methods[1144].signature = "()J";
	methods[1144].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_specialWeaponTypes;

	methods[1145].name = "initWeaponTypes";
	methods[1145].signature = "()V";
	methods[1145].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_initWeaponTypes;

	methods[1146].name = "Gauss_Rifle_get";
	methods[1146].signature = "()J";
	methods[1146].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Gauss_1Rifle_1get;

	methods[1147].name = "C_10_Canister_Rifle_get";
	methods[1147].signature = "()J";
	methods[1147].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_C_110_1Canister_1Rifle_1get;

	methods[1148].name = "WeaponTypeFragmentation_Grenade_get";
	methods[1148].signature = "()J";
	methods[1148].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeFragmentation_1Grenade_1get;

	methods[1149].name = "WeaponTypeSpider_Mines_get";
	methods[1149].signature = "()J";
	methods[1149].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSpider_1Mines_1get;

	methods[1150].name = "Twin_Autocannons_get";
	methods[1150].signature = "()J";
	methods[1150].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Twin_1Autocannons_1get;

	methods[1151].name = "Hellfire_Missile_Pack_get";
	methods[1151].signature = "()J";
	methods[1151].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Hellfire_1Missile_1Pack_1get;

	methods[1152].name = "Arclite_Cannon_get";
	methods[1152].signature = "()J";
	methods[1152].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Cannon_1get;

	methods[1153].name = "Fusion_Cutter_get";
	methods[1153].signature = "()J";
	methods[1153].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Fusion_1Cutter_1get;

	methods[1154].name = "WeaponTypeGemini_Missiles_get";
	methods[1154].signature = "()J";
	methods[1154].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeGemini_1Missiles_1get;

	methods[1155].name = "WeaponTypeBurst_Lasers_get";
	methods[1155].signature = "()J";
	methods[1155].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeBurst_1Lasers_1get;

	methods[1156].name = "ATS_Laser_Battery_get";
	methods[1156].signature = "()J";
	methods[1156].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ATS_1Laser_1Battery_1get;

	methods[1157].name = "ATA_Laser_Battery_get";
	methods[1157].signature = "()J";
	methods[1157].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ATA_1Laser_1Battery_1get;

	methods[1158].name = "Flame_Thrower_get";
	methods[1158].signature = "()J";
	methods[1158].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Flame_1Thrower_1get;

	methods[1159].name = "Arclite_Shock_Cannon_get";
	methods[1159].signature = "()J";
	methods[1159].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Arclite_1Shock_1Cannon_1get;

	methods[1160].name = "WeaponTypeLongbolt_Missile_get";
	methods[1160].signature = "()J";
	methods[1160].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeLongbolt_1Missile_1get;

	methods[1161].name = "Claws_get";
	methods[1161].signature = "()J";
	methods[1161].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Claws_1get;

	methods[1162].name = "Needle_Spines_get";
	methods[1162].signature = "()J";
	methods[1162].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Needle_1Spines_1get;

	methods[1163].name = "Kaiser_Blades_get";
	methods[1163].signature = "()J";
	methods[1163].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Kaiser_1Blades_1get;

	methods[1164].name = "Toxic_Spores_get";
	methods[1164].signature = "()J";
	methods[1164].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Toxic_1Spores_1get;

	methods[1165].name = "Spines_get";
	methods[1165].signature = "()J";
	methods[1165].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spines_1get;

	methods[1166].name = "WeaponTypeAcid_Spore_get";
	methods[1166].signature = "()J";
	methods[1166].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeAcid_1Spore_1get;

	methods[1167].name = "WeaponTypeGlave_Wurm_get";
	methods[1167].signature = "()J";
	methods[1167].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeGlave_1Wurm_1get;

	methods[1168].name = "WeaponTypeSeeker_Spores_get";
	methods[1168].signature = "()J";
	methods[1168].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSeeker_1Spores_1get;

	methods[1169].name = "Subterranean_Tentacle_get";
	methods[1169].signature = "()J";
	methods[1169].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Subterranean_1Tentacle_1get;

	methods[1170].name = "Suicide_Infested_Terran_get";
	methods[1170].signature = "()J";
	methods[1170].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Suicide_1Infested_1Terran_1get;

	methods[1171].name = "Suicide_Scourge_get";
	methods[1171].signature = "()J";
	methods[1171].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Suicide_1Scourge_1get;

	methods[1172].name = "Particle_Beam_get";
	methods[1172].signature = "()J";
	methods[1172].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Particle_1Beam_1get;

	methods[1173].name = "Psi_Blades_get";
	methods[1173].signature = "()J";
	methods[1173].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Psi_1Blades_1get;

	methods[1174].name = "WeaponTypePhase_Disruptor_get";
	methods[1174].signature = "()J";
	methods[1174].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePhase_1Disruptor_1get;

	methods[1175].name = "Psionic_Shockwave_get";
	methods[1175].signature = "()J";
	methods[1175].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Psionic_1Shockwave_1get;

	methods[1176].name = "Dual_Photon_Blasters_get";
	methods[1176].signature = "()J";
	methods[1176].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Dual_1Photon_1Blasters_1get;

	methods[1177].name = "Anti_Matter_Missiles_get";
	methods[1177].signature = "()J";
	methods[1177].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Anti_1Matter_1Missiles_1get;

	methods[1178].name = "Phase_Disruptor_Cannon_get";
	methods[1178].signature = "()J";
	methods[1178].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Phase_1Disruptor_1Cannon_1get;

	methods[1179].name = "WeaponTypePulse_Cannon_get";
	methods[1179].signature = "()J";
	methods[1179].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePulse_1Cannon_1get;

	methods[1180].name = "STS_Photon_Cannon_get";
	methods[1180].signature = "()J";
	methods[1180].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_STS_1Photon_1Cannon_1get;

	methods[1181].name = "STA_Photon_Cannon_get";
	methods[1181].signature = "()J";
	methods[1181].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_STA_1Photon_1Cannon_1get;

	methods[1182].name = "Scarab_get";
	methods[1182].signature = "()J";
	methods[1182].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Scarab_1get;

	methods[1183].name = "WeaponTypeNeutron_Flare_get";
	methods[1183].signature = "()J";
	methods[1183].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNeutron_1Flare_1get;

	methods[1184].name = "WeaponTypeHalo_Rockets_get";
	methods[1184].signature = "()J";
	methods[1184].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeHalo_1Rockets_1get;

	methods[1185].name = "WeaponTypeCorrosive_Acid_get";
	methods[1185].signature = "()J";
	methods[1185].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeCorrosive_1Acid_1get;

	methods[1186].name = "WeaponTypeSubterranean_Spines_get";
	methods[1186].signature = "()J";
	methods[1186].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSubterranean_1Spines_1get;

	methods[1187].name = "Warp_Blades_get";
	methods[1187].signature = "()J";
	methods[1187].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Warp_1Blades_1get;

	methods[1188].name = "WeaponTypeYamato_Gun_get";
	methods[1188].signature = "()J";
	methods[1188].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeYamato_1Gun_1get;

	methods[1189].name = "WeaponTypeNuclear_Strike_get";
	methods[1189].signature = "()J";
	methods[1189].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNuclear_1Strike_1get;

	methods[1190].name = "Lockdown_get";
	methods[1190].signature = "()J";
	methods[1190].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Lockdown_1get;

	methods[1191].name = "EMP_Shockwave_get";
	methods[1191].signature = "()J";
	methods[1191].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_EMP_1Shockwave_1get;

	methods[1192].name = "WeaponTypeIrradiate_get";
	methods[1192].signature = "()J";
	methods[1192].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeIrradiate_1get;

	methods[1193].name = "Parasite_get";
	methods[1193].signature = "()J";
	methods[1193].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Parasite_1get;

	methods[1194].name = "Spawn_Broodlings_get";
	methods[1194].signature = "()J";
	methods[1194].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Spawn_1Broodlings_1get;

	methods[1195].name = "WeaponTypeEnsnare_get";
	methods[1195].signature = "()J";
	methods[1195].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeEnsnare_1get;

	methods[1196].name = "Dark_Swarm_get";
	methods[1196].signature = "()J";
	methods[1196].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Dark_1Swarm_1get;

	methods[1197].name = "WeaponTypePlague_get";
	methods[1197].signature = "()J";
	methods[1197].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePlague_1get;

	methods[1198].name = "WeaponTypeConsume_get";
	methods[1198].signature = "()J";
	methods[1198].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeConsume_1get;

	methods[1199].name = "Stasis_Field_get";
	methods[1199].signature = "()J";
	methods[1199].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Stasis_1Field_1get;

	methods[1200].name = "WeaponTypePsionic_Storm_get";
	methods[1200].signature = "()J";
	methods[1200].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypePsionic_1Storm_1get;

	methods[1201].name = "Disruption_Web_get";
	methods[1201].signature = "()J";
	methods[1201].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Disruption_1Web_1get;

	methods[1202].name = "WeaponTypeRestoration_get";
	methods[1202].signature = "()J";
	methods[1202].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeRestoration_1get;

	methods[1203].name = "WeaponTypeMind_Control_get";
	methods[1203].signature = "()J";
	methods[1203].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeMind_1Control_1get;

	methods[1204].name = "Feedback_get";
	methods[1204].signature = "()J";
	methods[1204].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Feedback_1get;

	methods[1205].name = "Optical_Flare_get";
	methods[1205].signature = "()J";
	methods[1205].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Optical_1Flare_1get;

	methods[1206].name = "Maelstrom_get";
	methods[1206].signature = "()J";
	methods[1206].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_Maelstrom_1get;

	methods[1207].name = "WeaponTypeNone_get";
	methods[1207].signature = "()J";
	methods[1207].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeNone_1get;

	methods[1208].name = "WeaponTypeUnknown_get";
	methods[1208].signature = "()J";
	methods[1208].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeUnknown_1get;

	methods[1209].name = "readMap";
	methods[1209].signature = "()V";
	methods[1209].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_readMap;

	methods[1210].name = "analyze";
	methods[1210].signature = "()V";
	methods[1210].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_analyze;

	methods[1211].name = "getRegions";
	methods[1211].signature = "()J";
	methods[1211].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getRegions;

	methods[1212].name = "getChokepoints";
	methods[1212].signature = "()J";
	methods[1212].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getChokepoints;

	methods[1213].name = "getBaseLocations";
	methods[1213].signature = "()J";
	methods[1213].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getBaseLocations;

	methods[1214].name = "getStartLocations";
	methods[1214].signature = "()J";
	methods[1214].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getStartLocations;

	methods[1215].name = "getUnwalkablePolygons";
	methods[1215].signature = "()J";
	methods[1215].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getUnwalkablePolygons;

	methods[1216].name = "getNearestUnwalkablePosition";
	methods[1216].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[1216].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getNearestUnwalkablePosition;

	methods[1217].name = "getStartLocation";
	methods[1217].signature = "(JLorg/bwapi/bridge/swig/SWIG_Player;)J";
	methods[1217].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getStartLocation;

	methods[1218].name = "getNearestBaseLocation";
	methods[1218].signature = "(JLorg/bwapi/bridge/swig/SWIG_TilePosition;)J";
	methods[1218].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_getNearestBaseLocation;

	methods[1219].name = "SWIG_BaseLocation_getPosition";
	methods[1219].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1219].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getPosition;

	methods[1220].name = "SWIG_BaseLocation_getTilePosition";
	methods[1220].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1220].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getTilePosition;

	methods[1221].name = "SWIG_BaseLocation_getRegion";
	methods[1221].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1221].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getRegion;

	methods[1222].name = "SWIG_BaseLocation_minerals";
	methods[1222].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)I";
	methods[1222].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1minerals;

	methods[1223].name = "SWIG_BaseLocation_gas";
	methods[1223].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)I";
	methods[1223].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1gas;

	methods[1224].name = "SWIG_BaseLocation_getMinerals";
	methods[1224].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1224].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getMinerals;

	methods[1225].name = "SWIG_BaseLocation_getStaticMinerals";
	methods[1225].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1225].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getStaticMinerals;

	methods[1226].name = "SWIG_BaseLocation_getGeysers";
	methods[1226].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)J";
	methods[1226].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getGeysers;

	methods[1227].name = "SWIG_BaseLocation_getGroundDistance";
	methods[1227].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)D";
	methods[1227].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getGroundDistance;

	methods[1228].name = "SWIG_BaseLocation_getAirDistance";
	methods[1228].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)D";
	methods[1228].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1getAirDistance;

	methods[1229].name = "SWIG_BaseLocation_isIsland";
	methods[1229].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1229].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isIsland;

	methods[1230].name = "SWIG_BaseLocation_isMineralOnly";
	methods[1230].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1230].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isMineralOnly;

	methods[1231].name = "SWIG_BaseLocation_isStartLocation";
	methods[1231].signature = "(JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1231].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1BaseLocation_1isStartLocation;

	methods[1232].name = "delete_SWIG_BaseLocation";
	methods[1232].signature = "(J)V";
	methods[1232].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1BaseLocation;

	methods[1233].name = "SWIG_Chokepoint_getRegions";
	methods[1233].signature = "(JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)J";
	methods[1233].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getRegions;

	methods[1234].name = "SWIG_Chokepoint_getSides";
	methods[1234].signature = "(JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)J";
	methods[1234].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getSides;

	methods[1235].name = "SWIG_Chokepoint_getCenter";
	methods[1235].signature = "(JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)J";
	methods[1235].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getCenter;

	methods[1236].name = "SWIG_Chokepoint_getWidth";
	methods[1236].signature = "(JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)D";
	methods[1236].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Chokepoint_1getWidth;

	methods[1237].name = "delete_SWIG_Chokepoint";
	methods[1237].signature = "(J)V";
	methods[1237].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Chokepoint;

	methods[1238].name = "new_SWIG_Polygon";
	methods[1238].signature = "()J";
	methods[1238].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1SWIG_1Polygon;

	methods[1239].name = "SWIG_Polygon_getArea";
	methods[1239].signature = "(JLorg/bwapi/bridge/swig/SWIG_Polygon;)D";
	methods[1239].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getArea;

	methods[1240].name = "SWIG_Polygon_getPerimeter";
	methods[1240].signature = "(JLorg/bwapi/bridge/swig/SWIG_Polygon;)D";
	methods[1240].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getPerimeter;

	methods[1241].name = "SWIG_Polygon_getCenter";
	methods[1241].signature = "(JLorg/bwapi/bridge/swig/SWIG_Polygon;)J";
	methods[1241].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getCenter;

	methods[1242].name = "SWIG_Polygon_isInside";
	methods[1242].signature = "(JLorg/bwapi/bridge/swig/SWIG_Polygon;JLorg/bwapi/bridge/swig/SWIG_Position;)Z";
	methods[1242].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1isInside;

	methods[1243].name = "SWIG_Polygon_getNearestPoint";
	methods[1243].signature = "(JLorg/bwapi/bridge/swig/SWIG_Polygon;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[1243].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Polygon_1getNearestPoint;

	methods[1244].name = "delete_SWIG_Polygon";
	methods[1244].signature = "(J)V";
	methods[1244].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Polygon;

	methods[1245].name = "SWIG_Region_getPolygon";
	methods[1245].signature = "(JLorg/bwapi/bridge/swig/SWIG_Region;)J";
	methods[1245].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getPolygon;

	methods[1246].name = "SWIG_Region_getCenter";
	methods[1246].signature = "(JLorg/bwapi/bridge/swig/SWIG_Region;)J";
	methods[1246].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getCenter;

	methods[1247].name = "SWIG_Region_getChokepoints";
	methods[1247].signature = "(JLorg/bwapi/bridge/swig/SWIG_Region;)J";
	methods[1247].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getChokepoints;

	methods[1248].name = "SWIG_Region_getBaseLocations";
	methods[1248].signature = "(JLorg/bwapi/bridge/swig/SWIG_Region;)J";
	methods[1248].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_SWIG_1Region_1getBaseLocations;

	methods[1249].name = "delete_SWIG_Region";
	methods[1249].signature = "(J)V";
	methods[1249].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1SWIG_1Region;

	methods[1250].name = "new_DamageTypeSet";
	methods[1250].signature = "(J)J";
	methods[1250].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1DamageTypeSet;

	methods[1251].name = "delete_DamageTypeSet";
	methods[1251].signature = "(J)V";
	methods[1251].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1DamageTypeSet;

	methods[1252].name = "DamageTypeSet_size";
	methods[1252].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSet;)I";
	methods[1252].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1size;

	methods[1253].name = "DamageTypeSet_contains";
	methods[1253].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSet;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[1253].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1contains;

	methods[1254].name = "DamageTypeSet_add";
	methods[1254].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSet;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[1254].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1add;

	methods[1255].name = "DamageTypeSet_clear";
	methods[1255].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSet;)V";
	methods[1255].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1clear;

	methods[1256].name = "DamageTypeSet_remove";
	methods[1256].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSet;JLorg/bwapi/bridge/swig/SWIG_DamageType;)Z";
	methods[1256].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSet_1remove;

	methods[1257].name = "new_DamageTypeSetIterator";
	methods[1257].signature = "(J)J";
	methods[1257].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1DamageTypeSetIterator;

	methods[1258].name = "DamageTypeSetIterator_hasNext";
	methods[1258].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSetIterator;)Z";
	methods[1258].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSetIterator_1hasNext;

	methods[1259].name = "DamageTypeSetIterator_next";
	methods[1259].signature = "(JLorg/bwapi/bridge/swig/DamageTypeSetIterator;)J";
	methods[1259].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_DamageTypeSetIterator_1next;

	methods[1260].name = "delete_DamageTypeSetIterator";
	methods[1260].signature = "(J)V";
	methods[1260].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1DamageTypeSetIterator;

	methods[1261].name = "new_ErrorSet";
	methods[1261].signature = "(J)J";
	methods[1261].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ErrorSet;

	methods[1262].name = "delete_ErrorSet";
	methods[1262].signature = "(J)V";
	methods[1262].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ErrorSet;

	methods[1263].name = "ErrorSet_size";
	methods[1263].signature = "(JLorg/bwapi/bridge/swig/ErrorSet;)I";
	methods[1263].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1size;

	methods[1264].name = "ErrorSet_contains";
	methods[1264].signature = "(JLorg/bwapi/bridge/swig/ErrorSet;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[1264].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1contains;

	methods[1265].name = "ErrorSet_add";
	methods[1265].signature = "(JLorg/bwapi/bridge/swig/ErrorSet;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[1265].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1add;

	methods[1266].name = "ErrorSet_clear";
	methods[1266].signature = "(JLorg/bwapi/bridge/swig/ErrorSet;)V";
	methods[1266].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1clear;

	methods[1267].name = "ErrorSet_remove";
	methods[1267].signature = "(JLorg/bwapi/bridge/swig/ErrorSet;JLorg/bwapi/bridge/swig/SWIG_Error;)Z";
	methods[1267].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSet_1remove;

	methods[1268].name = "new_ErrorSetIterator";
	methods[1268].signature = "(J)J";
	methods[1268].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ErrorSetIterator;

	methods[1269].name = "ErrorSetIterator_hasNext";
	methods[1269].signature = "(JLorg/bwapi/bridge/swig/ErrorSetIterator;)Z";
	methods[1269].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSetIterator_1hasNext;

	methods[1270].name = "ErrorSetIterator_next";
	methods[1270].signature = "(JLorg/bwapi/bridge/swig/ErrorSetIterator;)J";
	methods[1270].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ErrorSetIterator_1next;

	methods[1271].name = "delete_ErrorSetIterator";
	methods[1271].signature = "(J)V";
	methods[1271].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ErrorSetIterator;

	methods[1272].name = "new_ExplosionTypeSet";
	methods[1272].signature = "(J)J";
	methods[1272].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ExplosionTypeSet;

	methods[1273].name = "delete_ExplosionTypeSet";
	methods[1273].signature = "(J)V";
	methods[1273].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ExplosionTypeSet;

	methods[1274].name = "ExplosionTypeSet_size";
	methods[1274].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSet;)I";
	methods[1274].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1size;

	methods[1275].name = "ExplosionTypeSet_contains";
	methods[1275].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSet;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[1275].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1contains;

	methods[1276].name = "ExplosionTypeSet_add";
	methods[1276].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSet;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[1276].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1add;

	methods[1277].name = "ExplosionTypeSet_clear";
	methods[1277].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSet;)V";
	methods[1277].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1clear;

	methods[1278].name = "ExplosionTypeSet_remove";
	methods[1278].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSet;JLorg/bwapi/bridge/swig/SWIG_ExplosionType;)Z";
	methods[1278].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSet_1remove;

	methods[1279].name = "new_ExplosionTypeSetIterator";
	methods[1279].signature = "(J)J";
	methods[1279].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ExplosionTypeSetIterator;

	methods[1280].name = "ExplosionTypeSetIterator_hasNext";
	methods[1280].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSetIterator;)Z";
	methods[1280].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSetIterator_1hasNext;

	methods[1281].name = "ExplosionTypeSetIterator_next";
	methods[1281].signature = "(JLorg/bwapi/bridge/swig/ExplosionTypeSetIterator;)J";
	methods[1281].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ExplosionTypeSetIterator_1next;

	methods[1282].name = "delete_ExplosionTypeSetIterator";
	methods[1282].signature = "(J)V";
	methods[1282].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ExplosionTypeSetIterator;

	methods[1283].name = "new_ForceSet";
	methods[1283].signature = "(J)J";
	methods[1283].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ForceSet;

	methods[1284].name = "delete_ForceSet";
	methods[1284].signature = "(J)V";
	methods[1284].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ForceSet;

	methods[1285].name = "ForceSet_size";
	methods[1285].signature = "(JLorg/bwapi/bridge/swig/ForceSet;)I";
	methods[1285].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1size;

	methods[1286].name = "ForceSet_contains";
	methods[1286].signature = "(JLorg/bwapi/bridge/swig/ForceSet;JLorg/bwapi/bridge/swig/SWIG_Force;)Z";
	methods[1286].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1contains;

	methods[1287].name = "ForceSet_add";
	methods[1287].signature = "(JLorg/bwapi/bridge/swig/ForceSet;JLorg/bwapi/bridge/swig/SWIG_Force;)Z";
	methods[1287].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1add;

	methods[1288].name = "ForceSet_clear";
	methods[1288].signature = "(JLorg/bwapi/bridge/swig/ForceSet;)V";
	methods[1288].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1clear;

	methods[1289].name = "ForceSet_remove";
	methods[1289].signature = "(JLorg/bwapi/bridge/swig/ForceSet;JLorg/bwapi/bridge/swig/SWIG_Force;)Z";
	methods[1289].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSet_1remove;

	methods[1290].name = "new_ForceSetIterator";
	methods[1290].signature = "(J)J";
	methods[1290].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ForceSetIterator;

	methods[1291].name = "ForceSetIterator_hasNext";
	methods[1291].signature = "(JLorg/bwapi/bridge/swig/ForceSetIterator;)Z";
	methods[1291].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSetIterator_1hasNext;

	methods[1292].name = "ForceSetIterator_next";
	methods[1292].signature = "(JLorg/bwapi/bridge/swig/ForceSetIterator;)J";
	methods[1292].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ForceSetIterator_1next;

	methods[1293].name = "delete_ForceSetIterator";
	methods[1293].signature = "(J)V";
	methods[1293].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ForceSetIterator;

	methods[1294].name = "new_OrderSet";
	methods[1294].signature = "(J)J";
	methods[1294].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1OrderSet;

	methods[1295].name = "delete_OrderSet";
	methods[1295].signature = "(J)V";
	methods[1295].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1OrderSet;

	methods[1296].name = "OrderSet_size";
	methods[1296].signature = "(JLorg/bwapi/bridge/swig/OrderSet;)I";
	methods[1296].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1size;

	methods[1297].name = "OrderSet_contains";
	methods[1297].signature = "(JLorg/bwapi/bridge/swig/OrderSet;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[1297].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1contains;

	methods[1298].name = "OrderSet_add";
	methods[1298].signature = "(JLorg/bwapi/bridge/swig/OrderSet;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[1298].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1add;

	methods[1299].name = "OrderSet_clear";
	methods[1299].signature = "(JLorg/bwapi/bridge/swig/OrderSet;)V";
	methods[1299].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1clear;

	methods[1300].name = "OrderSet_remove";
	methods[1300].signature = "(JLorg/bwapi/bridge/swig/OrderSet;JLorg/bwapi/bridge/swig/SWIG_Order;)Z";
	methods[1300].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSet_1remove;

	methods[1301].name = "new_OrderSetIterator";
	methods[1301].signature = "(J)J";
	methods[1301].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1OrderSetIterator;

	methods[1302].name = "OrderSetIterator_hasNext";
	methods[1302].signature = "(JLorg/bwapi/bridge/swig/OrderSetIterator;)Z";
	methods[1302].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSetIterator_1hasNext;

	methods[1303].name = "OrderSetIterator_next";
	methods[1303].signature = "(JLorg/bwapi/bridge/swig/OrderSetIterator;)J";
	methods[1303].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_OrderSetIterator_1next;

	methods[1304].name = "delete_OrderSetIterator";
	methods[1304].signature = "(J)V";
	methods[1304].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1OrderSetIterator;

	methods[1305].name = "new_PlayerSet";
	methods[1305].signature = "(J)J";
	methods[1305].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerSet;

	methods[1306].name = "delete_PlayerSet";
	methods[1306].signature = "(J)V";
	methods[1306].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerSet;

	methods[1307].name = "PlayerSet_size";
	methods[1307].signature = "(JLorg/bwapi/bridge/swig/PlayerSet;)I";
	methods[1307].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1size;

	methods[1308].name = "PlayerSet_contains";
	methods[1308].signature = "(JLorg/bwapi/bridge/swig/PlayerSet;JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[1308].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1contains;

	methods[1309].name = "PlayerSet_add";
	methods[1309].signature = "(JLorg/bwapi/bridge/swig/PlayerSet;JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[1309].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1add;

	methods[1310].name = "PlayerSet_clear";
	methods[1310].signature = "(JLorg/bwapi/bridge/swig/PlayerSet;)V";
	methods[1310].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1clear;

	methods[1311].name = "PlayerSet_remove";
	methods[1311].signature = "(JLorg/bwapi/bridge/swig/PlayerSet;JLorg/bwapi/bridge/swig/SWIG_Player;)Z";
	methods[1311].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSet_1remove;

	methods[1312].name = "new_PlayerSetIterator";
	methods[1312].signature = "(J)J";
	methods[1312].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerSetIterator;

	methods[1313].name = "PlayerSetIterator_hasNext";
	methods[1313].signature = "(JLorg/bwapi/bridge/swig/PlayerSetIterator;)Z";
	methods[1313].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSetIterator_1hasNext;

	methods[1314].name = "PlayerSetIterator_next";
	methods[1314].signature = "(JLorg/bwapi/bridge/swig/PlayerSetIterator;)J";
	methods[1314].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerSetIterator_1next;

	methods[1315].name = "delete_PlayerSetIterator";
	methods[1315].signature = "(J)V";
	methods[1315].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerSetIterator;

	methods[1316].name = "new_PlayerTypeSet";
	methods[1316].signature = "(J)J";
	methods[1316].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerTypeSet;

	methods[1317].name = "delete_PlayerTypeSet";
	methods[1317].signature = "(J)V";
	methods[1317].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerTypeSet;

	methods[1318].name = "PlayerTypeSet_size";
	methods[1318].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSet;)I";
	methods[1318].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1size;

	methods[1319].name = "PlayerTypeSet_contains";
	methods[1319].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSet;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[1319].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1contains;

	methods[1320].name = "PlayerTypeSet_add";
	methods[1320].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSet;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[1320].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1add;

	methods[1321].name = "PlayerTypeSet_clear";
	methods[1321].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSet;)V";
	methods[1321].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1clear;

	methods[1322].name = "PlayerTypeSet_remove";
	methods[1322].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSet;JLorg/bwapi/bridge/swig/SWIG_PlayerType;)Z";
	methods[1322].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSet_1remove;

	methods[1323].name = "new_PlayerTypeSetIterator";
	methods[1323].signature = "(J)J";
	methods[1323].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PlayerTypeSetIterator;

	methods[1324].name = "PlayerTypeSetIterator_hasNext";
	methods[1324].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSetIterator;)Z";
	methods[1324].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSetIterator_1hasNext;

	methods[1325].name = "PlayerTypeSetIterator_next";
	methods[1325].signature = "(JLorg/bwapi/bridge/swig/PlayerTypeSetIterator;)J";
	methods[1325].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PlayerTypeSetIterator_1next;

	methods[1326].name = "delete_PlayerTypeSetIterator";
	methods[1326].signature = "(J)V";
	methods[1326].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PlayerTypeSetIterator;

	methods[1327].name = "new_RaceSet";
	methods[1327].signature = "(J)J";
	methods[1327].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RaceSet;

	methods[1328].name = "delete_RaceSet";
	methods[1328].signature = "(J)V";
	methods[1328].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RaceSet;

	methods[1329].name = "RaceSet_size";
	methods[1329].signature = "(JLorg/bwapi/bridge/swig/RaceSet;)I";
	methods[1329].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1size;

	methods[1330].name = "RaceSet_contains";
	methods[1330].signature = "(JLorg/bwapi/bridge/swig/RaceSet;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[1330].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1contains;

	methods[1331].name = "RaceSet_add";
	methods[1331].signature = "(JLorg/bwapi/bridge/swig/RaceSet;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[1331].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1add;

	methods[1332].name = "RaceSet_clear";
	methods[1332].signature = "(JLorg/bwapi/bridge/swig/RaceSet;)V";
	methods[1332].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1clear;

	methods[1333].name = "RaceSet_remove";
	methods[1333].signature = "(JLorg/bwapi/bridge/swig/RaceSet;JLorg/bwapi/bridge/swig/SWIG_Race;)Z";
	methods[1333].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSet_1remove;

	methods[1334].name = "new_RaceSetIterator";
	methods[1334].signature = "(J)J";
	methods[1334].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RaceSetIterator;

	methods[1335].name = "RaceSetIterator_hasNext";
	methods[1335].signature = "(JLorg/bwapi/bridge/swig/RaceSetIterator;)Z";
	methods[1335].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSetIterator_1hasNext;

	methods[1336].name = "RaceSetIterator_next";
	methods[1336].signature = "(JLorg/bwapi/bridge/swig/RaceSetIterator;)J";
	methods[1336].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RaceSetIterator_1next;

	methods[1337].name = "delete_RaceSetIterator";
	methods[1337].signature = "(J)V";
	methods[1337].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RaceSetIterator;

	methods[1338].name = "new_TechTypeConstantSet";
	methods[1338].signature = "(J)J";
	methods[1338].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeConstantSet;

	methods[1339].name = "delete_TechTypeConstantSet";
	methods[1339].signature = "(J)V";
	methods[1339].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeConstantSet;

	methods[1340].name = "TechTypeConstantSet_size";
	methods[1340].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSet;)I";
	methods[1340].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1size;

	methods[1341].name = "TechTypeConstantSet_contains";
	methods[1341].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1341].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1contains;

	methods[1342].name = "TechTypeConstantSet_add";
	methods[1342].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1342].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1add;

	methods[1343].name = "TechTypeConstantSet_clear";
	methods[1343].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSet;)V";
	methods[1343].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1clear;

	methods[1344].name = "TechTypeConstantSet_remove";
	methods[1344].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1344].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSet_1remove;

	methods[1345].name = "new_TechTypeConstantSetIterator";
	methods[1345].signature = "(J)J";
	methods[1345].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeConstantSetIterator;

	methods[1346].name = "TechTypeConstantSetIterator_hasNext";
	methods[1346].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSetIterator;)Z";
	methods[1346].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSetIterator_1hasNext;

	methods[1347].name = "TechTypeConstantSetIterator_next";
	methods[1347].signature = "(JLorg/bwapi/bridge/swig/TechTypeConstantSetIterator;)J";
	methods[1347].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeConstantSetIterator_1next;

	methods[1348].name = "delete_TechTypeConstantSetIterator";
	methods[1348].signature = "(J)V";
	methods[1348].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeConstantSetIterator;

	methods[1349].name = "new_TechTypeSet";
	methods[1349].signature = "(J)J";
	methods[1349].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeSet;

	methods[1350].name = "delete_TechTypeSet";
	methods[1350].signature = "(J)V";
	methods[1350].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeSet;

	methods[1351].name = "TechTypeSet_size";
	methods[1351].signature = "(JLorg/bwapi/bridge/swig/TechTypeSet;)I";
	methods[1351].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1size;

	methods[1352].name = "TechTypeSet_contains";
	methods[1352].signature = "(JLorg/bwapi/bridge/swig/TechTypeSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1352].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1contains;

	methods[1353].name = "TechTypeSet_add";
	methods[1353].signature = "(JLorg/bwapi/bridge/swig/TechTypeSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1353].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1add;

	methods[1354].name = "TechTypeSet_clear";
	methods[1354].signature = "(JLorg/bwapi/bridge/swig/TechTypeSet;)V";
	methods[1354].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1clear;

	methods[1355].name = "TechTypeSet_remove";
	methods[1355].signature = "(JLorg/bwapi/bridge/swig/TechTypeSet;JLorg/bwapi/bridge/swig/SWIG_TechType;)Z";
	methods[1355].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSet_1remove;

	methods[1356].name = "new_TechTypeSetIterator";
	methods[1356].signature = "(J)J";
	methods[1356].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TechTypeSetIterator;

	methods[1357].name = "TechTypeSetIterator_hasNext";
	methods[1357].signature = "(JLorg/bwapi/bridge/swig/TechTypeSetIterator;)Z";
	methods[1357].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSetIterator_1hasNext;

	methods[1358].name = "TechTypeSetIterator_next";
	methods[1358].signature = "(JLorg/bwapi/bridge/swig/TechTypeSetIterator;)J";
	methods[1358].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TechTypeSetIterator_1next;

	methods[1359].name = "delete_TechTypeSetIterator";
	methods[1359].signature = "(J)V";
	methods[1359].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TechTypeSetIterator;

	methods[1360].name = "UnitList__list_set";
	methods[1360].signature = "(JLorg/bwapi/bridge/swig/UnitList;J)V";
	methods[1360].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1_1list_1set;

	methods[1361].name = "UnitList__list_get";
	methods[1361].signature = "(JLorg/bwapi/bridge/swig/UnitList;)J";
	methods[1361].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1_1list_1get;

	methods[1362].name = "new_UnitList";
	methods[1362].signature = "(J)J";
	methods[1362].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitList;

	methods[1363].name = "delete_UnitList";
	methods[1363].signature = "(J)V";
	methods[1363].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitList;

	methods[1364].name = "UnitList_size";
	methods[1364].signature = "(JLorg/bwapi/bridge/swig/UnitList;)I";
	methods[1364].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1size;

	methods[1365].name = "UnitList_contains";
	methods[1365].signature = "(JLorg/bwapi/bridge/swig/UnitList;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1365].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1contains;

	methods[1366].name = "UnitList_add";
	methods[1366].signature = "(JLorg/bwapi/bridge/swig/UnitList;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1366].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1add;

	methods[1367].name = "UnitList_clear";
	methods[1367].signature = "(JLorg/bwapi/bridge/swig/UnitList;)V";
	methods[1367].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1clear;

	methods[1368].name = "UnitList_remove";
	methods[1368].signature = "(JLorg/bwapi/bridge/swig/UnitList;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1368].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitList_1remove;

	methods[1369].name = "new_UnitListIterator";
	methods[1369].signature = "(J)J";
	methods[1369].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitListIterator;

	methods[1370].name = "UnitListIterator_hasNext";
	methods[1370].signature = "(JLorg/bwapi/bridge/swig/UnitListIterator;)Z";
	methods[1370].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitListIterator_1hasNext;

	methods[1371].name = "UnitListIterator_next";
	methods[1371].signature = "(JLorg/bwapi/bridge/swig/UnitListIterator;)J";
	methods[1371].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitListIterator_1next;

	methods[1372].name = "delete_UnitListIterator";
	methods[1372].signature = "(J)V";
	methods[1372].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitListIterator;

	methods[1373].name = "new_UnitSet";
	methods[1373].signature = "(J)J";
	methods[1373].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSet;

	methods[1374].name = "delete_UnitSet";
	methods[1374].signature = "(J)V";
	methods[1374].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSet;

	methods[1375].name = "UnitSet_size";
	methods[1375].signature = "(JLorg/bwapi/bridge/swig/UnitSet;)I";
	methods[1375].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1size;

	methods[1376].name = "UnitSet_contains";
	methods[1376].signature = "(JLorg/bwapi/bridge/swig/UnitSet;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1376].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1contains;

	methods[1377].name = "UnitSet_add";
	methods[1377].signature = "(JLorg/bwapi/bridge/swig/UnitSet;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1377].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1add;

	methods[1378].name = "UnitSet_clear";
	methods[1378].signature = "(JLorg/bwapi/bridge/swig/UnitSet;)V";
	methods[1378].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1clear;

	methods[1379].name = "UnitSet_remove";
	methods[1379].signature = "(JLorg/bwapi/bridge/swig/UnitSet;JLorg/bwapi/bridge/swig/SWIG_Unit;)Z";
	methods[1379].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSet_1remove;

	methods[1380].name = "new_UnitSetIterator";
	methods[1380].signature = "(J)J";
	methods[1380].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSetIterator;

	methods[1381].name = "UnitSetIterator_hasNext";
	methods[1381].signature = "(JLorg/bwapi/bridge/swig/UnitSetIterator;)Z";
	methods[1381].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSetIterator_1hasNext;

	methods[1382].name = "UnitSetIterator_next";
	methods[1382].signature = "(JLorg/bwapi/bridge/swig/UnitSetIterator;)J";
	methods[1382].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSetIterator_1next;

	methods[1383].name = "delete_UnitSetIterator";
	methods[1383].signature = "(J)V";
	methods[1383].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSetIterator;

	methods[1384].name = "new_UnitSizeTypeSet";
	methods[1384].signature = "(J)J";
	methods[1384].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSizeTypeSet;

	methods[1385].name = "delete_UnitSizeTypeSet";
	methods[1385].signature = "(J)V";
	methods[1385].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSizeTypeSet;

	methods[1386].name = "UnitSizeTypeSet_size";
	methods[1386].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSet;)I";
	methods[1386].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1size;

	methods[1387].name = "UnitSizeTypeSet_contains";
	methods[1387].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[1387].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1contains;

	methods[1388].name = "UnitSizeTypeSet_add";
	methods[1388].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[1388].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1add;

	methods[1389].name = "UnitSizeTypeSet_clear";
	methods[1389].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSet;)V";
	methods[1389].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1clear;

	methods[1390].name = "UnitSizeTypeSet_remove";
	methods[1390].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitSizeType;)Z";
	methods[1390].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSet_1remove;

	methods[1391].name = "new_UnitSizeTypeSetIterator";
	methods[1391].signature = "(J)J";
	methods[1391].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitSizeTypeSetIterator;

	methods[1392].name = "UnitSizeTypeSetIterator_hasNext";
	methods[1392].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSetIterator;)Z";
	methods[1392].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSetIterator_1hasNext;

	methods[1393].name = "UnitSizeTypeSetIterator_next";
	methods[1393].signature = "(JLorg/bwapi/bridge/swig/UnitSizeTypeSetIterator;)J";
	methods[1393].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitSizeTypeSetIterator_1next;

	methods[1394].name = "delete_UnitSizeTypeSetIterator";
	methods[1394].signature = "(J)V";
	methods[1394].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitSizeTypeSetIterator;

	methods[1395].name = "new_UnitTypeConstantSet";
	methods[1395].signature = "(J)J";
	methods[1395].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeConstantSet;

	methods[1396].name = "delete_UnitTypeConstantSet";
	methods[1396].signature = "(J)V";
	methods[1396].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeConstantSet;

	methods[1397].name = "UnitTypeConstantSet_size";
	methods[1397].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSet;)I";
	methods[1397].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1size;

	methods[1398].name = "UnitTypeConstantSet_contains";
	methods[1398].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1398].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1contains;

	methods[1399].name = "UnitTypeConstantSet_add";
	methods[1399].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1399].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1add;

	methods[1400].name = "UnitTypeConstantSet_clear";
	methods[1400].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSet;)V";
	methods[1400].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1clear;

	methods[1401].name = "UnitTypeConstantSet_remove";
	methods[1401].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1401].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSet_1remove;

	methods[1402].name = "new_UnitTypeConstantSetIterator";
	methods[1402].signature = "(J)J";
	methods[1402].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeConstantSetIterator;

	methods[1403].name = "UnitTypeConstantSetIterator_hasNext";
	methods[1403].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSetIterator;)Z";
	methods[1403].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSetIterator_1hasNext;

	methods[1404].name = "UnitTypeConstantSetIterator_next";
	methods[1404].signature = "(JLorg/bwapi/bridge/swig/UnitTypeConstantSetIterator;)J";
	methods[1404].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeConstantSetIterator_1next;

	methods[1405].name = "delete_UnitTypeConstantSetIterator";
	methods[1405].signature = "(J)V";
	methods[1405].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeConstantSetIterator;

	methods[1406].name = "new_UnitTypeSet";
	methods[1406].signature = "(J)J";
	methods[1406].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeSet;

	methods[1407].name = "delete_UnitTypeSet";
	methods[1407].signature = "(J)V";
	methods[1407].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeSet;

	methods[1408].name = "UnitTypeSet_size";
	methods[1408].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSet;)I";
	methods[1408].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1size;

	methods[1409].name = "UnitTypeSet_contains";
	methods[1409].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1409].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1contains;

	methods[1410].name = "UnitTypeSet_add";
	methods[1410].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1410].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1add;

	methods[1411].name = "UnitTypeSet_clear";
	methods[1411].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSet;)V";
	methods[1411].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1clear;

	methods[1412].name = "UnitTypeSet_remove";
	methods[1412].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSet;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1412].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSet_1remove;

	methods[1413].name = "new_UnitTypeSetIterator";
	methods[1413].signature = "(J)J";
	methods[1413].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeSetIterator;

	methods[1414].name = "UnitTypeSetIterator_hasNext";
	methods[1414].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSetIterator;)Z";
	methods[1414].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSetIterator_1hasNext;

	methods[1415].name = "UnitTypeSetIterator_next";
	methods[1415].signature = "(JLorg/bwapi/bridge/swig/UnitTypeSetIterator;)J";
	methods[1415].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeSetIterator_1next;

	methods[1416].name = "delete_UnitTypeSetIterator";
	methods[1416].signature = "(J)V";
	methods[1416].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeSetIterator;

	methods[1417].name = "new_UnitTypeWhatBuildsPair__SWIG_0";
	methods[1417].signature = "()J";
	methods[1417].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_10;

	methods[1418].name = "new_UnitTypeWhatBuildsPair__SWIG_1";
	methods[1418].signature = "(JLorg/bwapi/bridge/swig/SWIG_UnitType;I)J";
	methods[1418].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_11;

	methods[1419].name = "new_UnitTypeWhatBuildsPair__SWIG_2";
	methods[1419].signature = "(JLorg/bwapi/bridge/swig/UnitTypeWhatBuildsPair;)J";
	methods[1419].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeWhatBuildsPair_1_1SWIG_12;

	methods[1420].name = "UnitTypeWhatBuildsPair_first_set";
	methods[1420].signature = "(JLorg/bwapi/bridge/swig/UnitTypeWhatBuildsPair;JLorg/bwapi/bridge/swig/SWIG_UnitType;)V";
	methods[1420].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1first_1set;

	methods[1421].name = "UnitTypeWhatBuildsPair_first_get";
	methods[1421].signature = "(JLorg/bwapi/bridge/swig/UnitTypeWhatBuildsPair;)J";
	methods[1421].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1first_1get;

	methods[1422].name = "UnitTypeWhatBuildsPair_second_set";
	methods[1422].signature = "(JLorg/bwapi/bridge/swig/UnitTypeWhatBuildsPair;I)V";
	methods[1422].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1second_1set;

	methods[1423].name = "UnitTypeWhatBuildsPair_second_get";
	methods[1423].signature = "(JLorg/bwapi/bridge/swig/UnitTypeWhatBuildsPair;)I";
	methods[1423].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeWhatBuildsPair_1second_1get;

	methods[1424].name = "delete_UnitTypeWhatBuildsPair";
	methods[1424].signature = "(J)V";
	methods[1424].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeWhatBuildsPair;

	methods[1425].name = "new_UnitTypeMap";
	methods[1425].signature = "(J)J";
	methods[1425].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeMap;

	methods[1426].name = "delete_UnitTypeMap";
	methods[1426].signature = "(J)V";
	methods[1426].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeMap;

	methods[1427].name = "UnitTypeMap_size";
	methods[1427].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMap;)I";
	methods[1427].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1size;

	methods[1428].name = "UnitTypeMap_add";
	methods[1428].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMap;JI)Z";
	methods[1428].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1add;

	methods[1429].name = "UnitTypeMap_clear";
	methods[1429].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMap;)V";
	methods[1429].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1clear;

	methods[1430].name = "UnitTypeMap_remove";
	methods[1430].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMap;J)Z";
	methods[1430].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMap_1remove;

	methods[1431].name = "new_UnitTypeMapIterator";
	methods[1431].signature = "(J)J";
	methods[1431].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeMapIterator;

	methods[1432].name = "UnitTypeMapIterator_hasNext";
	methods[1432].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMapIterator;)Z";
	methods[1432].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1hasNext;

	methods[1433].name = "UnitTypeMapIterator_next";
	methods[1433].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMapIterator;)V";
	methods[1433].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1next;

	methods[1434].name = "UnitTypeMapIterator_getKey";
	methods[1434].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMapIterator;)J";
	methods[1434].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1getKey;

	methods[1435].name = "UnitTypeMapIterator_getValue";
	methods[1435].signature = "(JLorg/bwapi/bridge/swig/UnitTypeMapIterator;)I";
	methods[1435].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeMapIterator_1getValue;

	methods[1436].name = "delete_UnitTypeMapIterator";
	methods[1436].signature = "(J)V";
	methods[1436].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeMapIterator;

	methods[1437].name = "UnitTypeList__list_set";
	methods[1437].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;J)V";
	methods[1437].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1_1list_1set;

	methods[1438].name = "UnitTypeList__list_get";
	methods[1438].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;)J";
	methods[1438].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1_1list_1get;

	methods[1439].name = "new_UnitTypeList";
	methods[1439].signature = "(J)J";
	methods[1439].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeList;

	methods[1440].name = "delete_UnitTypeList";
	methods[1440].signature = "(J)V";
	methods[1440].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeList;

	methods[1441].name = "UnitTypeList_size";
	methods[1441].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;)I";
	methods[1441].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1size;

	methods[1442].name = "UnitTypeList_contains";
	methods[1442].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1442].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1contains;

	methods[1443].name = "UnitTypeList_add";
	methods[1443].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1443].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1add;

	methods[1444].name = "UnitTypeList_clear";
	methods[1444].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;)V";
	methods[1444].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1clear;

	methods[1445].name = "UnitTypeList_remove";
	methods[1445].signature = "(JLorg/bwapi/bridge/swig/UnitTypeList;JLorg/bwapi/bridge/swig/SWIG_UnitType;)Z";
	methods[1445].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeList_1remove;

	methods[1446].name = "new_UnitTypeListIterator";
	methods[1446].signature = "(J)J";
	methods[1446].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UnitTypeListIterator;

	methods[1447].name = "UnitTypeListIterator_hasNext";
	methods[1447].signature = "(JLorg/bwapi/bridge/swig/UnitTypeListIterator;)Z";
	methods[1447].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeListIterator_1hasNext;

	methods[1448].name = "UnitTypeListIterator_next";
	methods[1448].signature = "(JLorg/bwapi/bridge/swig/UnitTypeListIterator;)J";
	methods[1448].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UnitTypeListIterator_1next;

	methods[1449].name = "delete_UnitTypeListIterator";
	methods[1449].signature = "(J)V";
	methods[1449].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UnitTypeListIterator;

	methods[1450].name = "new_UpgradeTypeConstantSet";
	methods[1450].signature = "(J)J";
	methods[1450].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeConstantSet;

	methods[1451].name = "delete_UpgradeTypeConstantSet";
	methods[1451].signature = "(J)V";
	methods[1451].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeConstantSet;

	methods[1452].name = "UpgradeTypeConstantSet_size";
	methods[1452].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSet;)I";
	methods[1452].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1size;

	methods[1453].name = "UpgradeTypeConstantSet_contains";
	methods[1453].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1453].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1contains;

	methods[1454].name = "UpgradeTypeConstantSet_add";
	methods[1454].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1454].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1add;

	methods[1455].name = "UpgradeTypeConstantSet_clear";
	methods[1455].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSet;)V";
	methods[1455].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1clear;

	methods[1456].name = "UpgradeTypeConstantSet_remove";
	methods[1456].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1456].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSet_1remove;

	methods[1457].name = "new_UpgradeTypeConstantSetIterator";
	methods[1457].signature = "(J)J";
	methods[1457].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeConstantSetIterator;

	methods[1458].name = "UpgradeTypeConstantSetIterator_hasNext";
	methods[1458].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSetIterator;)Z";
	methods[1458].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSetIterator_1hasNext;

	methods[1459].name = "UpgradeTypeConstantSetIterator_next";
	methods[1459].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeConstantSetIterator;)J";
	methods[1459].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeConstantSetIterator_1next;

	methods[1460].name = "delete_UpgradeTypeConstantSetIterator";
	methods[1460].signature = "(J)V";
	methods[1460].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeConstantSetIterator;

	methods[1461].name = "new_UpgradeTypeSet";
	methods[1461].signature = "(J)J";
	methods[1461].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeSet;

	methods[1462].name = "delete_UpgradeTypeSet";
	methods[1462].signature = "(J)V";
	methods[1462].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeSet;

	methods[1463].name = "UpgradeTypeSet_size";
	methods[1463].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSet;)I";
	methods[1463].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1size;

	methods[1464].name = "UpgradeTypeSet_contains";
	methods[1464].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1464].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1contains;

	methods[1465].name = "UpgradeTypeSet_add";
	methods[1465].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1465].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1add;

	methods[1466].name = "UpgradeTypeSet_clear";
	methods[1466].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSet;)V";
	methods[1466].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1clear;

	methods[1467].name = "UpgradeTypeSet_remove";
	methods[1467].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSet;JLorg/bwapi/bridge/swig/SWIG_UpgradeType;)Z";
	methods[1467].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSet_1remove;

	methods[1468].name = "new_UpgradeTypeSetIterator";
	methods[1468].signature = "(J)J";
	methods[1468].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1UpgradeTypeSetIterator;

	methods[1469].name = "UpgradeTypeSetIterator_hasNext";
	methods[1469].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSetIterator;)Z";
	methods[1469].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSetIterator_1hasNext;

	methods[1470].name = "UpgradeTypeSetIterator_next";
	methods[1470].signature = "(JLorg/bwapi/bridge/swig/UpgradeTypeSetIterator;)J";
	methods[1470].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_UpgradeTypeSetIterator_1next;

	methods[1471].name = "delete_UpgradeTypeSetIterator";
	methods[1471].signature = "(J)V";
	methods[1471].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1UpgradeTypeSetIterator;

	methods[1472].name = "new_WeaponTypeSet";
	methods[1472].signature = "(J)J";
	methods[1472].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1WeaponTypeSet;

	methods[1473].name = "delete_WeaponTypeSet";
	methods[1473].signature = "(J)V";
	methods[1473].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1WeaponTypeSet;

	methods[1474].name = "WeaponTypeSet_size";
	methods[1474].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSet;)I";
	methods[1474].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1size;

	methods[1475].name = "WeaponTypeSet_contains";
	methods[1475].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSet;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1475].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1contains;

	methods[1476].name = "WeaponTypeSet_add";
	methods[1476].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSet;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1476].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1add;

	methods[1477].name = "WeaponTypeSet_clear";
	methods[1477].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSet;)V";
	methods[1477].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1clear;

	methods[1478].name = "WeaponTypeSet_remove";
	methods[1478].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSet;JLorg/bwapi/bridge/swig/SWIG_WeaponType;)Z";
	methods[1478].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSet_1remove;

	methods[1479].name = "new_WeaponTypeSetIterator";
	methods[1479].signature = "(J)J";
	methods[1479].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1WeaponTypeSetIterator;

	methods[1480].name = "WeaponTypeSetIterator_hasNext";
	methods[1480].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSetIterator;)Z";
	methods[1480].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSetIterator_1hasNext;

	methods[1481].name = "WeaponTypeSetIterator_next";
	methods[1481].signature = "(JLorg/bwapi/bridge/swig/WeaponTypeSetIterator;)J";
	methods[1481].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_WeaponTypeSetIterator_1next;

	methods[1482].name = "delete_WeaponTypeSetIterator";
	methods[1482].signature = "(J)V";
	methods[1482].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1WeaponTypeSetIterator;

	methods[1483].name = "new_TilePositionSet";
	methods[1483].signature = "(J)J";
	methods[1483].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TilePositionSet;

	methods[1484].name = "delete_TilePositionSet";
	methods[1484].signature = "(J)V";
	methods[1484].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TilePositionSet;

	methods[1485].name = "TilePositionSet_size";
	methods[1485].signature = "(JLorg/bwapi/bridge/swig/TilePositionSet;)I";
	methods[1485].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1size;

	methods[1486].name = "TilePositionSet_contains";
	methods[1486].signature = "(JLorg/bwapi/bridge/swig/TilePositionSet;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[1486].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1contains;

	methods[1487].name = "TilePositionSet_add";
	methods[1487].signature = "(JLorg/bwapi/bridge/swig/TilePositionSet;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[1487].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1add;

	methods[1488].name = "TilePositionSet_clear";
	methods[1488].signature = "(JLorg/bwapi/bridge/swig/TilePositionSet;)V";
	methods[1488].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1clear;

	methods[1489].name = "TilePositionSet_remove";
	methods[1489].signature = "(JLorg/bwapi/bridge/swig/TilePositionSet;JLorg/bwapi/bridge/swig/SWIG_TilePosition;)Z";
	methods[1489].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSet_1remove;

	methods[1490].name = "new_TilePositionSetIterator";
	methods[1490].signature = "(J)J";
	methods[1490].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1TilePositionSetIterator;

	methods[1491].name = "TilePositionSetIterator_hasNext";
	methods[1491].signature = "(JLorg/bwapi/bridge/swig/TilePositionSetIterator;)Z";
	methods[1491].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSetIterator_1hasNext;

	methods[1492].name = "TilePositionSetIterator_next";
	methods[1492].signature = "(JLorg/bwapi/bridge/swig/TilePositionSetIterator;)J";
	methods[1492].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_TilePositionSetIterator_1next;

	methods[1493].name = "delete_TilePositionSetIterator";
	methods[1493].signature = "(J)V";
	methods[1493].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1TilePositionSetIterator;

	methods[1494].name = "new_RegionSet";
	methods[1494].signature = "(J)J";
	methods[1494].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSet;

	methods[1495].name = "delete_RegionSet";
	methods[1495].signature = "(J)V";
	methods[1495].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSet;

	methods[1496].name = "RegionSet_size";
	methods[1496].signature = "(JLorg/bwapi/bridge/swig/RegionSet;)I";
	methods[1496].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1size;

	methods[1497].name = "RegionSet_contains";
	methods[1497].signature = "(JLorg/bwapi/bridge/swig/RegionSet;JLorg/bwapi/bridge/swig/SWIG_Region;)Z";
	methods[1497].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1contains;

	methods[1498].name = "RegionSet_add";
	methods[1498].signature = "(JLorg/bwapi/bridge/swig/RegionSet;JLorg/bwapi/bridge/swig/SWIG_Region;)Z";
	methods[1498].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1add;

	methods[1499].name = "RegionSet_clear";
	methods[1499].signature = "(JLorg/bwapi/bridge/swig/RegionSet;)V";
	methods[1499].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1clear;

	methods[1500].name = "RegionSet_remove";
	methods[1500].signature = "(JLorg/bwapi/bridge/swig/RegionSet;JLorg/bwapi/bridge/swig/SWIG_Region;)Z";
	methods[1500].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSet_1remove;

	methods[1501].name = "new_RegionSetIterator";
	methods[1501].signature = "(J)J";
	methods[1501].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSetIterator;

	methods[1502].name = "RegionSetIterator_hasNext";
	methods[1502].signature = "(JLorg/bwapi/bridge/swig/RegionSetIterator;)Z";
	methods[1502].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSetIterator_1hasNext;

	methods[1503].name = "RegionSetIterator_next";
	methods[1503].signature = "(JLorg/bwapi/bridge/swig/RegionSetIterator;)J";
	methods[1503].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSetIterator_1next;

	methods[1504].name = "delete_RegionSetIterator";
	methods[1504].signature = "(J)V";
	methods[1504].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSetIterator;

	methods[1505].name = "new_RegionSpacelessSet";
	methods[1505].signature = "(J)J";
	methods[1505].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSpacelessSet;

	methods[1506].name = "delete_RegionSpacelessSet";
	methods[1506].signature = "(J)V";
	methods[1506].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSpacelessSet;

	methods[1507].name = "RegionSpacelessSet_size";
	methods[1507].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSet;)I";
	methods[1507].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1size;

	methods[1508].name = "RegionSpacelessSet_contains";
	methods[1508].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSet;J)Z";
	methods[1508].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1contains;

	methods[1509].name = "RegionSpacelessSet_add";
	methods[1509].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSet;J)Z";
	methods[1509].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1add;

	methods[1510].name = "RegionSpacelessSet_clear";
	methods[1510].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSet;)V";
	methods[1510].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1clear;

	methods[1511].name = "RegionSpacelessSet_remove";
	methods[1511].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSet;J)Z";
	methods[1511].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSet_1remove;

	methods[1512].name = "new_RegionSpacelessSetIterator";
	methods[1512].signature = "(J)J";
	methods[1512].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1RegionSpacelessSetIterator;

	methods[1513].name = "RegionSpacelessSetIterator_hasNext";
	methods[1513].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSetIterator;)Z";
	methods[1513].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSetIterator_1hasNext;

	methods[1514].name = "RegionSpacelessSetIterator_next";
	methods[1514].signature = "(JLorg/bwapi/bridge/swig/RegionSpacelessSetIterator;)J";
	methods[1514].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_RegionSpacelessSetIterator_1next;

	methods[1515].name = "delete_RegionSpacelessSetIterator";
	methods[1515].signature = "(J)V";
	methods[1515].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1RegionSpacelessSetIterator;

	methods[1516].name = "new_ChokepointSet";
	methods[1516].signature = "(J)J";
	methods[1516].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSet;

	methods[1517].name = "delete_ChokepointSet";
	methods[1517].signature = "(J)V";
	methods[1517].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSet;

	methods[1518].name = "ChokepointSet_size";
	methods[1518].signature = "(JLorg/bwapi/bridge/swig/ChokepointSet;)I";
	methods[1518].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1size;

	methods[1519].name = "ChokepointSet_contains";
	methods[1519].signature = "(JLorg/bwapi/bridge/swig/ChokepointSet;JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)Z";
	methods[1519].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1contains;

	methods[1520].name = "ChokepointSet_add";
	methods[1520].signature = "(JLorg/bwapi/bridge/swig/ChokepointSet;JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)Z";
	methods[1520].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1add;

	methods[1521].name = "ChokepointSet_clear";
	methods[1521].signature = "(JLorg/bwapi/bridge/swig/ChokepointSet;)V";
	methods[1521].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1clear;

	methods[1522].name = "ChokepointSet_remove";
	methods[1522].signature = "(JLorg/bwapi/bridge/swig/ChokepointSet;JLorg/bwapi/bridge/swig/SWIG_Chokepoint;)Z";
	methods[1522].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSet_1remove;

	methods[1523].name = "new_ChokepointSetIterator";
	methods[1523].signature = "(J)J";
	methods[1523].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSetIterator;

	methods[1524].name = "ChokepointSetIterator_hasNext";
	methods[1524].signature = "(JLorg/bwapi/bridge/swig/ChokepointSetIterator;)Z";
	methods[1524].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSetIterator_1hasNext;

	methods[1525].name = "ChokepointSetIterator_next";
	methods[1525].signature = "(JLorg/bwapi/bridge/swig/ChokepointSetIterator;)J";
	methods[1525].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSetIterator_1next;

	methods[1526].name = "delete_ChokepointSetIterator";
	methods[1526].signature = "(J)V";
	methods[1526].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSetIterator;

	methods[1527].name = "new_ChokepointSpacelessSet";
	methods[1527].signature = "(J)J";
	methods[1527].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSpacelessSet;

	methods[1528].name = "delete_ChokepointSpacelessSet";
	methods[1528].signature = "(J)V";
	methods[1528].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSpacelessSet;

	methods[1529].name = "ChokepointSpacelessSet_size";
	methods[1529].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSet;)I";
	methods[1529].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1size;

	methods[1530].name = "ChokepointSpacelessSet_contains";
	methods[1530].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSet;J)Z";
	methods[1530].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1contains;

	methods[1531].name = "ChokepointSpacelessSet_add";
	methods[1531].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSet;J)Z";
	methods[1531].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1add;

	methods[1532].name = "ChokepointSpacelessSet_clear";
	methods[1532].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSet;)V";
	methods[1532].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1clear;

	methods[1533].name = "ChokepointSpacelessSet_remove";
	methods[1533].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSet;J)Z";
	methods[1533].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSet_1remove;

	methods[1534].name = "new_ChokepointSpacelessSetIterator";
	methods[1534].signature = "(J)J";
	methods[1534].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointSpacelessSetIterator;

	methods[1535].name = "ChokepointSpacelessSetIterator_hasNext";
	methods[1535].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSetIterator;)Z";
	methods[1535].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSetIterator_1hasNext;

	methods[1536].name = "ChokepointSpacelessSetIterator_next";
	methods[1536].signature = "(JLorg/bwapi/bridge/swig/ChokepointSpacelessSetIterator;)J";
	methods[1536].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointSpacelessSetIterator_1next;

	methods[1537].name = "delete_ChokepointSpacelessSetIterator";
	methods[1537].signature = "(J)V";
	methods[1537].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointSpacelessSetIterator;

	methods[1538].name = "new_ChokepointGetRegionsPair__SWIG_0";
	methods[1538].signature = "()J";
	methods[1538].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_10;

	methods[1539].name = "new_ChokepointGetRegionsPair__SWIG_1";
	methods[1539].signature = "(JLorg/bwapi/bridge/swig/SWIG_Region;JLorg/bwapi/bridge/swig/SWIG_Region;)J";
	methods[1539].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_11;

	methods[1540].name = "new_ChokepointGetRegionsPair__SWIG_2";
	methods[1540].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetRegionsPair;)J";
	methods[1540].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetRegionsPair_1_1SWIG_12;

	methods[1541].name = "ChokepointGetRegionsPair_first_set";
	methods[1541].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetRegionsPair;JLorg/bwapi/bridge/swig/SWIG_Region;)V";
	methods[1541].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1first_1set;

	methods[1542].name = "ChokepointGetRegionsPair_first_get";
	methods[1542].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetRegionsPair;)J";
	methods[1542].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1first_1get;

	methods[1543].name = "ChokepointGetRegionsPair_second_set";
	methods[1543].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetRegionsPair;JLorg/bwapi/bridge/swig/SWIG_Region;)V";
	methods[1543].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1second_1set;

	methods[1544].name = "ChokepointGetRegionsPair_second_get";
	methods[1544].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetRegionsPair;)J";
	methods[1544].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetRegionsPair_1second_1get;

	methods[1545].name = "delete_ChokepointGetRegionsPair";
	methods[1545].signature = "(J)V";
	methods[1545].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointGetRegionsPair;

	methods[1546].name = "new_ChokepointGetSidesPair__SWIG_0";
	methods[1546].signature = "()J";
	methods[1546].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_10;

	methods[1547].name = "new_ChokepointGetSidesPair__SWIG_1";
	methods[1547].signature = "(JLorg/bwapi/bridge/swig/SWIG_Position;JLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[1547].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_11;

	methods[1548].name = "new_ChokepointGetSidesPair__SWIG_2";
	methods[1548].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetSidesPair;)J";
	methods[1548].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1ChokepointGetSidesPair_1_1SWIG_12;

	methods[1549].name = "ChokepointGetSidesPair_first_set";
	methods[1549].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetSidesPair;JLorg/bwapi/bridge/swig/SWIG_Position;)V";
	methods[1549].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1first_1set;

	methods[1550].name = "ChokepointGetSidesPair_first_get";
	methods[1550].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetSidesPair;)J";
	methods[1550].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1first_1get;

	methods[1551].name = "ChokepointGetSidesPair_second_set";
	methods[1551].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetSidesPair;JLorg/bwapi/bridge/swig/SWIG_Position;)V";
	methods[1551].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1second_1set;

	methods[1552].name = "ChokepointGetSidesPair_second_get";
	methods[1552].signature = "(JLorg/bwapi/bridge/swig/ChokepointGetSidesPair;)J";
	methods[1552].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_ChokepointGetSidesPair_1second_1get;

	methods[1553].name = "delete_ChokepointGetSidesPair";
	methods[1553].signature = "(J)V";
	methods[1553].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1ChokepointGetSidesPair;

	methods[1554].name = "new_BaseLocationSet";
	methods[1554].signature = "(J)J";
	methods[1554].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSet;

	methods[1555].name = "delete_BaseLocationSet";
	methods[1555].signature = "(J)V";
	methods[1555].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSet;

	methods[1556].name = "BaseLocationSet_size";
	methods[1556].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSet;)I";
	methods[1556].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1size;

	methods[1557].name = "BaseLocationSet_contains";
	methods[1557].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSet;JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1557].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1contains;

	methods[1558].name = "BaseLocationSet_add";
	methods[1558].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSet;JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1558].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1add;

	methods[1559].name = "BaseLocationSet_clear";
	methods[1559].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSet;)V";
	methods[1559].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1clear;

	methods[1560].name = "BaseLocationSet_remove";
	methods[1560].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSet;JLorg/bwapi/bridge/swig/SWIG_BaseLocation;)Z";
	methods[1560].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSet_1remove;

	methods[1561].name = "new_BaseLocationSetIterator";
	methods[1561].signature = "(J)J";
	methods[1561].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSetIterator;

	methods[1562].name = "BaseLocationSetIterator_hasNext";
	methods[1562].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSetIterator;)Z";
	methods[1562].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSetIterator_1hasNext;

	methods[1563].name = "BaseLocationSetIterator_next";
	methods[1563].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSetIterator;)J";
	methods[1563].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSetIterator_1next;

	methods[1564].name = "delete_BaseLocationSetIterator";
	methods[1564].signature = "(J)V";
	methods[1564].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSetIterator;

	methods[1565].name = "new_BaseLocationSpacelessSet";
	methods[1565].signature = "(J)J";
	methods[1565].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSpacelessSet;

	methods[1566].name = "delete_BaseLocationSpacelessSet";
	methods[1566].signature = "(J)V";
	methods[1566].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSpacelessSet;

	methods[1567].name = "BaseLocationSpacelessSet_size";
	methods[1567].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSet;)I";
	methods[1567].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1size;

	methods[1568].name = "BaseLocationSpacelessSet_contains";
	methods[1568].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSet;J)Z";
	methods[1568].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1contains;

	methods[1569].name = "BaseLocationSpacelessSet_add";
	methods[1569].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSet;J)Z";
	methods[1569].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1add;

	methods[1570].name = "BaseLocationSpacelessSet_clear";
	methods[1570].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSet;)V";
	methods[1570].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1clear;

	methods[1571].name = "BaseLocationSpacelessSet_remove";
	methods[1571].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSet;J)Z";
	methods[1571].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSet_1remove;

	methods[1572].name = "new_BaseLocationSpacelessSetIterator";
	methods[1572].signature = "(J)J";
	methods[1572].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1BaseLocationSpacelessSetIterator;

	methods[1573].name = "BaseLocationSpacelessSetIterator_hasNext";
	methods[1573].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSetIterator;)Z";
	methods[1573].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSetIterator_1hasNext;

	methods[1574].name = "BaseLocationSpacelessSetIterator_next";
	methods[1574].signature = "(JLorg/bwapi/bridge/swig/BaseLocationSpacelessSetIterator;)J";
	methods[1574].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_BaseLocationSpacelessSetIterator_1next;

	methods[1575].name = "delete_BaseLocationSpacelessSetIterator";
	methods[1575].signature = "(J)V";
	methods[1575].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1BaseLocationSpacelessSetIterator;

	methods[1576].name = "new_PolygonSet";
	methods[1576].signature = "(J)J";
	methods[1576].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSet;

	methods[1577].name = "delete_PolygonSet";
	methods[1577].signature = "(J)V";
	methods[1577].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSet;

	methods[1578].name = "PolygonSet_size";
	methods[1578].signature = "(JLorg/bwapi/bridge/swig/PolygonSet;)I";
	methods[1578].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1size;

	methods[1579].name = "PolygonSet_contains";
	methods[1579].signature = "(JLorg/bwapi/bridge/swig/PolygonSet;JLorg/bwapi/bridge/swig/SWIG_Polygon;)Z";
	methods[1579].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1contains;

	methods[1580].name = "PolygonSet_add";
	methods[1580].signature = "(JLorg/bwapi/bridge/swig/PolygonSet;JLorg/bwapi/bridge/swig/SWIG_Polygon;)Z";
	methods[1580].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1add;

	methods[1581].name = "PolygonSet_clear";
	methods[1581].signature = "(JLorg/bwapi/bridge/swig/PolygonSet;)V";
	methods[1581].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1clear;

	methods[1582].name = "PolygonSet_remove";
	methods[1582].signature = "(JLorg/bwapi/bridge/swig/PolygonSet;JLorg/bwapi/bridge/swig/SWIG_Polygon;)Z";
	methods[1582].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSet_1remove;

	methods[1583].name = "new_PolygonSetIterator";
	methods[1583].signature = "(J)J";
	methods[1583].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSetIterator;

	methods[1584].name = "PolygonSetIterator_hasNext";
	methods[1584].signature = "(JLorg/bwapi/bridge/swig/PolygonSetIterator;)Z";
	methods[1584].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSetIterator_1hasNext;

	methods[1585].name = "PolygonSetIterator_next";
	methods[1585].signature = "(JLorg/bwapi/bridge/swig/PolygonSetIterator;)J";
	methods[1585].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSetIterator_1next;

	methods[1586].name = "delete_PolygonSetIterator";
	methods[1586].signature = "(J)V";
	methods[1586].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSetIterator;

	methods[1587].name = "new_PolygonSpacelessSet";
	methods[1587].signature = "(J)J";
	methods[1587].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSpacelessSet;

	methods[1588].name = "delete_PolygonSpacelessSet";
	methods[1588].signature = "(J)V";
	methods[1588].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSpacelessSet;

	methods[1589].name = "PolygonSpacelessSet_size";
	methods[1589].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSet;)I";
	methods[1589].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1size;

	methods[1590].name = "PolygonSpacelessSet_contains";
	methods[1590].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSet;J)Z";
	methods[1590].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1contains;

	methods[1591].name = "PolygonSpacelessSet_add";
	methods[1591].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSet;J)Z";
	methods[1591].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1add;

	methods[1592].name = "PolygonSpacelessSet_clear";
	methods[1592].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSet;)V";
	methods[1592].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1clear;

	methods[1593].name = "PolygonSpacelessSet_remove";
	methods[1593].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSet;J)Z";
	methods[1593].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSet_1remove;

	methods[1594].name = "new_PolygonSpacelessSetIterator";
	methods[1594].signature = "(J)J";
	methods[1594].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PolygonSpacelessSetIterator;

	methods[1595].name = "PolygonSpacelessSetIterator_hasNext";
	methods[1595].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSetIterator;)Z";
	methods[1595].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSetIterator_1hasNext;

	methods[1596].name = "PolygonSpacelessSetIterator_next";
	methods[1596].signature = "(JLorg/bwapi/bridge/swig/PolygonSpacelessSetIterator;)J";
	methods[1596].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PolygonSpacelessSetIterator_1next;

	methods[1597].name = "delete_PolygonSpacelessSetIterator";
	methods[1597].signature = "(J)V";
	methods[1597].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PolygonSpacelessSetIterator;

	methods[1598].name = "new_PositionVector";
	methods[1598].signature = "(J)J";
	methods[1598].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_new_1PositionVector;

	methods[1599].name = "delete_PositionVector";
	methods[1599].signature = "(J)V";
	methods[1599].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_delete_1PositionVector;

	methods[1600].name = "PositionVector_size";
	methods[1600].signature = "(JLorg/bwapi/bridge/swig/PositionVector;)I";
	methods[1600].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1size;

	methods[1601].name = "PositionVector_add";
	methods[1601].signature = "(JLorg/bwapi/bridge/swig/PositionVector;IJLorg/bwapi/bridge/swig/SWIG_Position;)V";
	methods[1601].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1add;

	methods[1602].name = "PositionVector_clear";
	methods[1602].signature = "(JLorg/bwapi/bridge/swig/PositionVector;)V";
	methods[1602].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1clear;

	methods[1603].name = "PositionVector_set";
	methods[1603].signature = "(JLorg/bwapi/bridge/swig/PositionVector;IJLorg/bwapi/bridge/swig/SWIG_Position;)J";
	methods[1603].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1set;

	methods[1604].name = "PositionVector_remove";
	methods[1604].signature = "(JLorg/bwapi/bridge/swig/PositionVector;I)J";
	methods[1604].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1remove;

	methods[1605].name = "PositionVector_get";
	methods[1605].signature = "(JLorg/bwapi/bridge/swig/PositionVector;I)J";
	methods[1605].fnPtr = (void*)&Java_org_bwapi_bridge_swig_bridgeJNI_PositionVector_1get;

	return (int) env->RegisterNatives(cls, methods, 1606);
}